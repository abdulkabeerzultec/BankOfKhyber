'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9043
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("SAPReports"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SAPReports
    Inherits Global.System.Data.DataSet
    
    Private tableGoodsReceivingReport As GoodsReceivingReportDataTable
    
    Private tableGoodsIssuanceReport As GoodsIssuanceReportDataTable
    
    Private tableReversalReport As ReversalReportDataTable
    
    Private tableVendorReturnReport As VendorReturnReportDataTable
    
    Private tableWarrantyClaimReport As WarrantyClaimReportDataTable
    
    Private tableWarrantyReceiveSame As WarrantyReceiveSameDataTable
    
    Private tableWarrantyReceiveReplace As WarrantyReceiveReplaceDataTable
    
    Private tableCompanyAssets As CompanyAssetsDataTable
    
    Private tableNonBarCodedTemp As NonBarCodedTempDataTable
    
    Private tablerpt_AssetsLog As rpt_AssetsLogDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GoodsReceivingReport")) Is Nothing) Then
                MyBase.Tables.Add(New GoodsReceivingReportDataTable(ds.Tables("GoodsReceivingReport")))
            End If
            If (Not (ds.Tables("GoodsIssuanceReport")) Is Nothing) Then
                MyBase.Tables.Add(New GoodsIssuanceReportDataTable(ds.Tables("GoodsIssuanceReport")))
            End If
            If (Not (ds.Tables("ReversalReport")) Is Nothing) Then
                MyBase.Tables.Add(New ReversalReportDataTable(ds.Tables("ReversalReport")))
            End If
            If (Not (ds.Tables("VendorReturnReport")) Is Nothing) Then
                MyBase.Tables.Add(New VendorReturnReportDataTable(ds.Tables("VendorReturnReport")))
            End If
            If (Not (ds.Tables("WarrantyClaimReport")) Is Nothing) Then
                MyBase.Tables.Add(New WarrantyClaimReportDataTable(ds.Tables("WarrantyClaimReport")))
            End If
            If (Not (ds.Tables("WarrantyReceiveSame")) Is Nothing) Then
                MyBase.Tables.Add(New WarrantyReceiveSameDataTable(ds.Tables("WarrantyReceiveSame")))
            End If
            If (Not (ds.Tables("WarrantyReceiveReplace")) Is Nothing) Then
                MyBase.Tables.Add(New WarrantyReceiveReplaceDataTable(ds.Tables("WarrantyReceiveReplace")))
            End If
            If (Not (ds.Tables("CompanyAssets")) Is Nothing) Then
                MyBase.Tables.Add(New CompanyAssetsDataTable(ds.Tables("CompanyAssets")))
            End If
            If (Not (ds.Tables("NonBarCodedTemp")) Is Nothing) Then
                MyBase.Tables.Add(New NonBarCodedTempDataTable(ds.Tables("NonBarCodedTemp")))
            End If
            If (Not (ds.Tables("rpt_AssetsLog")) Is Nothing) Then
                MyBase.Tables.Add(New rpt_AssetsLogDataTable(ds.Tables("rpt_AssetsLog")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GoodsReceivingReport() As GoodsReceivingReportDataTable
        Get
            Return Me.tableGoodsReceivingReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GoodsIssuanceReport() As GoodsIssuanceReportDataTable
        Get
            Return Me.tableGoodsIssuanceReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ReversalReport() As ReversalReportDataTable
        Get
            Return Me.tableReversalReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VendorReturnReport() As VendorReturnReportDataTable
        Get
            Return Me.tableVendorReturnReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WarrantyClaimReport() As WarrantyClaimReportDataTable
        Get
            Return Me.tableWarrantyClaimReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WarrantyReceiveSame() As WarrantyReceiveSameDataTable
        Get
            Return Me.tableWarrantyReceiveSame
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WarrantyReceiveReplace() As WarrantyReceiveReplaceDataTable
        Get
            Return Me.tableWarrantyReceiveReplace
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CompanyAssets() As CompanyAssetsDataTable
        Get
            Return Me.tableCompanyAssets
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NonBarCodedTemp() As NonBarCodedTempDataTable
        Get
            Return Me.tableNonBarCodedTemp
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rpt_AssetsLog() As rpt_AssetsLogDataTable
        Get
            Return Me.tablerpt_AssetsLog
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As SAPReports = CType(MyBase.Clone,SAPReports)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("GoodsReceivingReport")) Is Nothing) Then
                MyBase.Tables.Add(New GoodsReceivingReportDataTable(ds.Tables("GoodsReceivingReport")))
            End If
            If (Not (ds.Tables("GoodsIssuanceReport")) Is Nothing) Then
                MyBase.Tables.Add(New GoodsIssuanceReportDataTable(ds.Tables("GoodsIssuanceReport")))
            End If
            If (Not (ds.Tables("ReversalReport")) Is Nothing) Then
                MyBase.Tables.Add(New ReversalReportDataTable(ds.Tables("ReversalReport")))
            End If
            If (Not (ds.Tables("VendorReturnReport")) Is Nothing) Then
                MyBase.Tables.Add(New VendorReturnReportDataTable(ds.Tables("VendorReturnReport")))
            End If
            If (Not (ds.Tables("WarrantyClaimReport")) Is Nothing) Then
                MyBase.Tables.Add(New WarrantyClaimReportDataTable(ds.Tables("WarrantyClaimReport")))
            End If
            If (Not (ds.Tables("WarrantyReceiveSame")) Is Nothing) Then
                MyBase.Tables.Add(New WarrantyReceiveSameDataTable(ds.Tables("WarrantyReceiveSame")))
            End If
            If (Not (ds.Tables("WarrantyReceiveReplace")) Is Nothing) Then
                MyBase.Tables.Add(New WarrantyReceiveReplaceDataTable(ds.Tables("WarrantyReceiveReplace")))
            End If
            If (Not (ds.Tables("CompanyAssets")) Is Nothing) Then
                MyBase.Tables.Add(New CompanyAssetsDataTable(ds.Tables("CompanyAssets")))
            End If
            If (Not (ds.Tables("NonBarCodedTemp")) Is Nothing) Then
                MyBase.Tables.Add(New NonBarCodedTempDataTable(ds.Tables("NonBarCodedTemp")))
            End If
            If (Not (ds.Tables("rpt_AssetsLog")) Is Nothing) Then
                MyBase.Tables.Add(New rpt_AssetsLogDataTable(ds.Tables("rpt_AssetsLog")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableGoodsReceivingReport = CType(MyBase.Tables("GoodsReceivingReport"),GoodsReceivingReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGoodsReceivingReport) Is Nothing) Then
                Me.tableGoodsReceivingReport.InitVars
            End If
        End If
        Me.tableGoodsIssuanceReport = CType(MyBase.Tables("GoodsIssuanceReport"),GoodsIssuanceReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGoodsIssuanceReport) Is Nothing) Then
                Me.tableGoodsIssuanceReport.InitVars
            End If
        End If
        Me.tableReversalReport = CType(MyBase.Tables("ReversalReport"),ReversalReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReversalReport) Is Nothing) Then
                Me.tableReversalReport.InitVars
            End If
        End If
        Me.tableVendorReturnReport = CType(MyBase.Tables("VendorReturnReport"),VendorReturnReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVendorReturnReport) Is Nothing) Then
                Me.tableVendorReturnReport.InitVars
            End If
        End If
        Me.tableWarrantyClaimReport = CType(MyBase.Tables("WarrantyClaimReport"),WarrantyClaimReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWarrantyClaimReport) Is Nothing) Then
                Me.tableWarrantyClaimReport.InitVars
            End If
        End If
        Me.tableWarrantyReceiveSame = CType(MyBase.Tables("WarrantyReceiveSame"),WarrantyReceiveSameDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWarrantyReceiveSame) Is Nothing) Then
                Me.tableWarrantyReceiveSame.InitVars
            End If
        End If
        Me.tableWarrantyReceiveReplace = CType(MyBase.Tables("WarrantyReceiveReplace"),WarrantyReceiveReplaceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWarrantyReceiveReplace) Is Nothing) Then
                Me.tableWarrantyReceiveReplace.InitVars
            End If
        End If
        Me.tableCompanyAssets = CType(MyBase.Tables("CompanyAssets"),CompanyAssetsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCompanyAssets) Is Nothing) Then
                Me.tableCompanyAssets.InitVars
            End If
        End If
        Me.tableNonBarCodedTemp = CType(MyBase.Tables("NonBarCodedTemp"),NonBarCodedTempDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNonBarCodedTemp) Is Nothing) Then
                Me.tableNonBarCodedTemp.InitVars
            End If
        End If
        Me.tablerpt_AssetsLog = CType(MyBase.Tables("rpt_AssetsLog"),rpt_AssetsLogDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerpt_AssetsLog) Is Nothing) Then
                Me.tablerpt_AssetsLog.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "SAPReports"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SAPReports.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableGoodsReceivingReport = New GoodsReceivingReportDataTable
        MyBase.Tables.Add(Me.tableGoodsReceivingReport)
        Me.tableGoodsIssuanceReport = New GoodsIssuanceReportDataTable
        MyBase.Tables.Add(Me.tableGoodsIssuanceReport)
        Me.tableReversalReport = New ReversalReportDataTable
        MyBase.Tables.Add(Me.tableReversalReport)
        Me.tableVendorReturnReport = New VendorReturnReportDataTable
        MyBase.Tables.Add(Me.tableVendorReturnReport)
        Me.tableWarrantyClaimReport = New WarrantyClaimReportDataTable
        MyBase.Tables.Add(Me.tableWarrantyClaimReport)
        Me.tableWarrantyReceiveSame = New WarrantyReceiveSameDataTable
        MyBase.Tables.Add(Me.tableWarrantyReceiveSame)
        Me.tableWarrantyReceiveReplace = New WarrantyReceiveReplaceDataTable
        MyBase.Tables.Add(Me.tableWarrantyReceiveReplace)
        Me.tableCompanyAssets = New CompanyAssetsDataTable
        MyBase.Tables.Add(Me.tableCompanyAssets)
        Me.tableNonBarCodedTemp = New NonBarCodedTempDataTable
        MyBase.Tables.Add(Me.tableNonBarCodedTemp)
        Me.tablerpt_AssetsLog = New rpt_AssetsLogDataTable
        MyBase.Tables.Add(Me.tablerpt_AssetsLog)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGoodsReceivingReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGoodsIssuanceReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReversalReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVendorReturnReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWarrantyClaimReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWarrantyReceiveSame() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWarrantyReceiveReplace() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCompanyAssets() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNonBarCodedTemp() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerpt_AssetsLog() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SAPReports = New SAPReports
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub GoodsReceivingReportRowChangeEventHandler(ByVal sender As Object, ByVal e As GoodsReceivingReportRowChangeEvent)
    
    Public Delegate Sub GoodsIssuanceReportRowChangeEventHandler(ByVal sender As Object, ByVal e As GoodsIssuanceReportRowChangeEvent)
    
    Public Delegate Sub ReversalReportRowChangeEventHandler(ByVal sender As Object, ByVal e As ReversalReportRowChangeEvent)
    
    Public Delegate Sub VendorReturnReportRowChangeEventHandler(ByVal sender As Object, ByVal e As VendorReturnReportRowChangeEvent)
    
    Public Delegate Sub WarrantyClaimReportRowChangeEventHandler(ByVal sender As Object, ByVal e As WarrantyClaimReportRowChangeEvent)
    
    Public Delegate Sub WarrantyReceiveSameRowChangeEventHandler(ByVal sender As Object, ByVal e As WarrantyReceiveSameRowChangeEvent)
    
    Public Delegate Sub WarrantyReceiveReplaceRowChangeEventHandler(ByVal sender As Object, ByVal e As WarrantyReceiveReplaceRowChangeEvent)
    
    Public Delegate Sub CompanyAssetsRowChangeEventHandler(ByVal sender As Object, ByVal e As CompanyAssetsRowChangeEvent)
    
    Public Delegate Sub NonBarCodedTempRowChangeEventHandler(ByVal sender As Object, ByVal e As NonBarCodedTempRowChangeEvent)
    
    Public Delegate Sub rpt_AssetsLogRowChangeEventHandler(ByVal sender As Object, ByVal e As rpt_AssetsLogRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GoodsReceivingReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPONo As Global.System.Data.DataColumn
        
        Private columnDeliveryNo As Global.System.Data.DataColumn
        
        Private columnPostingDate As Global.System.Data.DataColumn
        
        Private columnManPartNo As Global.System.Data.DataColumn
        
        Private columnSAPMatCode As Global.System.Data.DataColumn
        
        Private columnLineItemNo As Global.System.Data.DataColumn
        
        Private columnSeqNo As Global.System.Data.DataColumn
        
        Private columnProductSerialNo As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnDocNo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GoodsReceivingReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeliveryNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeliveryNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManPartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManPartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAPMatCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAPMatCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineItemNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineItemNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeqNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductSerialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductSerialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GoodsReceivingReportRow
            Get
                Return CType(Me.Rows(index),GoodsReceivingReportRow)
            End Get
        End Property
        
        Public Event GoodsReceivingReportRowChanging As GoodsReceivingReportRowChangeEventHandler
        
        Public Event GoodsReceivingReportRowChanged As GoodsReceivingReportRowChangeEventHandler
        
        Public Event GoodsReceivingReportRowDeleting As GoodsReceivingReportRowChangeEventHandler
        
        Public Event GoodsReceivingReportRowDeleted As GoodsReceivingReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGoodsReceivingReportRow(ByVal row As GoodsReceivingReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGoodsReceivingReportRow(ByVal PONo As String, ByVal DeliveryNo As String, ByVal PostingDate As String, ByVal ManPartNo As String, ByVal SAPMatCode As String, ByVal LineItemNo As Integer, ByVal SeqNo As Integer, ByVal ProductSerialNo As String, ByVal Status As String, ByVal DocNo As String) As GoodsReceivingReportRow
            Dim rowGoodsReceivingReportRow As GoodsReceivingReportRow = CType(Me.NewRow,GoodsReceivingReportRow)
            Dim columnValuesArray() As Object = New Object() {PONo, DeliveryNo, PostingDate, ManPartNo, SAPMatCode, LineItemNo, SeqNo, ProductSerialNo, Status, DocNo}
            rowGoodsReceivingReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGoodsReceivingReportRow)
            Return rowGoodsReceivingReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GoodsReceivingReportDataTable = CType(MyBase.Clone,GoodsReceivingReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GoodsReceivingReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPONo = MyBase.Columns("PONo")
            Me.columnDeliveryNo = MyBase.Columns("DeliveryNo")
            Me.columnPostingDate = MyBase.Columns("PostingDate")
            Me.columnManPartNo = MyBase.Columns("ManPartNo")
            Me.columnSAPMatCode = MyBase.Columns("SAPMatCode")
            Me.columnLineItemNo = MyBase.Columns("LineItemNo")
            Me.columnSeqNo = MyBase.Columns("SeqNo")
            Me.columnProductSerialNo = MyBase.Columns("ProductSerialNo")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnDocNo = MyBase.Columns("DocNo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPONo = New Global.System.Data.DataColumn("PONo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONo)
            Me.columnDeliveryNo = New Global.System.Data.DataColumn("DeliveryNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeliveryNo)
            Me.columnPostingDate = New Global.System.Data.DataColumn("PostingDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostingDate)
            Me.columnManPartNo = New Global.System.Data.DataColumn("ManPartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManPartNo)
            Me.columnSAPMatCode = New Global.System.Data.DataColumn("SAPMatCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAPMatCode)
            Me.columnLineItemNo = New Global.System.Data.DataColumn("LineItemNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineItemNo)
            Me.columnSeqNo = New Global.System.Data.DataColumn("SeqNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNo)
            Me.columnProductSerialNo = New Global.System.Data.DataColumn("ProductSerialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductSerialNo)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnDocNo = New Global.System.Data.DataColumn("DocNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNo)
            Me.columnPONo.MaxLength = 100
            Me.columnDeliveryNo.MaxLength = 100
            Me.columnPostingDate.ReadOnly = true
            Me.columnPostingDate.MaxLength = 30
            Me.columnManPartNo.MaxLength = 255
            Me.columnSAPMatCode.MaxLength = 255
            Me.columnProductSerialNo.MaxLength = 255
            Me.columnStatus.ReadOnly = true
            Me.columnStatus.MaxLength = 50
            Me.columnDocNo.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGoodsReceivingReportRow() As GoodsReceivingReportRow
            Return CType(Me.NewRow,GoodsReceivingReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GoodsReceivingReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GoodsReceivingReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GoodsReceivingReportRowChangedEvent) Is Nothing) Then
                RaiseEvent GoodsReceivingReportRowChanged(Me, New GoodsReceivingReportRowChangeEvent(CType(e.Row,GoodsReceivingReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GoodsReceivingReportRowChangingEvent) Is Nothing) Then
                RaiseEvent GoodsReceivingReportRowChanging(Me, New GoodsReceivingReportRowChangeEvent(CType(e.Row,GoodsReceivingReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GoodsReceivingReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent GoodsReceivingReportRowDeleted(Me, New GoodsReceivingReportRowChangeEvent(CType(e.Row,GoodsReceivingReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GoodsReceivingReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent GoodsReceivingReportRowDeleting(Me, New GoodsReceivingReportRowChangeEvent(CType(e.Row,GoodsReceivingReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGoodsReceivingReportRow(ByVal row As GoodsReceivingReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SAPReports = New SAPReports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GoodsReceivingReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GoodsIssuanceReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnMovementType As Global.System.Data.DataColumn
        
        Private columnInvProposalNo As Global.System.Data.DataColumn
        
        Private columnPRNo As Global.System.Data.DataColumn
        
        Private columnIssueDate As Global.System.Data.DataColumn
        
        Private columnEmpNo As Global.System.Data.DataColumn
        
        Private columnAssetNo As Global.System.Data.DataColumn
        
        Private columnSAPMatCode As Global.System.Data.DataColumn
        
        Private columnManPartNo As Global.System.Data.DataColumn
        
        Private columnSerialNo As Global.System.Data.DataColumn
        
        Private columnCostCenter As Global.System.Data.DataColumn
        
        Private columnBusinessArea As Global.System.Data.DataColumn
        
        Private columnGLAC As Global.System.Data.DataColumn
        
        Private columnEmpName As Global.System.Data.DataColumn
        
        Private columnLineItemNo As Global.System.Data.DataColumn
        
        Private columnDocNo As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GoodsIssuanceReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MovementTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMovementType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvProposalNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvProposalNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IssueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIssueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssetNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAPMatCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAPMatCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManPartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManPartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostCenterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostCenter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BusinessAreaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBusinessArea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineItemNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineItemNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GoodsIssuanceReportRow
            Get
                Return CType(Me.Rows(index),GoodsIssuanceReportRow)
            End Get
        End Property
        
        Public Event GoodsIssuanceReportRowChanging As GoodsIssuanceReportRowChangeEventHandler
        
        Public Event GoodsIssuanceReportRowChanged As GoodsIssuanceReportRowChangeEventHandler
        
        Public Event GoodsIssuanceReportRowDeleting As GoodsIssuanceReportRowChangeEventHandler
        
        Public Event GoodsIssuanceReportRowDeleted As GoodsIssuanceReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGoodsIssuanceReportRow(ByVal row As GoodsIssuanceReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGoodsIssuanceReportRow( _
                    ByVal DocType As String,  _
                    ByVal MovementType As String,  _
                    ByVal InvProposalNo As String,  _
                    ByVal PRNo As String,  _
                    ByVal IssueDate As String,  _
                    ByVal EmpNo As String,  _
                    ByVal AssetNo As String,  _
                    ByVal SAPMatCode As String,  _
                    ByVal ManPartNo As String,  _
                    ByVal SerialNo As String,  _
                    ByVal CostCenter As String,  _
                    ByVal BusinessArea As String,  _
                    ByVal GLAC As String,  _
                    ByVal EmpName As String,  _
                    ByVal LineItemNo As Integer,  _
                    ByVal DocNo As String,  _
                    ByVal Remarks As String) As GoodsIssuanceReportRow
            Dim rowGoodsIssuanceReportRow As GoodsIssuanceReportRow = CType(Me.NewRow,GoodsIssuanceReportRow)
            Dim columnValuesArray() As Object = New Object() {DocType, MovementType, InvProposalNo, PRNo, IssueDate, EmpNo, AssetNo, SAPMatCode, ManPartNo, SerialNo, CostCenter, BusinessArea, GLAC, EmpName, LineItemNo, DocNo, Remarks}
            rowGoodsIssuanceReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGoodsIssuanceReportRow)
            Return rowGoodsIssuanceReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GoodsIssuanceReportDataTable = CType(MyBase.Clone,GoodsIssuanceReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GoodsIssuanceReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnMovementType = MyBase.Columns("MovementType")
            Me.columnInvProposalNo = MyBase.Columns("InvProposalNo")
            Me.columnPRNo = MyBase.Columns("PRNo")
            Me.columnIssueDate = MyBase.Columns("IssueDate")
            Me.columnEmpNo = MyBase.Columns("EmpNo")
            Me.columnAssetNo = MyBase.Columns("AssetNo")
            Me.columnSAPMatCode = MyBase.Columns("SAPMatCode")
            Me.columnManPartNo = MyBase.Columns("ManPartNo")
            Me.columnSerialNo = MyBase.Columns("SerialNo")
            Me.columnCostCenter = MyBase.Columns("CostCenter")
            Me.columnBusinessArea = MyBase.Columns("BusinessArea")
            Me.columnGLAC = MyBase.Columns("GLAC")
            Me.columnEmpName = MyBase.Columns("EmpName")
            Me.columnLineItemNo = MyBase.Columns("LineItemNo")
            Me.columnDocNo = MyBase.Columns("DocNo")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnMovementType = New Global.System.Data.DataColumn("MovementType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMovementType)
            Me.columnInvProposalNo = New Global.System.Data.DataColumn("InvProposalNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvProposalNo)
            Me.columnPRNo = New Global.System.Data.DataColumn("PRNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRNo)
            Me.columnIssueDate = New Global.System.Data.DataColumn("IssueDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIssueDate)
            Me.columnEmpNo = New Global.System.Data.DataColumn("EmpNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpNo)
            Me.columnAssetNo = New Global.System.Data.DataColumn("AssetNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetNo)
            Me.columnSAPMatCode = New Global.System.Data.DataColumn("SAPMatCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAPMatCode)
            Me.columnManPartNo = New Global.System.Data.DataColumn("ManPartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManPartNo)
            Me.columnSerialNo = New Global.System.Data.DataColumn("SerialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialNo)
            Me.columnCostCenter = New Global.System.Data.DataColumn("CostCenter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostCenter)
            Me.columnBusinessArea = New Global.System.Data.DataColumn("BusinessArea", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBusinessArea)
            Me.columnGLAC = New Global.System.Data.DataColumn("GLAC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLAC)
            Me.columnEmpName = New Global.System.Data.DataColumn("EmpName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpName)
            Me.columnLineItemNo = New Global.System.Data.DataColumn("LineItemNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineItemNo)
            Me.columnDocNo = New Global.System.Data.DataColumn("DocNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNo)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnDocType.ReadOnly = true
            Me.columnDocType.MaxLength = 2
            Me.columnMovementType.MaxLength = 50
            Me.columnInvProposalNo.MaxLength = 100
            Me.columnPRNo.MaxLength = 100
            Me.columnIssueDate.ReadOnly = true
            Me.columnIssueDate.MaxLength = 30
            Me.columnEmpNo.MaxLength = 100
            Me.columnAssetNo.MaxLength = 100
            Me.columnSAPMatCode.MaxLength = 255
            Me.columnManPartNo.MaxLength = 255
            Me.columnSerialNo.MaxLength = 255
            Me.columnCostCenter.MaxLength = 100
            Me.columnBusinessArea.MaxLength = 100
            Me.columnGLAC.MaxLength = 100
            Me.columnEmpName.MaxLength = 100
            Me.columnDocNo.MaxLength = 50
            Me.columnRemarks.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGoodsIssuanceReportRow() As GoodsIssuanceReportRow
            Return CType(Me.NewRow,GoodsIssuanceReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GoodsIssuanceReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GoodsIssuanceReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GoodsIssuanceReportRowChangedEvent) Is Nothing) Then
                RaiseEvent GoodsIssuanceReportRowChanged(Me, New GoodsIssuanceReportRowChangeEvent(CType(e.Row,GoodsIssuanceReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GoodsIssuanceReportRowChangingEvent) Is Nothing) Then
                RaiseEvent GoodsIssuanceReportRowChanging(Me, New GoodsIssuanceReportRowChangeEvent(CType(e.Row,GoodsIssuanceReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GoodsIssuanceReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent GoodsIssuanceReportRowDeleted(Me, New GoodsIssuanceReportRowChangeEvent(CType(e.Row,GoodsIssuanceReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GoodsIssuanceReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent GoodsIssuanceReportRowDeleting(Me, New GoodsIssuanceReportRowChangeEvent(CType(e.Row,GoodsIssuanceReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGoodsIssuanceReportRow(ByVal row As GoodsIssuanceReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SAPReports = New SAPReports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GoodsIssuanceReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ReversalReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnReversalDocNo As Global.System.Data.DataColumn
        
        Private columnSAPPartNo As Global.System.Data.DataColumn
        
        Private columnSerialNo As Global.System.Data.DataColumn
        
        Private columnManufacturePartNo As Global.System.Data.DataColumn
        
        Private columnSAPMaterialDocNo As Global.System.Data.DataColumn
        
        Private columnSAPMaterialDocLineNo As Global.System.Data.DataColumn
        
        Private columnPORequisitionNo As Global.System.Data.DataColumn
        
        Private columnInvProposalNo As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnGRGIDocNo As Global.System.Data.DataColumn
        
        Private columnPlant As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnReasonOfMovement As Global.System.Data.DataColumn
        
        Private columnPONo As Global.System.Data.DataColumn
        
        Private columnLineItemNo As Global.System.Data.DataColumn
        
        Private columnGLAC As Global.System.Data.DataColumn
        
        Private columnCostCenter As Global.System.Data.DataColumn
        
        Private columnBusinessArea As Global.System.Data.DataColumn
        
        Private columnAssetNo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ReversalReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReversalDocNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReversalDocNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAPPartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAPPartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManufacturePartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManufacturePartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAPMaterialDocNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAPMaterialDocNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAPMaterialDocLineNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAPMaterialDocLineNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PORequisitionNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPORequisitionNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvProposalNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvProposalNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GRGIDocNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRGIDocNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReasonOfMovementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReasonOfMovement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineItemNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineItemNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostCenterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostCenter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BusinessAreaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBusinessArea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssetNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReversalReportRow
            Get
                Return CType(Me.Rows(index),ReversalReportRow)
            End Get
        End Property
        
        Public Event ReversalReportRowChanging As ReversalReportRowChangeEventHandler
        
        Public Event ReversalReportRowChanged As ReversalReportRowChangeEventHandler
        
        Public Event ReversalReportRowDeleting As ReversalReportRowChangeEventHandler
        
        Public Event ReversalReportRowDeleted As ReversalReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReversalReportRow(ByVal row As ReversalReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReversalReportRow( _
                    ByVal DocType As String,  _
                    ByVal ReversalDocNo As String,  _
                    ByVal SAPPartNo As String,  _
                    ByVal SerialNo As String,  _
                    ByVal ManufacturePartNo As String,  _
                    ByVal SAPMaterialDocNo As String,  _
                    ByVal SAPMaterialDocLineNo As String,  _
                    ByVal PORequisitionNo As String,  _
                    ByVal InvProposalNo As String,  _
                    ByVal DocDate As String,  _
                    ByVal GRGIDocNo As String,  _
                    ByVal Plant As String,  _
                    ByVal Location As String,  _
                    ByVal ReasonOfMovement As String,  _
                    ByVal PONo As String,  _
                    ByVal LineItemNo As Integer,  _
                    ByVal GLAC As String,  _
                    ByVal CostCenter As String,  _
                    ByVal BusinessArea As String,  _
                    ByVal AssetNo As String) As ReversalReportRow
            Dim rowReversalReportRow As ReversalReportRow = CType(Me.NewRow,ReversalReportRow)
            Dim columnValuesArray() As Object = New Object() {DocType, ReversalDocNo, SAPPartNo, SerialNo, ManufacturePartNo, SAPMaterialDocNo, SAPMaterialDocLineNo, PORequisitionNo, InvProposalNo, DocDate, GRGIDocNo, Plant, Location, ReasonOfMovement, PONo, LineItemNo, GLAC, CostCenter, BusinessArea, AssetNo}
            rowReversalReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReversalReportRow)
            Return rowReversalReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ReversalReportDataTable = CType(MyBase.Clone,ReversalReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ReversalReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnReversalDocNo = MyBase.Columns("ReversalDocNo")
            Me.columnSAPPartNo = MyBase.Columns("SAPPartNo")
            Me.columnSerialNo = MyBase.Columns("SerialNo")
            Me.columnManufacturePartNo = MyBase.Columns("ManufacturePartNo")
            Me.columnSAPMaterialDocNo = MyBase.Columns("SAPMaterialDocNo")
            Me.columnSAPMaterialDocLineNo = MyBase.Columns("SAPMaterialDocLineNo")
            Me.columnPORequisitionNo = MyBase.Columns("PORequisitionNo")
            Me.columnInvProposalNo = MyBase.Columns("InvProposalNo")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnGRGIDocNo = MyBase.Columns("GRGIDocNo")
            Me.columnPlant = MyBase.Columns("Plant")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnReasonOfMovement = MyBase.Columns("ReasonOfMovement")
            Me.columnPONo = MyBase.Columns("PONo")
            Me.columnLineItemNo = MyBase.Columns("LineItemNo")
            Me.columnGLAC = MyBase.Columns("GLAC")
            Me.columnCostCenter = MyBase.Columns("CostCenter")
            Me.columnBusinessArea = MyBase.Columns("BusinessArea")
            Me.columnAssetNo = MyBase.Columns("AssetNo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnReversalDocNo = New Global.System.Data.DataColumn("ReversalDocNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReversalDocNo)
            Me.columnSAPPartNo = New Global.System.Data.DataColumn("SAPPartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAPPartNo)
            Me.columnSerialNo = New Global.System.Data.DataColumn("SerialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialNo)
            Me.columnManufacturePartNo = New Global.System.Data.DataColumn("ManufacturePartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManufacturePartNo)
            Me.columnSAPMaterialDocNo = New Global.System.Data.DataColumn("SAPMaterialDocNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAPMaterialDocNo)
            Me.columnSAPMaterialDocLineNo = New Global.System.Data.DataColumn("SAPMaterialDocLineNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAPMaterialDocLineNo)
            Me.columnPORequisitionNo = New Global.System.Data.DataColumn("PORequisitionNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPORequisitionNo)
            Me.columnInvProposalNo = New Global.System.Data.DataColumn("InvProposalNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvProposalNo)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnGRGIDocNo = New Global.System.Data.DataColumn("GRGIDocNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRGIDocNo)
            Me.columnPlant = New Global.System.Data.DataColumn("Plant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlant)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnReasonOfMovement = New Global.System.Data.DataColumn("ReasonOfMovement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReasonOfMovement)
            Me.columnPONo = New Global.System.Data.DataColumn("PONo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONo)
            Me.columnLineItemNo = New Global.System.Data.DataColumn("LineItemNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineItemNo)
            Me.columnGLAC = New Global.System.Data.DataColumn("GLAC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLAC)
            Me.columnCostCenter = New Global.System.Data.DataColumn("CostCenter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostCenter)
            Me.columnBusinessArea = New Global.System.Data.DataColumn("BusinessArea", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBusinessArea)
            Me.columnAssetNo = New Global.System.Data.DataColumn("AssetNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetNo)
            Me.columnDocType.ReadOnly = true
            Me.columnDocType.MaxLength = 11
            Me.columnReversalDocNo.MaxLength = 50
            Me.columnSAPPartNo.MaxLength = 255
            Me.columnSerialNo.MaxLength = 255
            Me.columnManufacturePartNo.MaxLength = 255
            Me.columnSAPMaterialDocNo.MaxLength = 100
            Me.columnSAPMaterialDocLineNo.MaxLength = 100
            Me.columnPORequisitionNo.MaxLength = 100
            Me.columnInvProposalNo.MaxLength = 100
            Me.columnDocDate.ReadOnly = true
            Me.columnDocDate.MaxLength = 30
            Me.columnGRGIDocNo.MaxLength = 50
            Me.columnPlant.MaxLength = 100
            Me.columnLocation.MaxLength = 100
            Me.columnReasonOfMovement.MaxLength = 1073741823
            Me.columnPONo.MaxLength = 100
            Me.columnGLAC.MaxLength = 100
            Me.columnCostCenter.MaxLength = 100
            Me.columnBusinessArea.MaxLength = 100
            Me.columnAssetNo.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReversalReportRow() As ReversalReportRow
            Return CType(Me.NewRow,ReversalReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ReversalReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ReversalReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReversalReportRowChangedEvent) Is Nothing) Then
                RaiseEvent ReversalReportRowChanged(Me, New ReversalReportRowChangeEvent(CType(e.Row,ReversalReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReversalReportRowChangingEvent) Is Nothing) Then
                RaiseEvent ReversalReportRowChanging(Me, New ReversalReportRowChangeEvent(CType(e.Row,ReversalReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReversalReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReversalReportRowDeleted(Me, New ReversalReportRowChangeEvent(CType(e.Row,ReversalReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReversalReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReversalReportRowDeleting(Me, New ReversalReportRowChangeEvent(CType(e.Row,ReversalReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReversalReportRow(ByVal row As ReversalReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SAPReports = New SAPReports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ReversalReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VendorReturnReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocNo As Global.System.Data.DataColumn
        
        Private columnPONo As Global.System.Data.DataColumn
        
        Private columnSerialNo As Global.System.Data.DataColumn
        
        Private columnManufacturePartNo As Global.System.Data.DataColumn
        
        Private columnSAPPartNo As Global.System.Data.DataColumn
        
        Private columnPOLineNo As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnPlant As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VendorReturnReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManufacturePartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManufacturePartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAPPartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAPPartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POLineNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOLineNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VendorReturnReportRow
            Get
                Return CType(Me.Rows(index),VendorReturnReportRow)
            End Get
        End Property
        
        Public Event VendorReturnReportRowChanging As VendorReturnReportRowChangeEventHandler
        
        Public Event VendorReturnReportRowChanged As VendorReturnReportRowChangeEventHandler
        
        Public Event VendorReturnReportRowDeleting As VendorReturnReportRowChangeEventHandler
        
        Public Event VendorReturnReportRowDeleted As VendorReturnReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVendorReturnReportRow(ByVal row As VendorReturnReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVendorReturnReportRow(ByVal DocNo As String, ByVal PONo As String, ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal POLineNo As String, ByVal DocType As String, ByVal DocDate As String, ByVal Plant As String, ByVal Location As String) As VendorReturnReportRow
            Dim rowVendorReturnReportRow As VendorReturnReportRow = CType(Me.NewRow,VendorReturnReportRow)
            Dim columnValuesArray() As Object = New Object() {DocNo, PONo, SerialNo, ManufacturePartNo, SAPPartNo, POLineNo, DocType, DocDate, Plant, Location}
            rowVendorReturnReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVendorReturnReportRow)
            Return rowVendorReturnReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VendorReturnReportDataTable = CType(MyBase.Clone,VendorReturnReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VendorReturnReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocNo = MyBase.Columns("DocNo")
            Me.columnPONo = MyBase.Columns("PONo")
            Me.columnSerialNo = MyBase.Columns("SerialNo")
            Me.columnManufacturePartNo = MyBase.Columns("ManufacturePartNo")
            Me.columnSAPPartNo = MyBase.Columns("SAPPartNo")
            Me.columnPOLineNo = MyBase.Columns("POLineNo")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnPlant = MyBase.Columns("Plant")
            Me.columnLocation = MyBase.Columns("Location")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocNo = New Global.System.Data.DataColumn("DocNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNo)
            Me.columnPONo = New Global.System.Data.DataColumn("PONo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONo)
            Me.columnSerialNo = New Global.System.Data.DataColumn("SerialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialNo)
            Me.columnManufacturePartNo = New Global.System.Data.DataColumn("ManufacturePartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManufacturePartNo)
            Me.columnSAPPartNo = New Global.System.Data.DataColumn("SAPPartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAPPartNo)
            Me.columnPOLineNo = New Global.System.Data.DataColumn("POLineNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOLineNo)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnPlant = New Global.System.Data.DataColumn("Plant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlant)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnDocNo.MaxLength = 50
            Me.columnPONo.MaxLength = 100
            Me.columnSerialNo.MaxLength = 255
            Me.columnManufacturePartNo.MaxLength = 255
            Me.columnSAPPartNo.MaxLength = 255
            Me.columnPOLineNo.MaxLength = 100
            Me.columnDocType.MaxLength = 50
            Me.columnDocDate.ReadOnly = true
            Me.columnDocDate.MaxLength = 30
            Me.columnPlant.MaxLength = 100
            Me.columnLocation.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVendorReturnReportRow() As VendorReturnReportRow
            Return CType(Me.NewRow,VendorReturnReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VendorReturnReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VendorReturnReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VendorReturnReportRowChangedEvent) Is Nothing) Then
                RaiseEvent VendorReturnReportRowChanged(Me, New VendorReturnReportRowChangeEvent(CType(e.Row,VendorReturnReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VendorReturnReportRowChangingEvent) Is Nothing) Then
                RaiseEvent VendorReturnReportRowChanging(Me, New VendorReturnReportRowChangeEvent(CType(e.Row,VendorReturnReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VendorReturnReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent VendorReturnReportRowDeleted(Me, New VendorReturnReportRowChangeEvent(CType(e.Row,VendorReturnReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VendorReturnReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent VendorReturnReportRowDeleting(Me, New VendorReturnReportRowChangeEvent(CType(e.Row,VendorReturnReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVendorReturnReportRow(ByVal row As VendorReturnReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SAPReports = New SAPReports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VendorReturnReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WarrantyClaimReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocNo As Global.System.Data.DataColumn
        
        Private columnPONo As Global.System.Data.DataColumn
        
        Private columnSerialNo As Global.System.Data.DataColumn
        
        Private columnManufacturePartNo As Global.System.Data.DataColumn
        
        Private columnSAPPartNo As Global.System.Data.DataColumn
        
        Private columnPOLineNo As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnInvProposalNo As Global.System.Data.DataColumn
        
        Private columnEmpNo As Global.System.Data.DataColumn
        
        Private columnReasonOfFault As Global.System.Data.DataColumn
        
        Private columnDocType As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnExpectedReturnDate As Global.System.Data.DataColumn
        
        Private columnCostCenter As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WarrantyClaimReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManufacturePartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManufacturePartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAPPartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAPPartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POLineNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOLineNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvProposalNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvProposalNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReasonOfFaultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReasonOfFault
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExpectedReturnDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpectedReturnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostCenterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostCenter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WarrantyClaimReportRow
            Get
                Return CType(Me.Rows(index),WarrantyClaimReportRow)
            End Get
        End Property
        
        Public Event WarrantyClaimReportRowChanging As WarrantyClaimReportRowChangeEventHandler
        
        Public Event WarrantyClaimReportRowChanged As WarrantyClaimReportRowChangeEventHandler
        
        Public Event WarrantyClaimReportRowDeleting As WarrantyClaimReportRowChangeEventHandler
        
        Public Event WarrantyClaimReportRowDeleted As WarrantyClaimReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWarrantyClaimReportRow(ByVal row As WarrantyClaimReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWarrantyClaimReportRow(ByVal DocNo As String, ByVal PONo As String, ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal POLineNo As String, ByVal Remarks As String, ByVal InvProposalNo As String, ByVal EmpNo As String, ByVal ReasonOfFault As String, ByVal DocType As String, ByVal DocDate As String, ByVal ExpectedReturnDate As String, ByVal CostCenter As String) As WarrantyClaimReportRow
            Dim rowWarrantyClaimReportRow As WarrantyClaimReportRow = CType(Me.NewRow,WarrantyClaimReportRow)
            Dim columnValuesArray() As Object = New Object() {DocNo, PONo, SerialNo, ManufacturePartNo, SAPPartNo, POLineNo, Remarks, InvProposalNo, EmpNo, ReasonOfFault, DocType, DocDate, ExpectedReturnDate, CostCenter}
            rowWarrantyClaimReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWarrantyClaimReportRow)
            Return rowWarrantyClaimReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WarrantyClaimReportDataTable = CType(MyBase.Clone,WarrantyClaimReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WarrantyClaimReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocNo = MyBase.Columns("DocNo")
            Me.columnPONo = MyBase.Columns("PONo")
            Me.columnSerialNo = MyBase.Columns("SerialNo")
            Me.columnManufacturePartNo = MyBase.Columns("ManufacturePartNo")
            Me.columnSAPPartNo = MyBase.Columns("SAPPartNo")
            Me.columnPOLineNo = MyBase.Columns("POLineNo")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnInvProposalNo = MyBase.Columns("InvProposalNo")
            Me.columnEmpNo = MyBase.Columns("EmpNo")
            Me.columnReasonOfFault = MyBase.Columns("ReasonOfFault")
            Me.columnDocType = MyBase.Columns("DocType")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnExpectedReturnDate = MyBase.Columns("ExpectedReturnDate")
            Me.columnCostCenter = MyBase.Columns("CostCenter")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocNo = New Global.System.Data.DataColumn("DocNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNo)
            Me.columnPONo = New Global.System.Data.DataColumn("PONo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONo)
            Me.columnSerialNo = New Global.System.Data.DataColumn("SerialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialNo)
            Me.columnManufacturePartNo = New Global.System.Data.DataColumn("ManufacturePartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManufacturePartNo)
            Me.columnSAPPartNo = New Global.System.Data.DataColumn("SAPPartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAPPartNo)
            Me.columnPOLineNo = New Global.System.Data.DataColumn("POLineNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOLineNo)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnInvProposalNo = New Global.System.Data.DataColumn("InvProposalNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvProposalNo)
            Me.columnEmpNo = New Global.System.Data.DataColumn("EmpNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpNo)
            Me.columnReasonOfFault = New Global.System.Data.DataColumn("ReasonOfFault", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReasonOfFault)
            Me.columnDocType = New Global.System.Data.DataColumn("DocType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocType)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnExpectedReturnDate = New Global.System.Data.DataColumn("ExpectedReturnDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpectedReturnDate)
            Me.columnCostCenter = New Global.System.Data.DataColumn("CostCenter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostCenter)
            Me.columnDocNo.MaxLength = 50
            Me.columnPONo.MaxLength = 100
            Me.columnSerialNo.MaxLength = 255
            Me.columnManufacturePartNo.MaxLength = 255
            Me.columnSAPPartNo.MaxLength = 255
            Me.columnPOLineNo.MaxLength = 100
            Me.columnRemarks.MaxLength = 255
            Me.columnInvProposalNo.MaxLength = 100
            Me.columnEmpNo.MaxLength = 100
            Me.columnReasonOfFault.MaxLength = 1073741823
            Me.columnDocType.MaxLength = 50
            Me.columnDocDate.ReadOnly = true
            Me.columnDocDate.MaxLength = 30
            Me.columnExpectedReturnDate.ReadOnly = true
            Me.columnExpectedReturnDate.MaxLength = 30
            Me.columnCostCenter.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWarrantyClaimReportRow() As WarrantyClaimReportRow
            Return CType(Me.NewRow,WarrantyClaimReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WarrantyClaimReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WarrantyClaimReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WarrantyClaimReportRowChangedEvent) Is Nothing) Then
                RaiseEvent WarrantyClaimReportRowChanged(Me, New WarrantyClaimReportRowChangeEvent(CType(e.Row,WarrantyClaimReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WarrantyClaimReportRowChangingEvent) Is Nothing) Then
                RaiseEvent WarrantyClaimReportRowChanging(Me, New WarrantyClaimReportRowChangeEvent(CType(e.Row,WarrantyClaimReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WarrantyClaimReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent WarrantyClaimReportRowDeleted(Me, New WarrantyClaimReportRowChangeEvent(CType(e.Row,WarrantyClaimReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WarrantyClaimReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent WarrantyClaimReportRowDeleting(Me, New WarrantyClaimReportRowChangeEvent(CType(e.Row,WarrantyClaimReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWarrantyClaimReportRow(ByVal row As WarrantyClaimReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SAPReports = New SAPReports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WarrantyClaimReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WarrantyReceiveSameDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocNo As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnPONo As Global.System.Data.DataColumn
        
        Private columnSerialNo As Global.System.Data.DataColumn
        
        Private columnManufacturePartNo As Global.System.Data.DataColumn
        
        Private columnSAPPartNo As Global.System.Data.DataColumn
        
        Private columnInvProposalNo As Global.System.Data.DataColumn
        
        Private columnEmpNo As Global.System.Data.DataColumn
        
        Private columnReasonOfFault As Global.System.Data.DataColumn
        
        Private columnWarrantyClaimDocNo As Global.System.Data.DataColumn
        
        Private columnWarrantyClaimDate As Global.System.Data.DataColumn
        
        Private columnCostCenter As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WarrantyReceiveSame"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManufacturePartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManufacturePartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAPPartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAPPartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvProposalNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvProposalNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReasonOfFaultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReasonOfFault
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WarrantyClaimDocNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWarrantyClaimDocNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WarrantyClaimDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWarrantyClaimDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostCenterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostCenter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WarrantyReceiveSameRow
            Get
                Return CType(Me.Rows(index),WarrantyReceiveSameRow)
            End Get
        End Property
        
        Public Event WarrantyReceiveSameRowChanging As WarrantyReceiveSameRowChangeEventHandler
        
        Public Event WarrantyReceiveSameRowChanged As WarrantyReceiveSameRowChangeEventHandler
        
        Public Event WarrantyReceiveSameRowDeleting As WarrantyReceiveSameRowChangeEventHandler
        
        Public Event WarrantyReceiveSameRowDeleted As WarrantyReceiveSameRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWarrantyReceiveSameRow(ByVal row As WarrantyReceiveSameRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWarrantyReceiveSameRow(ByVal DocNo As String, ByVal DocDate As String, ByVal PONo As String, ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal InvProposalNo As String, ByVal EmpNo As String, ByVal ReasonOfFault As String, ByVal WarrantyClaimDocNo As String, ByVal WarrantyClaimDate As String, ByVal CostCenter As String) As WarrantyReceiveSameRow
            Dim rowWarrantyReceiveSameRow As WarrantyReceiveSameRow = CType(Me.NewRow,WarrantyReceiveSameRow)
            Dim columnValuesArray() As Object = New Object() {DocNo, DocDate, PONo, SerialNo, ManufacturePartNo, SAPPartNo, InvProposalNo, EmpNo, ReasonOfFault, WarrantyClaimDocNo, WarrantyClaimDate, CostCenter}
            rowWarrantyReceiveSameRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWarrantyReceiveSameRow)
            Return rowWarrantyReceiveSameRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WarrantyReceiveSameDataTable = CType(MyBase.Clone,WarrantyReceiveSameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WarrantyReceiveSameDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocNo = MyBase.Columns("DocNo")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnPONo = MyBase.Columns("PONo")
            Me.columnSerialNo = MyBase.Columns("SerialNo")
            Me.columnManufacturePartNo = MyBase.Columns("ManufacturePartNo")
            Me.columnSAPPartNo = MyBase.Columns("SAPPartNo")
            Me.columnInvProposalNo = MyBase.Columns("InvProposalNo")
            Me.columnEmpNo = MyBase.Columns("EmpNo")
            Me.columnReasonOfFault = MyBase.Columns("ReasonOfFault")
            Me.columnWarrantyClaimDocNo = MyBase.Columns("WarrantyClaimDocNo")
            Me.columnWarrantyClaimDate = MyBase.Columns("WarrantyClaimDate")
            Me.columnCostCenter = MyBase.Columns("CostCenter")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocNo = New Global.System.Data.DataColumn("DocNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNo)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnPONo = New Global.System.Data.DataColumn("PONo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONo)
            Me.columnSerialNo = New Global.System.Data.DataColumn("SerialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialNo)
            Me.columnManufacturePartNo = New Global.System.Data.DataColumn("ManufacturePartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManufacturePartNo)
            Me.columnSAPPartNo = New Global.System.Data.DataColumn("SAPPartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAPPartNo)
            Me.columnInvProposalNo = New Global.System.Data.DataColumn("InvProposalNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvProposalNo)
            Me.columnEmpNo = New Global.System.Data.DataColumn("EmpNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpNo)
            Me.columnReasonOfFault = New Global.System.Data.DataColumn("ReasonOfFault", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReasonOfFault)
            Me.columnWarrantyClaimDocNo = New Global.System.Data.DataColumn("WarrantyClaimDocNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWarrantyClaimDocNo)
            Me.columnWarrantyClaimDate = New Global.System.Data.DataColumn("WarrantyClaimDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWarrantyClaimDate)
            Me.columnCostCenter = New Global.System.Data.DataColumn("CostCenter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostCenter)
            Me.columnDocNo.MaxLength = 50
            Me.columnDocDate.ReadOnly = true
            Me.columnDocDate.MaxLength = 30
            Me.columnPONo.MaxLength = 100
            Me.columnSerialNo.MaxLength = 255
            Me.columnManufacturePartNo.MaxLength = 255
            Me.columnSAPPartNo.MaxLength = 255
            Me.columnInvProposalNo.MaxLength = 100
            Me.columnEmpNo.MaxLength = 100
            Me.columnReasonOfFault.MaxLength = 1073741823
            Me.columnWarrantyClaimDocNo.MaxLength = 50
            Me.columnWarrantyClaimDate.ReadOnly = true
            Me.columnWarrantyClaimDate.MaxLength = 30
            Me.columnCostCenter.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWarrantyReceiveSameRow() As WarrantyReceiveSameRow
            Return CType(Me.NewRow,WarrantyReceiveSameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WarrantyReceiveSameRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WarrantyReceiveSameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WarrantyReceiveSameRowChangedEvent) Is Nothing) Then
                RaiseEvent WarrantyReceiveSameRowChanged(Me, New WarrantyReceiveSameRowChangeEvent(CType(e.Row,WarrantyReceiveSameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WarrantyReceiveSameRowChangingEvent) Is Nothing) Then
                RaiseEvent WarrantyReceiveSameRowChanging(Me, New WarrantyReceiveSameRowChangeEvent(CType(e.Row,WarrantyReceiveSameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WarrantyReceiveSameRowDeletedEvent) Is Nothing) Then
                RaiseEvent WarrantyReceiveSameRowDeleted(Me, New WarrantyReceiveSameRowChangeEvent(CType(e.Row,WarrantyReceiveSameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WarrantyReceiveSameRowDeletingEvent) Is Nothing) Then
                RaiseEvent WarrantyReceiveSameRowDeleting(Me, New WarrantyReceiveSameRowChangeEvent(CType(e.Row,WarrantyReceiveSameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWarrantyReceiveSameRow(ByVal row As WarrantyReceiveSameRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SAPReports = New SAPReports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WarrantyReceiveSameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WarrantyReceiveReplaceDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocNo As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnPONo As Global.System.Data.DataColumn
        
        Private columnSerialNo As Global.System.Data.DataColumn
        
        Private columnManufacturePartNo As Global.System.Data.DataColumn
        
        Private columnSAPPartNo As Global.System.Data.DataColumn
        
        Private columnInvProposalNo As Global.System.Data.DataColumn
        
        Private columnEmpNo As Global.System.Data.DataColumn
        
        Private columnReasonOfFault As Global.System.Data.DataColumn
        
        Private columnWarrantyClaimDocNo As Global.System.Data.DataColumn
        
        Private columnOrgSerialNo As Global.System.Data.DataColumn
        
        Private columnOrgManPartNo As Global.System.Data.DataColumn
        
        Private columnWarrantyClaimDate As Global.System.Data.DataColumn
        
        Private columnCostCenter As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WarrantyReceiveReplace"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManufacturePartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManufacturePartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAPPartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAPPartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvProposalNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvProposalNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReasonOfFaultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReasonOfFault
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WarrantyClaimDocNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWarrantyClaimDocNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrgSerialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrgSerialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrgManPartNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrgManPartNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WarrantyClaimDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWarrantyClaimDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostCenterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostCenter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WarrantyReceiveReplaceRow
            Get
                Return CType(Me.Rows(index),WarrantyReceiveReplaceRow)
            End Get
        End Property
        
        Public Event WarrantyReceiveReplaceRowChanging As WarrantyReceiveReplaceRowChangeEventHandler
        
        Public Event WarrantyReceiveReplaceRowChanged As WarrantyReceiveReplaceRowChangeEventHandler
        
        Public Event WarrantyReceiveReplaceRowDeleting As WarrantyReceiveReplaceRowChangeEventHandler
        
        Public Event WarrantyReceiveReplaceRowDeleted As WarrantyReceiveReplaceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWarrantyReceiveReplaceRow(ByVal row As WarrantyReceiveReplaceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWarrantyReceiveReplaceRow(ByVal DocNo As String, ByVal DocDate As String, ByVal PONo As String, ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal InvProposalNo As String, ByVal EmpNo As String, ByVal ReasonOfFault As String, ByVal WarrantyClaimDocNo As String, ByVal OrgSerialNo As String, ByVal OrgManPartNo As String, ByVal WarrantyClaimDate As String, ByVal CostCenter As String) As WarrantyReceiveReplaceRow
            Dim rowWarrantyReceiveReplaceRow As WarrantyReceiveReplaceRow = CType(Me.NewRow,WarrantyReceiveReplaceRow)
            Dim columnValuesArray() As Object = New Object() {DocNo, DocDate, PONo, SerialNo, ManufacturePartNo, SAPPartNo, InvProposalNo, EmpNo, ReasonOfFault, WarrantyClaimDocNo, OrgSerialNo, OrgManPartNo, WarrantyClaimDate, CostCenter}
            rowWarrantyReceiveReplaceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWarrantyReceiveReplaceRow)
            Return rowWarrantyReceiveReplaceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WarrantyReceiveReplaceDataTable = CType(MyBase.Clone,WarrantyReceiveReplaceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WarrantyReceiveReplaceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocNo = MyBase.Columns("DocNo")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnPONo = MyBase.Columns("PONo")
            Me.columnSerialNo = MyBase.Columns("SerialNo")
            Me.columnManufacturePartNo = MyBase.Columns("ManufacturePartNo")
            Me.columnSAPPartNo = MyBase.Columns("SAPPartNo")
            Me.columnInvProposalNo = MyBase.Columns("InvProposalNo")
            Me.columnEmpNo = MyBase.Columns("EmpNo")
            Me.columnReasonOfFault = MyBase.Columns("ReasonOfFault")
            Me.columnWarrantyClaimDocNo = MyBase.Columns("WarrantyClaimDocNo")
            Me.columnOrgSerialNo = MyBase.Columns("OrgSerialNo")
            Me.columnOrgManPartNo = MyBase.Columns("OrgManPartNo")
            Me.columnWarrantyClaimDate = MyBase.Columns("WarrantyClaimDate")
            Me.columnCostCenter = MyBase.Columns("CostCenter")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocNo = New Global.System.Data.DataColumn("DocNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNo)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnPONo = New Global.System.Data.DataColumn("PONo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONo)
            Me.columnSerialNo = New Global.System.Data.DataColumn("SerialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialNo)
            Me.columnManufacturePartNo = New Global.System.Data.DataColumn("ManufacturePartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManufacturePartNo)
            Me.columnSAPPartNo = New Global.System.Data.DataColumn("SAPPartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAPPartNo)
            Me.columnInvProposalNo = New Global.System.Data.DataColumn("InvProposalNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvProposalNo)
            Me.columnEmpNo = New Global.System.Data.DataColumn("EmpNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpNo)
            Me.columnReasonOfFault = New Global.System.Data.DataColumn("ReasonOfFault", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReasonOfFault)
            Me.columnWarrantyClaimDocNo = New Global.System.Data.DataColumn("WarrantyClaimDocNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWarrantyClaimDocNo)
            Me.columnOrgSerialNo = New Global.System.Data.DataColumn("OrgSerialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrgSerialNo)
            Me.columnOrgManPartNo = New Global.System.Data.DataColumn("OrgManPartNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrgManPartNo)
            Me.columnWarrantyClaimDate = New Global.System.Data.DataColumn("WarrantyClaimDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWarrantyClaimDate)
            Me.columnCostCenter = New Global.System.Data.DataColumn("CostCenter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostCenter)
            Me.columnDocNo.MaxLength = 50
            Me.columnDocDate.ReadOnly = true
            Me.columnDocDate.MaxLength = 30
            Me.columnPONo.MaxLength = 100
            Me.columnSerialNo.MaxLength = 255
            Me.columnManufacturePartNo.MaxLength = 255
            Me.columnSAPPartNo.MaxLength = 255
            Me.columnInvProposalNo.MaxLength = 100
            Me.columnEmpNo.MaxLength = 100
            Me.columnReasonOfFault.MaxLength = 1073741823
            Me.columnWarrantyClaimDocNo.MaxLength = 50
            Me.columnOrgSerialNo.MaxLength = 255
            Me.columnOrgManPartNo.MaxLength = 255
            Me.columnWarrantyClaimDate.ReadOnly = true
            Me.columnWarrantyClaimDate.MaxLength = 30
            Me.columnCostCenter.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWarrantyReceiveReplaceRow() As WarrantyReceiveReplaceRow
            Return CType(Me.NewRow,WarrantyReceiveReplaceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WarrantyReceiveReplaceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WarrantyReceiveReplaceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WarrantyReceiveReplaceRowChangedEvent) Is Nothing) Then
                RaiseEvent WarrantyReceiveReplaceRowChanged(Me, New WarrantyReceiveReplaceRowChangeEvent(CType(e.Row,WarrantyReceiveReplaceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WarrantyReceiveReplaceRowChangingEvent) Is Nothing) Then
                RaiseEvent WarrantyReceiveReplaceRowChanging(Me, New WarrantyReceiveReplaceRowChangeEvent(CType(e.Row,WarrantyReceiveReplaceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WarrantyReceiveReplaceRowDeletedEvent) Is Nothing) Then
                RaiseEvent WarrantyReceiveReplaceRowDeleted(Me, New WarrantyReceiveReplaceRowChangeEvent(CType(e.Row,WarrantyReceiveReplaceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WarrantyReceiveReplaceRowDeletingEvent) Is Nothing) Then
                RaiseEvent WarrantyReceiveReplaceRowDeleting(Me, New WarrantyReceiveReplaceRowChangeEvent(CType(e.Row,WarrantyReceiveReplaceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWarrantyReceiveReplaceRow(ByVal row As WarrantyReceiveReplaceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SAPReports = New SAPReports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WarrantyReceiveReplaceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CompanyAssetsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnbarcode As Global.System.Data.DataColumn
        
        Private columnAssetNumber As Global.System.Data.DataColumn
        
        Private columnSubNumber As Global.System.Data.DataColumn
        
        Private columnCompanyCode As Global.System.Data.DataColumn
        
        Private columnCatFullPath As Global.System.Data.DataColumn
        
        Private columnAssetdetailsdesc1 As Global.System.Data.DataColumn
        
        Private columnAssetdetailsdesc2 As Global.System.Data.DataColumn
        
        Private columnInventoryNumber As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        Private columnCreatedBY As Global.System.Data.DataColumn
        
        Private columnSerailNo As Global.System.Data.DataColumn
        
        Private columnCapitalizationDate As Global.System.Data.DataColumn
        
        Private columnBussinessArea As Global.System.Data.DataColumn
        
        Private columnCostNumber As Global.System.Data.DataColumn
        
        Private columnLocationFullPath As Global.System.Data.DataColumn
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnEvaluationGroup1 As Global.System.Data.DataColumn
        
        Private columnEvaluationGroup2 As Global.System.Data.DataColumn
        
        Private columnEvaluationGroup3 As Global.System.Data.DataColumn
        
        Private columnEvaluationGroup4 As Global.System.Data.DataColumn
        
        Private columnSalvageYear As Global.System.Data.DataColumn
        
        Private columnAssetWithValue As Global.System.Data.DataColumn
        
        Private columnInvStatus As Global.System.Data.DataColumn
        
        Private columnHisDate As Global.System.Data.DataColumn
        
        Private columnRetirementDate As Global.System.Data.DataColumn
        
        Private columnStatusDesc As Global.System.Data.DataColumn
        
        Private columnFromPlant As Global.System.Data.DataColumn
        
        Private columnToPlant As Global.System.Data.DataColumn
        
        Private columnFromLocation As Global.System.Data.DataColumn
        
        Private columnToLocation As Global.System.Data.DataColumn
        
        Private columnToFullLocation As Global.System.Data.DataColumn
        
        Private columnOldCust As Global.System.Data.DataColumn
        
        Private columnFromFullLocation As Global.System.Data.DataColumn
        
        Private columnLastEditBY As Global.System.Data.DataColumn
        
        Private columnLastEditDate As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CompanyAssets"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property barcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssetNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCatFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Assetdetailsdesc1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetdetailsdesc1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Assetdetailsdesc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetdetailsdesc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InventoryNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInventoryNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedBYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedBY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerailNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerailNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapitalizationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapitalizationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BussinessAreaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBussinessArea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EvaluationGroup1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvaluationGroup1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EvaluationGroup2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvaluationGroup2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EvaluationGroup3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvaluationGroup3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EvaluationGroup4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvaluationGroup4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalvageYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalvageYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssetWithValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetWithValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HisDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHisDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RetirementDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetirementDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FromPlantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFromPlant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToPlantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnToPlant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FromLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFromLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnToLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToFullLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnToFullLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OldCustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldCust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FromFullLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFromFullLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastEditBYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastEditBY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastEditDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastEditDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CompanyAssetsRow
            Get
                Return CType(Me.Rows(index),CompanyAssetsRow)
            End Get
        End Property
        
        Public Event CompanyAssetsRowChanging As CompanyAssetsRowChangeEventHandler
        
        Public Event CompanyAssetsRowChanged As CompanyAssetsRowChangeEventHandler
        
        Public Event CompanyAssetsRowDeleting As CompanyAssetsRowChangeEventHandler
        
        Public Event CompanyAssetsRowDeleted As CompanyAssetsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCompanyAssetsRow(ByVal row As CompanyAssetsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCompanyAssetsRow( _
                    ByVal barcode As String,  _
                    ByVal AssetNumber As String,  _
                    ByVal SubNumber As String,  _
                    ByVal CompanyCode As String,  _
                    ByVal CatFullPath As String,  _
                    ByVal Assetdetailsdesc1 As String,  _
                    ByVal Assetdetailsdesc2 As String,  _
                    ByVal InventoryNumber As String,  _
                    ByVal CreationDate As Date,  _
                    ByVal CreatedBY As String,  _
                    ByVal SerailNo As String,  _
                    ByVal CapitalizationDate As Date,  _
                    ByVal BussinessArea As String,  _
                    ByVal CostNumber As String,  _
                    ByVal LocationFullPath As String,  _
                    ByVal CustodianID As String,  _
                    ByVal EvaluationGroup1 As String,  _
                    ByVal EvaluationGroup2 As String,  _
                    ByVal EvaluationGroup3 As String,  _
                    ByVal EvaluationGroup4 As String,  _
                    ByVal SalvageYear As Integer,  _
                    ByVal AssetWithValue As Boolean,  _
                    ByVal InvStatus As Integer,  _
                    ByVal HisDate As Date,  _
                    ByVal RetirementDate As Date,  _
                    ByVal StatusDesc As String,  _
                    ByVal FromPlant As String,  _
                    ByVal ToPlant As String,  _
                    ByVal FromLocation As String,  _
                    ByVal ToLocation As String,  _
                    ByVal ToFullLocation As String,  _
                    ByVal OldCust As String,  _
                    ByVal FromFullLocation As String,  _
                    ByVal LastEditBY As String,  _
                    ByVal LastEditDate As Date,  _
                    ByVal Remarks As String) As CompanyAssetsRow
            Dim rowCompanyAssetsRow As CompanyAssetsRow = CType(Me.NewRow,CompanyAssetsRow)
            Dim columnValuesArray() As Object = New Object() {barcode, AssetNumber, SubNumber, CompanyCode, CatFullPath, Assetdetailsdesc1, Assetdetailsdesc2, InventoryNumber, CreationDate, CreatedBY, SerailNo, CapitalizationDate, BussinessArea, CostNumber, LocationFullPath, CustodianID, EvaluationGroup1, EvaluationGroup2, EvaluationGroup3, EvaluationGroup4, SalvageYear, AssetWithValue, InvStatus, HisDate, RetirementDate, StatusDesc, FromPlant, ToPlant, FromLocation, ToLocation, ToFullLocation, OldCust, FromFullLocation, LastEditBY, LastEditDate, Remarks}
            rowCompanyAssetsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCompanyAssetsRow)
            Return rowCompanyAssetsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBybarcode(ByVal barcode As String) As CompanyAssetsRow
            Return CType(Me.Rows.Find(New Object() {barcode}),CompanyAssetsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CompanyAssetsDataTable = CType(MyBase.Clone,CompanyAssetsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CompanyAssetsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnbarcode = MyBase.Columns("barcode")
            Me.columnAssetNumber = MyBase.Columns("AssetNumber")
            Me.columnSubNumber = MyBase.Columns("SubNumber")
            Me.columnCompanyCode = MyBase.Columns("CompanyCode")
            Me.columnCatFullPath = MyBase.Columns("CatFullPath")
            Me.columnAssetdetailsdesc1 = MyBase.Columns("Assetdetailsdesc1")
            Me.columnAssetdetailsdesc2 = MyBase.Columns("Assetdetailsdesc2")
            Me.columnInventoryNumber = MyBase.Columns("InventoryNumber")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
            Me.columnCreatedBY = MyBase.Columns("CreatedBY")
            Me.columnSerailNo = MyBase.Columns("SerailNo")
            Me.columnCapitalizationDate = MyBase.Columns("CapitalizationDate")
            Me.columnBussinessArea = MyBase.Columns("BussinessArea")
            Me.columnCostNumber = MyBase.Columns("CostNumber")
            Me.columnLocationFullPath = MyBase.Columns("LocationFullPath")
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnEvaluationGroup1 = MyBase.Columns("EvaluationGroup1")
            Me.columnEvaluationGroup2 = MyBase.Columns("EvaluationGroup2")
            Me.columnEvaluationGroup3 = MyBase.Columns("EvaluationGroup3")
            Me.columnEvaluationGroup4 = MyBase.Columns("EvaluationGroup4")
            Me.columnSalvageYear = MyBase.Columns("SalvageYear")
            Me.columnAssetWithValue = MyBase.Columns("AssetWithValue")
            Me.columnInvStatus = MyBase.Columns("InvStatus")
            Me.columnHisDate = MyBase.Columns("HisDate")
            Me.columnRetirementDate = MyBase.Columns("RetirementDate")
            Me.columnStatusDesc = MyBase.Columns("StatusDesc")
            Me.columnFromPlant = MyBase.Columns("FromPlant")
            Me.columnToPlant = MyBase.Columns("ToPlant")
            Me.columnFromLocation = MyBase.Columns("FromLocation")
            Me.columnToLocation = MyBase.Columns("ToLocation")
            Me.columnToFullLocation = MyBase.Columns("ToFullLocation")
            Me.columnOldCust = MyBase.Columns("OldCust")
            Me.columnFromFullLocation = MyBase.Columns("FromFullLocation")
            Me.columnLastEditBY = MyBase.Columns("LastEditBY")
            Me.columnLastEditDate = MyBase.Columns("LastEditDate")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnbarcode = New Global.System.Data.DataColumn("barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbarcode)
            Me.columnAssetNumber = New Global.System.Data.DataColumn("AssetNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetNumber)
            Me.columnSubNumber = New Global.System.Data.DataColumn("SubNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubNumber)
            Me.columnCompanyCode = New Global.System.Data.DataColumn("CompanyCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyCode)
            Me.columnCatFullPath = New Global.System.Data.DataColumn("CatFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCatFullPath)
            Me.columnAssetdetailsdesc1 = New Global.System.Data.DataColumn("Assetdetailsdesc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetdetailsdesc1)
            Me.columnAssetdetailsdesc2 = New Global.System.Data.DataColumn("Assetdetailsdesc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetdetailsdesc2)
            Me.columnInventoryNumber = New Global.System.Data.DataColumn("InventoryNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInventoryNumber)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.columnCreatedBY = New Global.System.Data.DataColumn("CreatedBY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedBY)
            Me.columnSerailNo = New Global.System.Data.DataColumn("SerailNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerailNo)
            Me.columnCapitalizationDate = New Global.System.Data.DataColumn("CapitalizationDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapitalizationDate)
            Me.columnBussinessArea = New Global.System.Data.DataColumn("BussinessArea", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBussinessArea)
            Me.columnCostNumber = New Global.System.Data.DataColumn("CostNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostNumber)
            Me.columnLocationFullPath = New Global.System.Data.DataColumn("LocationFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationFullPath)
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnEvaluationGroup1 = New Global.System.Data.DataColumn("EvaluationGroup1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEvaluationGroup1)
            Me.columnEvaluationGroup2 = New Global.System.Data.DataColumn("EvaluationGroup2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEvaluationGroup2)
            Me.columnEvaluationGroup3 = New Global.System.Data.DataColumn("EvaluationGroup3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEvaluationGroup3)
            Me.columnEvaluationGroup4 = New Global.System.Data.DataColumn("EvaluationGroup4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEvaluationGroup4)
            Me.columnSalvageYear = New Global.System.Data.DataColumn("SalvageYear", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalvageYear)
            Me.columnAssetWithValue = New Global.System.Data.DataColumn("AssetWithValue", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetWithValue)
            Me.columnInvStatus = New Global.System.Data.DataColumn("InvStatus", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvStatus)
            Me.columnHisDate = New Global.System.Data.DataColumn("HisDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHisDate)
            Me.columnRetirementDate = New Global.System.Data.DataColumn("RetirementDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetirementDate)
            Me.columnStatusDesc = New Global.System.Data.DataColumn("StatusDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusDesc)
            Me.columnFromPlant = New Global.System.Data.DataColumn("FromPlant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFromPlant)
            Me.columnToPlant = New Global.System.Data.DataColumn("ToPlant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToPlant)
            Me.columnFromLocation = New Global.System.Data.DataColumn("FromLocation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFromLocation)
            Me.columnToLocation = New Global.System.Data.DataColumn("ToLocation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToLocation)
            Me.columnToFullLocation = New Global.System.Data.DataColumn("ToFullLocation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToFullLocation)
            Me.columnOldCust = New Global.System.Data.DataColumn("OldCust", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldCust)
            Me.columnFromFullLocation = New Global.System.Data.DataColumn("FromFullLocation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFromFullLocation)
            Me.columnLastEditBY = New Global.System.Data.DataColumn("LastEditBY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastEditBY)
            Me.columnLastEditDate = New Global.System.Data.DataColumn("LastEditDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastEditDate)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnbarcode}, true))
            Me.columnbarcode.AllowDBNull = false
            Me.columnbarcode.Unique = true
            Me.columnbarcode.MaxLength = 25
            Me.columnAssetNumber.ReadOnly = true
            Me.columnAssetNumber.MaxLength = 50
            Me.columnSubNumber.ReadOnly = true
            Me.columnSubNumber.MaxLength = 50
            Me.columnCompanyCode.MaxLength = 50
            Me.columnCatFullPath.MaxLength = 1073741823
            Me.columnAssetdetailsdesc1.MaxLength = 200
            Me.columnAssetdetailsdesc2.MaxLength = 200
            Me.columnInventoryNumber.MaxLength = 50
            Me.columnCreatedBY.MaxLength = 50
            Me.columnSerailNo.MaxLength = 50
            Me.columnBussinessArea.MaxLength = 50
            Me.columnCostNumber.MaxLength = 50
            Me.columnLocationFullPath.MaxLength = 1073741823
            Me.columnCustodianID.MaxLength = 25
            Me.columnEvaluationGroup1.MaxLength = 50
            Me.columnEvaluationGroup2.MaxLength = 50
            Me.columnEvaluationGroup3.MaxLength = 50
            Me.columnEvaluationGroup4.MaxLength = 50
            Me.columnStatusDesc.MaxLength = 50
            Me.columnToFullLocation.MaxLength = 1073741823
            Me.columnOldCust.ReadOnly = true
            Me.columnOldCust.MaxLength = 25
            Me.columnLastEditBY.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCompanyAssetsRow() As CompanyAssetsRow
            Return CType(Me.NewRow,CompanyAssetsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CompanyAssetsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CompanyAssetsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CompanyAssetsRowChangedEvent) Is Nothing) Then
                RaiseEvent CompanyAssetsRowChanged(Me, New CompanyAssetsRowChangeEvent(CType(e.Row,CompanyAssetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CompanyAssetsRowChangingEvent) Is Nothing) Then
                RaiseEvent CompanyAssetsRowChanging(Me, New CompanyAssetsRowChangeEvent(CType(e.Row,CompanyAssetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CompanyAssetsRowDeletedEvent) Is Nothing) Then
                RaiseEvent CompanyAssetsRowDeleted(Me, New CompanyAssetsRowChangeEvent(CType(e.Row,CompanyAssetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CompanyAssetsRowDeletingEvent) Is Nothing) Then
                RaiseEvent CompanyAssetsRowDeleting(Me, New CompanyAssetsRowChangeEvent(CType(e.Row,CompanyAssetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCompanyAssetsRow(ByVal row As CompanyAssetsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SAPReports = New SAPReports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CompanyAssetsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NonBarCodedTempDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNonBCode As Global.System.Data.DataColumn
        
        Private columnDeviceID As Global.System.Data.DataColumn
        
        Private columnLocID As Global.System.Data.DataColumn
        
        Private columnAstCatID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnAstModel As Global.System.Data.DataColumn
        
        Private columnSerailNo As Global.System.Data.DataColumn
        
        Private columnHisDate As Global.System.Data.DataColumn
        
        Private columnRefNo As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnCatFullPath As Global.System.Data.DataColumn
        
        Private columnPlant As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnCompanyCode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NonBarCodedTemp"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NonBCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNonBCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeviceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeviceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerailNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerailNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HisDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHisDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCatFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NonBarCodedTempRow
            Get
                Return CType(Me.Rows(index),NonBarCodedTempRow)
            End Get
        End Property
        
        Public Event NonBarCodedTempRowChanging As NonBarCodedTempRowChangeEventHandler
        
        Public Event NonBarCodedTempRowChanged As NonBarCodedTempRowChangeEventHandler
        
        Public Event NonBarCodedTempRowDeleting As NonBarCodedTempRowChangeEventHandler
        
        Public Event NonBarCodedTempRowDeleted As NonBarCodedTempRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNonBarCodedTempRow(ByVal row As NonBarCodedTempRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNonBarCodedTempRow(ByVal NonBCode As String, ByVal DeviceID As Integer, ByVal LocID As String, ByVal AstCatID As String, ByVal Description As String, ByVal AstModel As String, ByVal SerailNo As String, ByVal HisDate As Date, ByVal RefNo As String, ByVal Remarks As String, ByVal CatFullPath As String, ByVal Plant As String, ByVal Location As String, ByVal CompanyCode As String) As NonBarCodedTempRow
            Dim rowNonBarCodedTempRow As NonBarCodedTempRow = CType(Me.NewRow,NonBarCodedTempRow)
            Dim columnValuesArray() As Object = New Object() {NonBCode, DeviceID, LocID, AstCatID, Description, AstModel, SerailNo, HisDate, RefNo, Remarks, CatFullPath, Plant, Location, CompanyCode}
            rowNonBarCodedTempRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNonBarCodedTempRow)
            Return rowNonBarCodedTempRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NonBarCodedTempDataTable = CType(MyBase.Clone,NonBarCodedTempDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NonBarCodedTempDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNonBCode = MyBase.Columns("NonBCode")
            Me.columnDeviceID = MyBase.Columns("DeviceID")
            Me.columnLocID = MyBase.Columns("LocID")
            Me.columnAstCatID = MyBase.Columns("AstCatID")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnAstModel = MyBase.Columns("AstModel")
            Me.columnSerailNo = MyBase.Columns("SerailNo")
            Me.columnHisDate = MyBase.Columns("HisDate")
            Me.columnRefNo = MyBase.Columns("RefNo")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnCatFullPath = MyBase.Columns("CatFullPath")
            Me.columnPlant = MyBase.Columns("Plant")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnCompanyCode = MyBase.Columns("CompanyCode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNonBCode = New Global.System.Data.DataColumn("NonBCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNonBCode)
            Me.columnDeviceID = New Global.System.Data.DataColumn("DeviceID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeviceID)
            Me.columnLocID = New Global.System.Data.DataColumn("LocID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocID)
            Me.columnAstCatID = New Global.System.Data.DataColumn("AstCatID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnAstModel = New Global.System.Data.DataColumn("AstModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstModel)
            Me.columnSerailNo = New Global.System.Data.DataColumn("SerailNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerailNo)
            Me.columnHisDate = New Global.System.Data.DataColumn("HisDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHisDate)
            Me.columnRefNo = New Global.System.Data.DataColumn("RefNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefNo)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnCatFullPath = New Global.System.Data.DataColumn("CatFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCatFullPath)
            Me.columnPlant = New Global.System.Data.DataColumn("Plant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlant)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnCompanyCode = New Global.System.Data.DataColumn("CompanyCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyCode)
            Me.columnNonBCode.AllowDBNull = false
            Me.columnNonBCode.MaxLength = 50
            Me.columnDeviceID.AllowDBNull = false
            Me.columnLocID.MaxLength = 255
            Me.columnAstCatID.MaxLength = 15
            Me.columnDescription.MaxLength = 255
            Me.columnAstModel.MaxLength = 100
            Me.columnSerailNo.MaxLength = 100
            Me.columnRefNo.MaxLength = 50
            Me.columnRemarks.MaxLength = 1073741823
            Me.columnCompanyCode.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNonBarCodedTempRow() As NonBarCodedTempRow
            Return CType(Me.NewRow,NonBarCodedTempRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NonBarCodedTempRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NonBarCodedTempRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NonBarCodedTempRowChangedEvent) Is Nothing) Then
                RaiseEvent NonBarCodedTempRowChanged(Me, New NonBarCodedTempRowChangeEvent(CType(e.Row,NonBarCodedTempRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NonBarCodedTempRowChangingEvent) Is Nothing) Then
                RaiseEvent NonBarCodedTempRowChanging(Me, New NonBarCodedTempRowChangeEvent(CType(e.Row,NonBarCodedTempRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NonBarCodedTempRowDeletedEvent) Is Nothing) Then
                RaiseEvent NonBarCodedTempRowDeleted(Me, New NonBarCodedTempRowChangeEvent(CType(e.Row,NonBarCodedTempRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NonBarCodedTempRowDeletingEvent) Is Nothing) Then
                RaiseEvent NonBarCodedTempRowDeleting(Me, New NonBarCodedTempRowChangeEvent(CType(e.Row,NonBarCodedTempRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNonBarCodedTempRow(ByVal row As NonBarCodedTempRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SAPReports = New SAPReports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NonBarCodedTempDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rpt_AssetsLogDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDetailID As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCompanyCode As Global.System.Data.DataColumn
        
        Private columnAssetNumber As Global.System.Data.DataColumn
        
        Private columnSubNumber As Global.System.Data.DataColumn
        
        Private columnField As Global.System.Data.DataColumn
        
        Private columnOldValue As Global.System.Data.DataColumn
        
        Private columnNewValue As Global.System.Data.DataColumn
        
        Private _columnUser_ID__Name As Global.System.Data.DataColumn
        
        Private columnLastModifiedDate As Global.System.Data.DataColumn
        
        Private columnChangeType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rpt_AssetsLog"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DetailIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDetailID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssetNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnField
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OldValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _User_ID__NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnUser_ID__Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastModifiedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastModifiedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChangeTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChangeType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rpt_AssetsLogRow
            Get
                Return CType(Me.Rows(index),rpt_AssetsLogRow)
            End Get
        End Property
        
        Public Event rpt_AssetsLogRowChanging As rpt_AssetsLogRowChangeEventHandler
        
        Public Event rpt_AssetsLogRowChanged As rpt_AssetsLogRowChangeEventHandler
        
        Public Event rpt_AssetsLogRowDeleting As rpt_AssetsLogRowChangeEventHandler
        
        Public Event rpt_AssetsLogRowDeleted As rpt_AssetsLogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addrpt_AssetsLogRow(ByVal row As rpt_AssetsLogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addrpt_AssetsLogRow(ByVal ID As String, ByVal CompanyCode As String, ByVal AssetNumber As String, ByVal SubNumber As String, ByVal Field As String, ByVal OldValue As String, ByVal NewValue As String, ByVal _User_ID__Name As String, ByVal LastModifiedDate As Date, ByVal ChangeType As String) As rpt_AssetsLogRow
            Dim rowrpt_AssetsLogRow As rpt_AssetsLogRow = CType(Me.NewRow,rpt_AssetsLogRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ID, CompanyCode, AssetNumber, SubNumber, Field, OldValue, NewValue, _User_ID__Name, LastModifiedDate, ChangeType}
            rowrpt_AssetsLogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowrpt_AssetsLogRow)
            Return rowrpt_AssetsLogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDetailID(ByVal DetailID As Long) As rpt_AssetsLogRow
            Return CType(Me.Rows.Find(New Object() {DetailID}),rpt_AssetsLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As rpt_AssetsLogDataTable = CType(MyBase.Clone,rpt_AssetsLogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New rpt_AssetsLogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDetailID = MyBase.Columns("DetailID")
            Me.columnID = MyBase.Columns("ID")
            Me.columnCompanyCode = MyBase.Columns("CompanyCode")
            Me.columnAssetNumber = MyBase.Columns("AssetNumber")
            Me.columnSubNumber = MyBase.Columns("SubNumber")
            Me.columnField = MyBase.Columns("Field")
            Me.columnOldValue = MyBase.Columns("OldValue")
            Me.columnNewValue = MyBase.Columns("NewValue")
            Me._columnUser_ID__Name = MyBase.Columns("User ID/ Name")
            Me.columnLastModifiedDate = MyBase.Columns("LastModifiedDate")
            Me.columnChangeType = MyBase.Columns("ChangeType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDetailID = New Global.System.Data.DataColumn("DetailID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDetailID)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCompanyCode = New Global.System.Data.DataColumn("CompanyCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyCode)
            Me.columnAssetNumber = New Global.System.Data.DataColumn("AssetNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetNumber)
            Me.columnSubNumber = New Global.System.Data.DataColumn("SubNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubNumber)
            Me.columnField = New Global.System.Data.DataColumn("Field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnField)
            Me.columnOldValue = New Global.System.Data.DataColumn("OldValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldValue)
            Me.columnNewValue = New Global.System.Data.DataColumn("NewValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewValue)
            Me._columnUser_ID__Name = New Global.System.Data.DataColumn("User ID/ Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnUser_ID__Name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnUser_ID__Name")
            Me._columnUser_ID__Name.ExtendedProperties.Add("Generator_UserColumnName", "User ID/ Name")
            MyBase.Columns.Add(Me._columnUser_ID__Name)
            Me.columnLastModifiedDate = New Global.System.Data.DataColumn("LastModifiedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastModifiedDate)
            Me.columnChangeType = New Global.System.Data.DataColumn("ChangeType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChangeType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDetailID}, true))
            Me.columnDetailID.AutoIncrement = true
            Me.columnDetailID.AutoIncrementSeed = -1
            Me.columnDetailID.AutoIncrementStep = -1
            Me.columnDetailID.AllowDBNull = false
            Me.columnDetailID.ReadOnly = true
            Me.columnDetailID.Unique = true
            Me.columnID.AllowDBNull = false
            Me.columnID.MaxLength = 25
            Me.columnCompanyCode.ReadOnly = true
            Me.columnCompanyCode.MaxLength = 50
            Me.columnAssetNumber.ReadOnly = true
            Me.columnAssetNumber.MaxLength = 50
            Me.columnSubNumber.ReadOnly = true
            Me.columnSubNumber.MaxLength = 50
            Me.columnField.MaxLength = 100
            Me._columnUser_ID__Name.ReadOnly = true
            Me._columnUser_ID__Name.MaxLength = 101
            Me.columnChangeType.ReadOnly = true
            Me.columnChangeType.MaxLength = 6
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newrpt_AssetsLogRow() As rpt_AssetsLogRow
            Return CType(Me.NewRow,rpt_AssetsLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New rpt_AssetsLogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(rpt_AssetsLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rpt_AssetsLogRowChangedEvent) Is Nothing) Then
                RaiseEvent rpt_AssetsLogRowChanged(Me, New rpt_AssetsLogRowChangeEvent(CType(e.Row,rpt_AssetsLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rpt_AssetsLogRowChangingEvent) Is Nothing) Then
                RaiseEvent rpt_AssetsLogRowChanging(Me, New rpt_AssetsLogRowChangeEvent(CType(e.Row,rpt_AssetsLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rpt_AssetsLogRowDeletedEvent) Is Nothing) Then
                RaiseEvent rpt_AssetsLogRowDeleted(Me, New rpt_AssetsLogRowChangeEvent(CType(e.Row,rpt_AssetsLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rpt_AssetsLogRowDeletingEvent) Is Nothing) Then
                RaiseEvent rpt_AssetsLogRowDeleting(Me, New rpt_AssetsLogRowChangeEvent(CType(e.Row,rpt_AssetsLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removerpt_AssetsLogRow(ByVal row As rpt_AssetsLogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SAPReports = New SAPReports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rpt_AssetsLogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GoodsReceivingReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableGoodsReceivingReport As GoodsReceivingReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGoodsReceivingReport = CType(Me.Table,GoodsReceivingReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsReceivingReport.PONoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PONo' in table 'GoodsReceivingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsReceivingReport.PONoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeliveryNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsReceivingReport.DeliveryNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeliveryNo' in table 'GoodsReceivingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsReceivingReport.DeliveryNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PostingDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsReceivingReport.PostingDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PostingDate' in table 'GoodsReceivingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsReceivingReport.PostingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManPartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsReceivingReport.ManPartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManPartNo' in table 'GoodsReceivingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsReceivingReport.ManPartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAPMatCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsReceivingReport.SAPMatCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAPMatCode' in table 'GoodsReceivingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsReceivingReport.SAPMatCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineItemNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGoodsReceivingReport.LineItemNoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineItemNo' in table 'GoodsReceivingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsReceivingReport.LineItemNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeqNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGoodsReceivingReport.SeqNoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeqNo' in table 'GoodsReceivingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsReceivingReport.SeqNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductSerialNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsReceivingReport.ProductSerialNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductSerialNo' in table 'GoodsReceivingReport' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsReceivingReport.ProductSerialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsReceivingReport.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'GoodsReceivingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsReceivingReport.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsReceivingReport.DocNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNo' in table 'GoodsReceivingReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsReceivingReport.DocNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPONoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsReceivingReport.PONoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPONoNull()
            Me(Me.tableGoodsReceivingReport.PONoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeliveryNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsReceivingReport.DeliveryNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeliveryNoNull()
            Me(Me.tableGoodsReceivingReport.DeliveryNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostingDateNull() As Boolean
            Return Me.IsNull(Me.tableGoodsReceivingReport.PostingDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostingDateNull()
            Me(Me.tableGoodsReceivingReport.PostingDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManPartNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsReceivingReport.ManPartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManPartNoNull()
            Me(Me.tableGoodsReceivingReport.ManPartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAPMatCodeNull() As Boolean
            Return Me.IsNull(Me.tableGoodsReceivingReport.SAPMatCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAPMatCodeNull()
            Me(Me.tableGoodsReceivingReport.SAPMatCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineItemNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsReceivingReport.LineItemNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineItemNoNull()
            Me(Me.tableGoodsReceivingReport.LineItemNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeqNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsReceivingReport.SeqNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeqNoNull()
            Me(Me.tableGoodsReceivingReport.SeqNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductSerialNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsReceivingReport.ProductSerialNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductSerialNoNull()
            Me(Me.tableGoodsReceivingReport.ProductSerialNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableGoodsReceivingReport.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableGoodsReceivingReport.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsReceivingReport.DocNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNoNull()
            Me(Me.tableGoodsReceivingReport.DocNoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GoodsIssuanceReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableGoodsIssuanceReport As GoodsIssuanceReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGoodsIssuanceReport = CType(Me.Table,GoodsIssuanceReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MovementType() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.MovementTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MovementType' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.MovementTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvProposalNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.InvProposalNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvProposalNo' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.InvProposalNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.PRNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRNo' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.PRNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IssueDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.IssueDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IssueDate' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.IssueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmpNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.EmpNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmpNo' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.EmpNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssetNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.AssetNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssetNo' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.AssetNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAPMatCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.SAPMatCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAPMatCode' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.SAPMatCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManPartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.ManPartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManPartNo' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.ManPartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerialNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.SerialNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerialNo' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.SerialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostCenter() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.CostCenterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostCenter' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.CostCenterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BusinessArea() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.BusinessAreaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BusinessArea' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.BusinessAreaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLAC() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.GLACColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLAC' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.GLACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmpName() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.EmpNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmpName' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.EmpNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineItemNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.LineItemNoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineItemNo' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.LineItemNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.DocNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNo' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.DocNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableGoodsIssuanceReport.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'GoodsIssuanceReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGoodsIssuanceReport.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableGoodsIssuanceReport.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMovementTypeNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.MovementTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMovementTypeNull()
            Me(Me.tableGoodsIssuanceReport.MovementTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvProposalNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.InvProposalNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvProposalNoNull()
            Me(Me.tableGoodsIssuanceReport.InvProposalNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.PRNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRNoNull()
            Me(Me.tableGoodsIssuanceReport.PRNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIssueDateNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.IssueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIssueDateNull()
            Me(Me.tableGoodsIssuanceReport.IssueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.EmpNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpNoNull()
            Me(Me.tableGoodsIssuanceReport.EmpNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.AssetNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetNoNull()
            Me(Me.tableGoodsIssuanceReport.AssetNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAPMatCodeNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.SAPMatCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAPMatCodeNull()
            Me(Me.tableGoodsIssuanceReport.SAPMatCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManPartNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.ManPartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManPartNoNull()
            Me(Me.tableGoodsIssuanceReport.ManPartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerialNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.SerialNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerialNoNull()
            Me(Me.tableGoodsIssuanceReport.SerialNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostCenterNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.CostCenterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostCenterNull()
            Me(Me.tableGoodsIssuanceReport.CostCenterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBusinessAreaNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.BusinessAreaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBusinessAreaNull()
            Me(Me.tableGoodsIssuanceReport.BusinessAreaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLACNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.GLACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLACNull()
            Me(Me.tableGoodsIssuanceReport.GLACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpNameNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.EmpNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpNameNull()
            Me(Me.tableGoodsIssuanceReport.EmpNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineItemNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.LineItemNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineItemNoNull()
            Me(Me.tableGoodsIssuanceReport.LineItemNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNoNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.DocNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNoNull()
            Me(Me.tableGoodsIssuanceReport.DocNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableGoodsIssuanceReport.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableGoodsIssuanceReport.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ReversalReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableReversalReport As ReversalReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReversalReport = CType(Me.Table,ReversalReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReversalDocNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.ReversalDocNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReversalDocNo' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.ReversalDocNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAPPartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.SAPPartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAPPartNo' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.SAPPartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerialNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.SerialNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerialNo' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.SerialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManufacturePartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.ManufacturePartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManufacturePartNo' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.ManufacturePartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAPMaterialDocNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.SAPMaterialDocNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAPMaterialDocNo' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.SAPMaterialDocNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAPMaterialDocLineNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.SAPMaterialDocLineNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAPMaterialDocLineNo' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.SAPMaterialDocLineNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PORequisitionNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.PORequisitionNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PORequisitionNo' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.PORequisitionNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvProposalNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.InvProposalNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvProposalNo' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.InvProposalNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.DocDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GRGIDocNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.GRGIDocNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GRGIDocNo' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.GRGIDocNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plant() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.PlantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plant' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.PlantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.LocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Location' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReasonOfMovement() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.ReasonOfMovementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReasonOfMovement' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.ReasonOfMovementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.PONoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PONo' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.PONoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineItemNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.LineItemNoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LineItemNo' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.LineItemNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLAC() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.GLACColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLAC' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.GLACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostCenter() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.CostCenterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostCenter' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.CostCenterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BusinessArea() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.BusinessAreaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BusinessArea' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.BusinessAreaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssetNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReversalReport.AssetNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssetNo' in table 'ReversalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReversalReport.AssetNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableReversalReport.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReversalDocNoNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.ReversalDocNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReversalDocNoNull()
            Me(Me.tableReversalReport.ReversalDocNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAPPartNoNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.SAPPartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAPPartNoNull()
            Me(Me.tableReversalReport.SAPPartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerialNoNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.SerialNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerialNoNull()
            Me(Me.tableReversalReport.SerialNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManufacturePartNoNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.ManufacturePartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManufacturePartNoNull()
            Me(Me.tableReversalReport.ManufacturePartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAPMaterialDocNoNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.SAPMaterialDocNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAPMaterialDocNoNull()
            Me(Me.tableReversalReport.SAPMaterialDocNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAPMaterialDocLineNoNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.SAPMaterialDocLineNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAPMaterialDocLineNoNull()
            Me(Me.tableReversalReport.SAPMaterialDocLineNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPORequisitionNoNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.PORequisitionNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPORequisitionNoNull()
            Me(Me.tableReversalReport.PORequisitionNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvProposalNoNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.InvProposalNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvProposalNoNull()
            Me(Me.tableReversalReport.InvProposalNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableReversalReport.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGRGIDocNoNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.GRGIDocNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGRGIDocNoNull()
            Me(Me.tableReversalReport.GRGIDocNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlantNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.PlantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlantNull()
            Me(Me.tableReversalReport.PlantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.LocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationNull()
            Me(Me.tableReversalReport.LocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReasonOfMovementNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.ReasonOfMovementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReasonOfMovementNull()
            Me(Me.tableReversalReport.ReasonOfMovementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPONoNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.PONoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPONoNull()
            Me(Me.tableReversalReport.PONoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineItemNoNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.LineItemNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineItemNoNull()
            Me(Me.tableReversalReport.LineItemNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLACNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.GLACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLACNull()
            Me(Me.tableReversalReport.GLACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostCenterNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.CostCenterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostCenterNull()
            Me(Me.tableReversalReport.CostCenterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBusinessAreaNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.BusinessAreaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBusinessAreaNull()
            Me(Me.tableReversalReport.BusinessAreaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetNoNull() As Boolean
            Return Me.IsNull(Me.tableReversalReport.AssetNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetNoNull()
            Me(Me.tableReversalReport.AssetNoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VendorReturnReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableVendorReturnReport As VendorReturnReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVendorReturnReport = CType(Me.Table,VendorReturnReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorReturnReport.DocNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNo' in table 'VendorReturnReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorReturnReport.DocNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorReturnReport.PONoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PONo' in table 'VendorReturnReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorReturnReport.PONoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerialNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorReturnReport.SerialNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerialNo' in table 'VendorReturnReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorReturnReport.SerialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManufacturePartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorReturnReport.ManufacturePartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManufacturePartNo' in table 'VendorReturnReport' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorReturnReport.ManufacturePartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAPPartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorReturnReport.SAPPartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAPPartNo' in table 'VendorReturnReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorReturnReport.SAPPartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POLineNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorReturnReport.POLineNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POLineNo' in table 'VendorReturnReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorReturnReport.POLineNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorReturnReport.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'VendorReturnReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorReturnReport.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorReturnReport.DocDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'VendorReturnReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorReturnReport.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plant() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorReturnReport.PlantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plant' in table 'VendorReturnReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorReturnReport.PlantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorReturnReport.LocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Location' in table 'VendorReturnReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorReturnReport.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNoNull() As Boolean
            Return Me.IsNull(Me.tableVendorReturnReport.DocNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNoNull()
            Me(Me.tableVendorReturnReport.DocNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPONoNull() As Boolean
            Return Me.IsNull(Me.tableVendorReturnReport.PONoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPONoNull()
            Me(Me.tableVendorReturnReport.PONoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerialNoNull() As Boolean
            Return Me.IsNull(Me.tableVendorReturnReport.SerialNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerialNoNull()
            Me(Me.tableVendorReturnReport.SerialNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManufacturePartNoNull() As Boolean
            Return Me.IsNull(Me.tableVendorReturnReport.ManufacturePartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManufacturePartNoNull()
            Me(Me.tableVendorReturnReport.ManufacturePartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAPPartNoNull() As Boolean
            Return Me.IsNull(Me.tableVendorReturnReport.SAPPartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAPPartNoNull()
            Me(Me.tableVendorReturnReport.SAPPartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOLineNoNull() As Boolean
            Return Me.IsNull(Me.tableVendorReturnReport.POLineNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOLineNoNull()
            Me(Me.tableVendorReturnReport.POLineNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableVendorReturnReport.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableVendorReturnReport.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableVendorReturnReport.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableVendorReturnReport.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlantNull() As Boolean
            Return Me.IsNull(Me.tableVendorReturnReport.PlantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlantNull()
            Me(Me.tableVendorReturnReport.PlantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationNull() As Boolean
            Return Me.IsNull(Me.tableVendorReturnReport.LocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationNull()
            Me(Me.tableVendorReturnReport.LocationColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WarrantyClaimReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableWarrantyClaimReport As WarrantyClaimReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWarrantyClaimReport = CType(Me.Table,WarrantyClaimReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.DocNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNo' in table 'WarrantyClaimReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.DocNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.PONoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PONo' in table 'WarrantyClaimReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.PONoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerialNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.SerialNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerialNo' in table 'WarrantyClaimReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.SerialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManufacturePartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.ManufacturePartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManufacturePartNo' in table 'WarrantyClaimReport' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.ManufacturePartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAPPartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.SAPPartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAPPartNo' in table 'WarrantyClaimReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.SAPPartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POLineNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.POLineNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POLineNo' in table 'WarrantyClaimReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.POLineNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'WarrantyClaimReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvProposalNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.InvProposalNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvProposalNo' in table 'WarrantyClaimReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.InvProposalNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmpNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.EmpNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmpNo' in table 'WarrantyClaimReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.EmpNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReasonOfFault() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.ReasonOfFaultColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReasonOfFault' in table 'WarrantyClaimReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.ReasonOfFaultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocType() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.DocTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocType' in table 'WarrantyClaimReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.DocTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.DocDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'WarrantyClaimReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExpectedReturnDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.ExpectedReturnDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExpectedReturnDate' in table 'WarrantyClaimReport' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.ExpectedReturnDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostCenter() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyClaimReport.CostCenterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostCenter' in table 'WarrantyClaimReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyClaimReport.CostCenterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.DocNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNoNull()
            Me(Me.tableWarrantyClaimReport.DocNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPONoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.PONoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPONoNull()
            Me(Me.tableWarrantyClaimReport.PONoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerialNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.SerialNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerialNoNull()
            Me(Me.tableWarrantyClaimReport.SerialNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManufacturePartNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.ManufacturePartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManufacturePartNoNull()
            Me(Me.tableWarrantyClaimReport.ManufacturePartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAPPartNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.SAPPartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAPPartNoNull()
            Me(Me.tableWarrantyClaimReport.SAPPartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOLineNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.POLineNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOLineNoNull()
            Me(Me.tableWarrantyClaimReport.POLineNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableWarrantyClaimReport.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvProposalNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.InvProposalNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvProposalNoNull()
            Me(Me.tableWarrantyClaimReport.InvProposalNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.EmpNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpNoNull()
            Me(Me.tableWarrantyClaimReport.EmpNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReasonOfFaultNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.ReasonOfFaultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReasonOfFaultNull()
            Me(Me.tableWarrantyClaimReport.ReasonOfFaultColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocTypeNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.DocTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocTypeNull()
            Me(Me.tableWarrantyClaimReport.DocTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableWarrantyClaimReport.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpectedReturnDateNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.ExpectedReturnDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpectedReturnDateNull()
            Me(Me.tableWarrantyClaimReport.ExpectedReturnDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostCenterNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyClaimReport.CostCenterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostCenterNull()
            Me(Me.tableWarrantyClaimReport.CostCenterColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WarrantyReceiveSameRow
        Inherits Global.System.Data.DataRow
        
        Private tableWarrantyReceiveSame As WarrantyReceiveSameDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWarrantyReceiveSame = CType(Me.Table,WarrantyReceiveSameDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveSame.DocNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNo' in table 'WarrantyReceiveSame' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveSame.DocNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveSame.DocDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'WarrantyReceiveSame' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveSame.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveSame.PONoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PONo' in table 'WarrantyReceiveSame' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveSame.PONoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerialNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveSame.SerialNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerialNo' in table 'WarrantyReceiveSame' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveSame.SerialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManufacturePartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveSame.ManufacturePartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManufacturePartNo' in table 'WarrantyReceiveSame' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveSame.ManufacturePartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAPPartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveSame.SAPPartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAPPartNo' in table 'WarrantyReceiveSame' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveSame.SAPPartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvProposalNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveSame.InvProposalNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvProposalNo' in table 'WarrantyReceiveSame' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveSame.InvProposalNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmpNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveSame.EmpNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmpNo' in table 'WarrantyReceiveSame' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveSame.EmpNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReasonOfFault() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveSame.ReasonOfFaultColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReasonOfFault' in table 'WarrantyReceiveSame' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveSame.ReasonOfFaultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WarrantyClaimDocNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveSame.WarrantyClaimDocNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WarrantyClaimDocNo' in table 'WarrantyReceiveSame' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveSame.WarrantyClaimDocNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WarrantyClaimDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveSame.WarrantyClaimDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WarrantyClaimDate' in table 'WarrantyReceiveSame' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveSame.WarrantyClaimDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostCenter() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveSame.CostCenterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostCenter' in table 'WarrantyReceiveSame' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveSame.CostCenterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveSame.DocNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNoNull()
            Me(Me.tableWarrantyReceiveSame.DocNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveSame.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableWarrantyReceiveSame.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPONoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveSame.PONoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPONoNull()
            Me(Me.tableWarrantyReceiveSame.PONoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerialNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveSame.SerialNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerialNoNull()
            Me(Me.tableWarrantyReceiveSame.SerialNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManufacturePartNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveSame.ManufacturePartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManufacturePartNoNull()
            Me(Me.tableWarrantyReceiveSame.ManufacturePartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAPPartNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveSame.SAPPartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAPPartNoNull()
            Me(Me.tableWarrantyReceiveSame.SAPPartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvProposalNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveSame.InvProposalNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvProposalNoNull()
            Me(Me.tableWarrantyReceiveSame.InvProposalNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveSame.EmpNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpNoNull()
            Me(Me.tableWarrantyReceiveSame.EmpNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReasonOfFaultNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveSame.ReasonOfFaultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReasonOfFaultNull()
            Me(Me.tableWarrantyReceiveSame.ReasonOfFaultColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWarrantyClaimDocNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveSame.WarrantyClaimDocNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWarrantyClaimDocNoNull()
            Me(Me.tableWarrantyReceiveSame.WarrantyClaimDocNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWarrantyClaimDateNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveSame.WarrantyClaimDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWarrantyClaimDateNull()
            Me(Me.tableWarrantyReceiveSame.WarrantyClaimDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostCenterNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveSame.CostCenterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostCenterNull()
            Me(Me.tableWarrantyReceiveSame.CostCenterColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WarrantyReceiveReplaceRow
        Inherits Global.System.Data.DataRow
        
        Private tableWarrantyReceiveReplace As WarrantyReceiveReplaceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWarrantyReceiveReplace = CType(Me.Table,WarrantyReceiveReplaceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.DocNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocNo' in table 'WarrantyReceiveReplace' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.DocNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.DocDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocDate' in table 'WarrantyReceiveReplace' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.PONoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PONo' in table 'WarrantyReceiveReplace' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.PONoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerialNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.SerialNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerialNo' in table 'WarrantyReceiveReplace' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.SerialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManufacturePartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.ManufacturePartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManufacturePartNo' in table 'WarrantyReceiveReplace' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.ManufacturePartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAPPartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.SAPPartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAPPartNo' in table 'WarrantyReceiveReplace' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.SAPPartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvProposalNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.InvProposalNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvProposalNo' in table 'WarrantyReceiveReplace' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.InvProposalNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmpNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.EmpNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmpNo' in table 'WarrantyReceiveReplace' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.EmpNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReasonOfFault() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.ReasonOfFaultColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReasonOfFault' in table 'WarrantyReceiveReplace' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.ReasonOfFaultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WarrantyClaimDocNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.WarrantyClaimDocNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WarrantyClaimDocNo' in table 'WarrantyReceiveReplace' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.WarrantyClaimDocNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrgSerialNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.OrgSerialNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrgSerialNo' in table 'WarrantyReceiveReplace' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.OrgSerialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrgManPartNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.OrgManPartNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrgManPartNo' in table 'WarrantyReceiveReplace' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.OrgManPartNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WarrantyClaimDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.WarrantyClaimDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WarrantyClaimDate' in table 'WarrantyReceiveReplace' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.WarrantyClaimDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostCenter() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarrantyReceiveReplace.CostCenterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostCenter' in table 'WarrantyReceiveReplace' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarrantyReceiveReplace.CostCenterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.DocNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocNoNull()
            Me(Me.tableWarrantyReceiveReplace.DocNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableWarrantyReceiveReplace.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPONoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.PONoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPONoNull()
            Me(Me.tableWarrantyReceiveReplace.PONoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerialNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.SerialNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerialNoNull()
            Me(Me.tableWarrantyReceiveReplace.SerialNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManufacturePartNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.ManufacturePartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManufacturePartNoNull()
            Me(Me.tableWarrantyReceiveReplace.ManufacturePartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAPPartNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.SAPPartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAPPartNoNull()
            Me(Me.tableWarrantyReceiveReplace.SAPPartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvProposalNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.InvProposalNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvProposalNoNull()
            Me(Me.tableWarrantyReceiveReplace.InvProposalNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.EmpNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpNoNull()
            Me(Me.tableWarrantyReceiveReplace.EmpNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReasonOfFaultNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.ReasonOfFaultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReasonOfFaultNull()
            Me(Me.tableWarrantyReceiveReplace.ReasonOfFaultColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWarrantyClaimDocNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.WarrantyClaimDocNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWarrantyClaimDocNoNull()
            Me(Me.tableWarrantyReceiveReplace.WarrantyClaimDocNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrgSerialNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.OrgSerialNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrgSerialNoNull()
            Me(Me.tableWarrantyReceiveReplace.OrgSerialNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrgManPartNoNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.OrgManPartNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrgManPartNoNull()
            Me(Me.tableWarrantyReceiveReplace.OrgManPartNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWarrantyClaimDateNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.WarrantyClaimDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWarrantyClaimDateNull()
            Me(Me.tableWarrantyReceiveReplace.WarrantyClaimDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostCenterNull() As Boolean
            Return Me.IsNull(Me.tableWarrantyReceiveReplace.CostCenterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostCenterNull()
            Me(Me.tableWarrantyReceiveReplace.CostCenterColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CompanyAssetsRow
        Inherits Global.System.Data.DataRow
        
        Private tableCompanyAssets As CompanyAssetsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCompanyAssets = CType(Me.Table,CompanyAssetsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property barcode() As String
            Get
                Return CType(Me(Me.tableCompanyAssets.barcodeColumn),String)
            End Get
            Set
                Me(Me.tableCompanyAssets.barcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssetNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.AssetNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssetNumber' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.AssetNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.SubNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubNumber' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.SubNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CompanyCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyCode' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CompanyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CatFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CatFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CatFullPath' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CatFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Assetdetailsdesc1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.Assetdetailsdesc1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Assetdetailsdesc1' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.Assetdetailsdesc1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Assetdetailsdesc2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.Assetdetailsdesc2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Assetdetailsdesc2' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.Assetdetailsdesc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InventoryNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.InventoryNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InventoryNumber' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.InventoryNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CreationDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedBY() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CreatedBYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBY' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CreatedBYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerailNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.SerailNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerailNo' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.SerailNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CapitalizationDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CapitalizationDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CapitalizationDate' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CapitalizationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BussinessArea() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.BussinessAreaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BussinessArea' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.BussinessAreaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CostNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostNumber' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CostNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.LocationFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationFullPath' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.LocationFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CustodianIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianID' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EvaluationGroup1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.EvaluationGroup1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EvaluationGroup1' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.EvaluationGroup1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EvaluationGroup2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.EvaluationGroup2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EvaluationGroup2' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.EvaluationGroup2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EvaluationGroup3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.EvaluationGroup3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EvaluationGroup3' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.EvaluationGroup3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EvaluationGroup4() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.EvaluationGroup4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EvaluationGroup4' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.EvaluationGroup4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalvageYear() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.SalvageYearColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SalvageYear' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.SalvageYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssetWithValue() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.AssetWithValueColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssetWithValue' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.AssetWithValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvStatus() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.InvStatusColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvStatus' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.InvStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HisDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.HisDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HisDate' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.HisDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RetirementDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.RetirementDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RetirementDate' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.RetirementDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.StatusDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatusDesc' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.StatusDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FromPlant() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.FromPlantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FromPlant' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.FromPlantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ToPlant() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.ToPlantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ToPlant' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.ToPlantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FromLocation() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.FromLocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FromLocation' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.FromLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ToLocation() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.ToLocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ToLocation' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.ToLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ToFullLocation() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.ToFullLocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ToFullLocation' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.ToFullLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OldCust() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.OldCustColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldCust' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.OldCustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FromFullLocation() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.FromFullLocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FromFullLocation' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.FromFullLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastEditBY() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.LastEditBYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastEditBY' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.LastEditBYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastEditDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.LastEditDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastEditDate' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.LastEditDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetNumberNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.AssetNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetNumberNull()
            Me(Me.tableCompanyAssets.AssetNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubNumberNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.SubNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubNumberNull()
            Me(Me.tableCompanyAssets.SubNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyCodeNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CompanyCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyCodeNull()
            Me(Me.tableCompanyAssets.CompanyCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatFullPathNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CatFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatFullPathNull()
            Me(Me.tableCompanyAssets.CatFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetdetailsdesc1Null() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.Assetdetailsdesc1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetdetailsdesc1Null()
            Me(Me.tableCompanyAssets.Assetdetailsdesc1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetdetailsdesc2Null() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.Assetdetailsdesc2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetdetailsdesc2Null()
            Me(Me.tableCompanyAssets.Assetdetailsdesc2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInventoryNumberNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.InventoryNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInventoryNumberNull()
            Me(Me.tableCompanyAssets.InventoryNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tableCompanyAssets.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedBYNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CreatedBYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedBYNull()
            Me(Me.tableCompanyAssets.CreatedBYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerailNoNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.SerailNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerailNoNull()
            Me(Me.tableCompanyAssets.SerailNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCapitalizationDateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CapitalizationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCapitalizationDateNull()
            Me(Me.tableCompanyAssets.CapitalizationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBussinessAreaNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.BussinessAreaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBussinessAreaNull()
            Me(Me.tableCompanyAssets.BussinessAreaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostNumberNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CostNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostNumberNull()
            Me(Me.tableCompanyAssets.CostNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationFullPathNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.LocationFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationFullPathNull()
            Me(Me.tableCompanyAssets.LocationFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianIDNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CustodianIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianIDNull()
            Me(Me.tableCompanyAssets.CustodianIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEvaluationGroup1Null() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.EvaluationGroup1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEvaluationGroup1Null()
            Me(Me.tableCompanyAssets.EvaluationGroup1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEvaluationGroup2Null() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.EvaluationGroup2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEvaluationGroup2Null()
            Me(Me.tableCompanyAssets.EvaluationGroup2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEvaluationGroup3Null() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.EvaluationGroup3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEvaluationGroup3Null()
            Me(Me.tableCompanyAssets.EvaluationGroup3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEvaluationGroup4Null() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.EvaluationGroup4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEvaluationGroup4Null()
            Me(Me.tableCompanyAssets.EvaluationGroup4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalvageYearNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.SalvageYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalvageYearNull()
            Me(Me.tableCompanyAssets.SalvageYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetWithValueNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.AssetWithValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetWithValueNull()
            Me(Me.tableCompanyAssets.AssetWithValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvStatusNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.InvStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvStatusNull()
            Me(Me.tableCompanyAssets.InvStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHisDateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.HisDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHisDateNull()
            Me(Me.tableCompanyAssets.HisDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRetirementDateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.RetirementDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRetirementDateNull()
            Me(Me.tableCompanyAssets.RetirementDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusDescNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.StatusDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusDescNull()
            Me(Me.tableCompanyAssets.StatusDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFromPlantNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.FromPlantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFromPlantNull()
            Me(Me.tableCompanyAssets.FromPlantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsToPlantNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.ToPlantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetToPlantNull()
            Me(Me.tableCompanyAssets.ToPlantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFromLocationNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.FromLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFromLocationNull()
            Me(Me.tableCompanyAssets.FromLocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsToLocationNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.ToLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetToLocationNull()
            Me(Me.tableCompanyAssets.ToLocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsToFullLocationNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.ToFullLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetToFullLocationNull()
            Me(Me.tableCompanyAssets.ToFullLocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOldCustNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.OldCustColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOldCustNull()
            Me(Me.tableCompanyAssets.OldCustColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFromFullLocationNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.FromFullLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFromFullLocationNull()
            Me(Me.tableCompanyAssets.FromFullLocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastEditBYNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.LastEditBYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastEditBYNull()
            Me(Me.tableCompanyAssets.LastEditBYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastEditDateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.LastEditDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastEditDateNull()
            Me(Me.tableCompanyAssets.LastEditDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableCompanyAssets.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NonBarCodedTempRow
        Inherits Global.System.Data.DataRow
        
        Private tableNonBarCodedTemp As NonBarCodedTempDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNonBarCodedTemp = CType(Me.Table,NonBarCodedTempDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NonBCode() As String
            Get
                Return CType(Me(Me.tableNonBarCodedTemp.NonBCodeColumn),String)
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.NonBCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeviceID() As Integer
            Get
                Return CType(Me(Me.tableNonBarCodedTemp.DeviceIDColumn),Integer)
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.DeviceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocID() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonBarCodedTemp.LocIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocID' in table 'NonBarCodedTemp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.LocIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatID() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonBarCodedTemp.AstCatIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatID' in table 'NonBarCodedTemp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.AstCatIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonBarCodedTemp.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'NonBarCodedTemp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstModel() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonBarCodedTemp.AstModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstModel' in table 'NonBarCodedTemp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.AstModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerailNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonBarCodedTemp.SerailNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerailNo' in table 'NonBarCodedTemp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.SerailNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HisDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNonBarCodedTemp.HisDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HisDate' in table 'NonBarCodedTemp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.HisDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonBarCodedTemp.RefNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefNo' in table 'NonBarCodedTemp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.RefNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonBarCodedTemp.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'NonBarCodedTemp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CatFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonBarCodedTemp.CatFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CatFullPath' in table 'NonBarCodedTemp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.CatFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plant() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonBarCodedTemp.PlantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plant' in table 'NonBarCodedTemp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.PlantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonBarCodedTemp.LocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Location' in table 'NonBarCodedTemp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonBarCodedTemp.CompanyCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyCode' in table 'NonBarCodedTemp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonBarCodedTemp.CompanyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocIDNull() As Boolean
            Return Me.IsNull(Me.tableNonBarCodedTemp.LocIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocIDNull()
            Me(Me.tableNonBarCodedTemp.LocIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatIDNull() As Boolean
            Return Me.IsNull(Me.tableNonBarCodedTemp.AstCatIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatIDNull()
            Me(Me.tableNonBarCodedTemp.AstCatIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableNonBarCodedTemp.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableNonBarCodedTemp.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstModelNull() As Boolean
            Return Me.IsNull(Me.tableNonBarCodedTemp.AstModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstModelNull()
            Me(Me.tableNonBarCodedTemp.AstModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerailNoNull() As Boolean
            Return Me.IsNull(Me.tableNonBarCodedTemp.SerailNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerailNoNull()
            Me(Me.tableNonBarCodedTemp.SerailNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHisDateNull() As Boolean
            Return Me.IsNull(Me.tableNonBarCodedTemp.HisDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHisDateNull()
            Me(Me.tableNonBarCodedTemp.HisDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefNoNull() As Boolean
            Return Me.IsNull(Me.tableNonBarCodedTemp.RefNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefNoNull()
            Me(Me.tableNonBarCodedTemp.RefNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableNonBarCodedTemp.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableNonBarCodedTemp.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatFullPathNull() As Boolean
            Return Me.IsNull(Me.tableNonBarCodedTemp.CatFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatFullPathNull()
            Me(Me.tableNonBarCodedTemp.CatFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlantNull() As Boolean
            Return Me.IsNull(Me.tableNonBarCodedTemp.PlantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlantNull()
            Me(Me.tableNonBarCodedTemp.PlantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationNull() As Boolean
            Return Me.IsNull(Me.tableNonBarCodedTemp.LocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationNull()
            Me(Me.tableNonBarCodedTemp.LocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyCodeNull() As Boolean
            Return Me.IsNull(Me.tableNonBarCodedTemp.CompanyCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyCodeNull()
            Me(Me.tableNonBarCodedTemp.CompanyCodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rpt_AssetsLogRow
        Inherits Global.System.Data.DataRow
        
        Private tablerpt_AssetsLog As rpt_AssetsLogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerpt_AssetsLog = CType(Me.Table,rpt_AssetsLogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DetailID() As Long
            Get
                Return CType(Me(Me.tablerpt_AssetsLog.DetailIDColumn),Long)
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.DetailIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tablerpt_AssetsLog.IDColumn),String)
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.CompanyCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyCode' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.CompanyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssetNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.AssetNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssetNumber' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.AssetNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.SubNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubNumber' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.SubNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Field() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.FieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Field' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.FieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OldValue() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.OldValueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldValue' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.OldValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewValue() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.NewValueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NewValue' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.NewValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _User_ID__Name() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog._User_ID__NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'User ID/ Name' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog._User_ID__NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastModifiedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.LastModifiedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastModifiedDate' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.LastModifiedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChangeType() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.ChangeTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChangeType' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.ChangeTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyCodeNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.CompanyCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyCodeNull()
            Me(Me.tablerpt_AssetsLog.CompanyCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetNumberNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.AssetNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetNumberNull()
            Me(Me.tablerpt_AssetsLog.AssetNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubNumberNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.SubNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubNumberNull()
            Me(Me.tablerpt_AssetsLog.SubNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFieldNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.FieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFieldNull()
            Me(Me.tablerpt_AssetsLog.FieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOldValueNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.OldValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOldValueNull()
            Me(Me.tablerpt_AssetsLog.OldValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNewValueNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.NewValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNewValueNull()
            Me(Me.tablerpt_AssetsLog.NewValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_User_ID__NameNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog._User_ID__NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_User_ID__NameNull()
            Me(Me.tablerpt_AssetsLog._User_ID__NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastModifiedDateNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.LastModifiedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastModifiedDateNull()
            Me(Me.tablerpt_AssetsLog.LastModifiedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChangeTypeNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.ChangeTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChangeTypeNull()
            Me(Me.tablerpt_AssetsLog.ChangeTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GoodsReceivingReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GoodsReceivingReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GoodsReceivingReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GoodsReceivingReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GoodsIssuanceReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GoodsIssuanceReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GoodsIssuanceReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GoodsIssuanceReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ReversalReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ReversalReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ReversalReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ReversalReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VendorReturnReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VendorReturnReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VendorReturnReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VendorReturnReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WarrantyClaimReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WarrantyClaimReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WarrantyClaimReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WarrantyClaimReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WarrantyReceiveSameRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WarrantyReceiveSameRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WarrantyReceiveSameRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WarrantyReceiveSameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WarrantyReceiveReplaceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WarrantyReceiveReplaceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WarrantyReceiveReplaceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WarrantyReceiveReplaceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CompanyAssetsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CompanyAssetsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CompanyAssetsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CompanyAssetsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NonBarCodedTempRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NonBarCodedTempRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NonBarCodedTempRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NonBarCodedTempRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rpt_AssetsLogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As rpt_AssetsLogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rpt_AssetsLogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rpt_AssetsLogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace SAPReportsTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class GoodsReceivingReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GoodsReceivingReport"
            tableMapping.ColumnMappings.Add("PONo", "PONo")
            tableMapping.ColumnMappings.Add("DeliveryNo", "DeliveryNo")
            tableMapping.ColumnMappings.Add("PostingDate", "PostingDate")
            tableMapping.ColumnMappings.Add("ManPartNo", "ManPartNo")
            tableMapping.ColumnMappings.Add("SAPMatCode", "SAPMatCode")
            tableMapping.ColumnMappings.Add("LineItemNo", "LineItemNo")
            tableMapping.ColumnMappings.Add("SeqNo", "SeqNo")
            tableMapping.ColumnMappings.Add("ProductSerialNo", "ProductSerialNo")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("DocNo", "DocNo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssetsDAL.My.MySettings.Default.TempDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     SAPDocuments.PONo, SAPDocuments.DeliveryNo, CONVERT(varchar, SAPDocume"& _ 
                "nts.DocDate, 104) AS PostingDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerials.Manufac"& _ 
                "turePartNo AS ManPartNo, SAPItemSerials.SAPPartNo AS SAPMatCode, SAPItemSerialsT"& _ 
                "rans.LineItemNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.SeqNo, SAPItemSeria"& _ 
                "ls.SerialNo AS ProductSerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CASE LastStatus WHEN 'GR"& _ 
                "' THEN 'In stock' WHEN 'GINV' THEN 'Issue to asset' WHEN 'GIPOR' THEN 'Issue to "& _ 
                "asset' WHEN 'Reversal' THEN 'Reversal'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHEN 'VendorRetur"& _ 
                "n' THEN 'Return To Vendor' WHEN 'WarrantyClaim' THEN 'Claim for warranty' ELSE L"& _ 
                "astStatus END AS Status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments.DocNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM       "& _ 
                "  SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments ON SAPDocum"& _ 
                "ents.GUID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIte"& _ 
                "mSerials ON SAPItemSerials.GUID = SAPItemSerialsTrans.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     "& _ 
                "(SAPDocuments.DocType = 'GR')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY SAPDocuments.PONo, PostingDate, SAPItemS"& _ 
                "erialsTrans.LineItemNo, SAPItemSerialsTrans.SeqNo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = " select SAPDocuments.PONo,DeliveryNo,convert(varchar, DocDate, 104) as PostingDat"& _ 
                "e,ManufacturePartNo as ManPartNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  ,SAPPartNo as SAPMatCode,LineItemNo,SeqNo,Se"& _ 
                "rialNo as ProductSerialNo,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case LastStatus "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'GR' then 'In stock'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'G"& _ 
                "INV' then 'Issue to asset'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'GIPOR' then 'Issue to asset'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'Reversal' "& _ 
                "then 'Reversal'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'VendorReturn' then 'Return To Vendor'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'WarrantyClai"& _ 
                "m' then'Claim for warranty'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else LastStatus"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"end as Status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     SAPDocuments.DocNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" from SAPItemSerialsTrans inner join SAPDocuments on SA"& _ 
                "PDocuments.GUID = SAPItemSerialsTrans.DocGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" inner join SAPItemSerials on SAP"& _ 
                "ItemSerials.GUID = SAPItemSerialsTrans.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" where DocType= 'GR' "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "and SAPDocuments.PONo>= ISNULL(?,SAPDocuments.PONo) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPDocuments.PONo<= IS"& _ 
                "NULL(?,SAPDocuments.PONo) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SerialNo = ISNULL(?,SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ManufacturePa"& _ 
                "rtNo = ISNULL(?,ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = ISNULL(?,SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER B"& _ 
                "Y SAPDocuments.PONo, PostingDate, SAPItemSerialsTrans.LineItemNo, SAPItemSerials"& _ 
                "Trans.SeqNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PONo", Global.System.Data.OleDb.OleDbType.WChar, 100, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PONo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PONo1", Global.System.Data.OleDb.OleDbType.WChar, 100, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PONo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ProductSerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPMatCode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = " select SAPDocuments.PONo,DeliveryNo,convert(varchar, DocDate, 104) as PostingDat"& _ 
                "e,ManufacturePartNo as ManPartNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  ,SAPPartNo as SAPMatCode,LineItemNo,SeqNo,Se"& _ 
                "rialNo as ProductSerialNo,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case LastStatus "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'GR' then 'In stock'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'G"& _ 
                "INV' then 'Issue to asset'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'GIPOR' then 'Issue to asset'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'Reversal' "& _ 
                "then 'Reversal'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'VendorReturn' then 'Return To Vendor'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'WarrantyClai"& _ 
                "m' then'Claim for warranty'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else LastStatus"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"end as Status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     SAPDocuments.DocNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" from SAPItemSerialsTrans inner join SAPDocuments on SA"& _ 
                "PDocuments.GUID = SAPItemSerialsTrans.DocGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" inner join SAPItemSerials on SAP"& _ 
                "ItemSerials.GUID = SAPItemSerialsTrans.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" where DocType= 'GR' "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "and SAPDocuments.PONo>= ISNULL(?,SAPDocuments.PONo) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPDocuments.PONo<= IS"& _ 
                "NULL(?,SAPDocuments.PONo) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SerialNo = ISNULL(?,SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ManufacturePa"& _ 
                "rtNo = ISNULL(?,ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = ISNULL(?,SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dat"& _ 
                "eadd(d, datediff(d,0, DocDate ), 0)  >= ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd(d, datediff(d,0, DocDate "& _ 
                "), 0)  <= ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY SAPDocuments.PONo, PostingDate, SAPItemSerialsTrans.LineIt"& _ 
                "emNo, SAPItemSerialsTrans.SeqNo"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PONo", Global.System.Data.OleDb.OleDbType.WChar, 100, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PONo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PONo1", Global.System.Data.OleDb.OleDbType.WChar, 100, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PONo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ProductSerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPMatCode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param13", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param14", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = " select SAPDocuments.PONo,DeliveryNo,convert(varchar, DocDate, 104) as PostingDat"& _ 
                "e,ManufacturePartNo as ManPartNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  ,SAPPartNo as SAPMatCode,LineItemNo,SeqNo,Se"& _ 
                "rialNo as ProductSerialNo,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case LastStatus "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'GR' then 'In stock'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'G"& _ 
                "INV' then 'Issue to asset'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'GIPOR' then 'Issue to asset'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'Reversal' "& _ 
                "then 'Reversal'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'VendorReturn' then 'Return To Vendor'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'WarrantyClai"& _ 
                "m' then'Claim for warranty'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else LastStatus"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"end as Status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     SAPDocuments.DocNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" from SAPItemSerialsTrans inner join SAPDocuments on SA"& _ 
                "PDocuments.GUID = SAPItemSerialsTrans.DocGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" inner join SAPItemSerials on SAP"& _ 
                "ItemSerials.GUID = SAPItemSerialsTrans.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" where DocType= 'GR' "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "and SAPDocuments.PONo= ISNULL(?,SAPDocuments.PONo) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SerialNo = ISNULL(?,Ser"& _ 
                "ialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ManufacturePartNo = ISNULL(?,ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = ISN"& _ 
                "ULL(?,SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY SAPDocuments.PONo, PostingDate, SAPItemSerialsTrans"& _ 
                ".LineItemNo, SAPItemSerialsTrans.SeqNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PONo", Global.System.Data.OleDb.OleDbType.WChar, 100, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PONo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ProductSerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPMatCode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(4) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = " select SAPDocuments.PONo,DeliveryNo,convert(varchar, DocDate, 104) as PostingDat"& _ 
                "e,ManufacturePartNo as ManPartNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  ,SAPPartNo as SAPMatCode,LineItemNo,SeqNo,Se"& _ 
                "rialNo as ProductSerialNo,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case LastStatus "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'GR' then 'In stock'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'G"& _ 
                "INV' then 'Issue to asset'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'GIPOR' then 'Issue to asset'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'Reversal' "& _ 
                "then 'Reversal'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'VendorReturn' then 'Return To Vendor'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when 'WarrantyClai"& _ 
                "m' then'Claim for warranty'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else LastStatus"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"end as Status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     SAPDocuments.DocNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" from SAPItemSerialsTrans inner join SAPDocuments on SA"& _ 
                "PDocuments.GUID = SAPItemSerialsTrans.DocGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" inner join SAPItemSerials on SAP"& _ 
                "ItemSerials.GUID = SAPItemSerialsTrans.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" where DocType= 'GR' "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "and SAPDocuments.PONo= ISNULL(?,SAPDocuments.PONo) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SerialNo = ISNULL(?,Ser"& _ 
                "ialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ManufacturePartNo = ISNULL(?,ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = ISN"& _ 
                "ULL(?,SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd(d, datediff(d,0, DocDate ), 0)  >= ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd("& _ 
                "d, datediff(d,0, DocDate ), 0)  <= ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY SAPDocuments.PONo, PostingDate, S"& _ 
                "APItemSerialsTrans.LineItemNo, SAPItemSerialsTrans.SeqNo"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PONo", Global.System.Data.OleDb.OleDbType.WChar, 100, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PONo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ProductSerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPMatCode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param11", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param12", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SAPReports.GoodsReceivingReportDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SAPReports.GoodsReceivingReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SAPReports.GoodsReceivingReportDataTable = New SAPReports.GoodsReceivingReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParams(ByVal PONo As String, ByVal PONo1 As String, ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String) As SAPReports.GoodsReceivingReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PONo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PONo,String)
            End If
            If (PONo1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PONo1,String)
            End If
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(SAPPartNo,String)
            End If
            Dim dataTable As SAPReports.GoodsReceivingReportDataTable = New SAPReports.GoodsReceivingReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParamsAndDate(ByVal PONo As String, ByVal PONo1 As String, ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal Param13 As Date, ByVal Param14 As Date) As SAPReports.GoodsReceivingReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (PONo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PONo,String)
            End If
            If (PONo1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PONo1,String)
            End If
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(SAPPartNo,String)
            End If
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(Param13,Date)
            Me.Adapter.SelectCommand.Parameters(6).Value = CType(Param14,Date)
            Dim dataTable As SAPReports.GoodsReceivingReportDataTable = New SAPReports.GoodsReceivingReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPo(ByVal PONo As String, ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String) As SAPReports.GoodsReceivingReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (PONo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PONo,String)
            End If
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(SAPPartNo,String)
            End If
            Dim dataTable As SAPReports.GoodsReceivingReportDataTable = New SAPReports.GoodsReceivingReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPOAndDate(ByVal PONo As String, ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal Param11 As Date, ByVal Param12 As Date) As SAPReports.GoodsReceivingReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (PONo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PONo,String)
            End If
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(SAPPartNo,String)
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(Param11,Date)
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(Param12,Date)
            Dim dataTable As SAPReports.GoodsReceivingReportDataTable = New SAPReports.GoodsReceivingReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class GoodsIssuanceReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GoodsIssuanceReport"
            tableMapping.ColumnMappings.Add("DocType", "DocType")
            tableMapping.ColumnMappings.Add("MovementType", "MovementType")
            tableMapping.ColumnMappings.Add("InvProposalNo", "InvProposalNo")
            tableMapping.ColumnMappings.Add("PRNo", "PRNo")
            tableMapping.ColumnMappings.Add("IssueDate", "IssueDate")
            tableMapping.ColumnMappings.Add("EmpNo", "EmpNo")
            tableMapping.ColumnMappings.Add("AssetNo", "AssetNo")
            tableMapping.ColumnMappings.Add("SAPMatCode", "SAPMatCode")
            tableMapping.ColumnMappings.Add("ManPartNo", "ManPartNo")
            tableMapping.ColumnMappings.Add("SerialNo", "SerialNo")
            tableMapping.ColumnMappings.Add("CostCenter", "CostCenter")
            tableMapping.ColumnMappings.Add("BusinessArea", "BusinessArea")
            tableMapping.ColumnMappings.Add("GLAC", "GLAC")
            tableMapping.ColumnMappings.Add("EmpName", "EmpName")
            tableMapping.ColumnMappings.Add("LineItemNo", "LineItemNo")
            tableMapping.ColumnMappings.Add("DocNo", "DocNo")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssetsDAL.My.MySettings.Default.TempDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     'GI' AS DocType, SAPItemSerialsTrans.MovementType, SAPItemSerialsTrans"& _ 
                ".InvProposalNo, SAPItemSerialsTrans.PORequisitionNo AS PRNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     CONVERT(varchar, SAPDocuments.DocDate, 104) AS IssueDate, SAPItemSerialsTra"& _ 
                "ns.EmpNo, SAPItemSerialsTrans.AssetNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerials.SA"& _ 
                "PPartNo AS SAPMatCode, SAPItemSerials.ManufacturePartNo AS ManPartNo, SAPItemSer"& _ 
                "ials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.CostCenter, SAPItemSe"& _ 
                "rialsTrans.BusinessArea, SAPItemSerialsTrans.GLAC, SAPDocuments.EmpName, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                 SAPItemSerialsTrans.LineItemNo, SAPDocuments.DocNo, SAPDocument"& _ 
                "s.Remarks"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SA"& _ 
                "PDocuments ON SAPDocuments.GUID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                SAPItemSerials ON SAPItemSerials.GUID = SAPItemSerialsTrans.Item"& _ 
                "SerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocuments.DocType = 'GINV' OR SAPDocuments.DocType = '"& _ 
                "GIPOR')"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     'GI' AS DocType, SAPItemSerialsTrans.MovementType, SAPItemSerialsTrans"& _ 
                ".InvProposalNo, SAPItemSerialsTrans.PORequisitionNo AS PRNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     CONVERT(varchar, SAPDocuments.DocDate, 104) AS IssueDate, SAPItemSerialsTra"& _ 
                "ns.EmpNo, SAPItemSerialsTrans.AssetNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerials.SA"& _ 
                "PPartNo AS SAPMatCode, SAPItemSerials.ManufacturePartNo AS ManPartNo, SAPItemSer"& _ 
                "ials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.CostCenter, SAPItemSe"& _ 
                "rialsTrans.BusinessArea, SAPItemSerialsTrans.GLAC, SAPDocuments.EmpName, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                 SAPItemSerialsTrans.LineItemNo, SAPDocuments.DocNo, SAPDocument"& _ 
                "s.Remarks"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SA"& _ 
                "PDocuments ON SAPDocuments.GUID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                SAPItemSerials ON SAPItemSerials.GUID = SAPItemSerialsTrans.Item"& _ 
                "SerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocuments.DocType = 'GINV' OR SAPDocuments.DocType = '"& _ 
                "GIPOR')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPItemSerials.SerialNo = ISNULL(?,SAPItemSerials.SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and Ma"& _ 
                "nufacturePartNo = ISNULL(?,ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = ISNULL(?,SAPPartN"& _ 
                "o)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (SAPItemSerialsTrans.AssetNo= ISNULL(?,SAPItemSerialsTrans.AssetNo) or S"& _ 
                "APItemSerialsTrans.AssetNo is null)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and DocType=  ISNULL(?,DocType)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPMatCode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AssetNo", Global.System.Data.OleDb.OleDbType.WChar, 100, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssetNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DocType", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DocType", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     'GI' AS DocType, SAPItemSerialsTrans.MovementType, SAPItemSerialsTrans"& _ 
                ".InvProposalNo, SAPItemSerialsTrans.PORequisitionNo AS PRNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     CONVERT(varchar, SAPDocuments.DocDate, 104) AS IssueDate, SAPItemSerialsTra"& _ 
                "ns.EmpNo, SAPItemSerialsTrans.AssetNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerials.SA"& _ 
                "PPartNo AS SAPMatCode, SAPItemSerials.ManufacturePartNo AS ManPartNo, SAPItemSer"& _ 
                "ials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.CostCenter, SAPItemSe"& _ 
                "rialsTrans.BusinessArea, SAPItemSerialsTrans.GLAC, SAPDocuments.EmpName, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                 SAPItemSerialsTrans.LineItemNo, SAPDocuments.DocNo, SAPDocument"& _ 
                "s.Remarks"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SA"& _ 
                "PDocuments ON SAPDocuments.GUID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                SAPItemSerials ON SAPItemSerials.GUID = SAPItemSerialsTrans.Item"& _ 
                "SerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocuments.DocType = 'GINV' OR SAPDocuments.DocType = '"& _ 
                "GIPOR')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SerialNo = ISNULL(?,SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ManufacturePartNo = ISNULL(?,Man"& _ 
                "ufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = ISNULL(?,SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (SAPItemSerialsTrans.A"& _ 
                "ssetNo= ISNULL(?,SAPItemSerialsTrans.AssetNo) or SAPItemSerialsTrans.AssetNo is "& _ 
                "null)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and DocType=  ISNULL(?,DocType)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd(d, datediff(d,0, DocDate ), "& _ 
                "0)  >= ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd(d, datediff(d,0, DocDate ), 0)  <= ?"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPMatCode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AssetNo", Global.System.Data.OleDb.OleDbType.WChar, 100, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssetNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DocType", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DocType", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param13", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param14", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SAPReports.GoodsIssuanceReportDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SAPReports.GoodsIssuanceReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SAPReports.GoodsIssuanceReportDataTable = New SAPReports.GoodsIssuanceReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParam(ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal AssetNo As String, ByVal DocType As String) As SAPReports.GoodsIssuanceReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SAPPartNo,String)
            End If
            If (AssetNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(AssetNo,String)
            End If
            If (DocType Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(DocType,String)
            End If
            Dim dataTable As SAPReports.GoodsIssuanceReportDataTable = New SAPReports.GoodsIssuanceReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParamAndDate(ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal AssetNo As String, ByVal DocType As String, ByVal Param13 As Date, ByVal Param14 As Date) As SAPReports.GoodsIssuanceReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SAPPartNo,String)
            End If
            If (AssetNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(AssetNo,String)
            End If
            If (DocType Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(DocType,String)
            End If
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(Param13,Date)
            Me.Adapter.SelectCommand.Parameters(6).Value = CType(Param14,Date)
            Dim dataTable As SAPReports.GoodsIssuanceReportDataTable = New SAPReports.GoodsIssuanceReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ReversalReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ReversalReport"
            tableMapping.ColumnMappings.Add("DocType", "DocType")
            tableMapping.ColumnMappings.Add("ReversalDocNo", "ReversalDocNo")
            tableMapping.ColumnMappings.Add("SAPPartNo", "SAPPartNo")
            tableMapping.ColumnMappings.Add("SerialNo", "SerialNo")
            tableMapping.ColumnMappings.Add("ManufacturePartNo", "ManufacturePartNo")
            tableMapping.ColumnMappings.Add("SAPMaterialDocNo", "SAPMaterialDocNo")
            tableMapping.ColumnMappings.Add("SAPMaterialDocLineNo", "SAPMaterialDocLineNo")
            tableMapping.ColumnMappings.Add("PORequisitionNo", "PORequisitionNo")
            tableMapping.ColumnMappings.Add("InvProposalNo", "InvProposalNo")
            tableMapping.ColumnMappings.Add("DocDate", "DocDate")
            tableMapping.ColumnMappings.Add("GRGIDocNo", "GRGIDocNo")
            tableMapping.ColumnMappings.Add("Plant", "Plant")
            tableMapping.ColumnMappings.Add("Location", "Location")
            tableMapping.ColumnMappings.Add("ReasonOfMovement", "ReasonOfMovement")
            tableMapping.ColumnMappings.Add("PONo", "PONo")
            tableMapping.ColumnMappings.Add("LineItemNo", "LineItemNo")
            tableMapping.ColumnMappings.Add("GLAC", "GLAC")
            tableMapping.ColumnMappings.Add("CostCenter", "CostCenter")
            tableMapping.ColumnMappings.Add("BusinessArea", "BusinessArea")
            tableMapping.ColumnMappings.Add("AssetNo", "AssetNo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssetsDAL.My.MySettings.Default.TempDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     'Cancelation' AS DocType, SAPDocuments.DocNo AS ReversalDocNo, CONVERT"& _ 
                "(varchar, SAPDocuments.DocDate, 104) AS DocDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItem"& _ 
                "Serials.SAPPartNo, SAPItemSerials.SerialNo, SAPItemSerials.ManufacturePartNo, SA"& _ 
                "PItemSerialsTrans.SAPMaterialDocNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans."& _ 
                "SAPMaterialDocLineNo, OrgTrans.PORequisitionNo, OrgTrans.InvProposalNo, OrgDocum"& _ 
                "ents.DocNo AS 'GRGIDocNo', "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.Plant, SA"& _ 
                "PItemSerialsTrans.Location, SAPItemSerialsTrans.ReasonOfFault AS ReasonOfMovemen"& _ 
                "t, SAPItemSerialsTrans.PONo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.LineIte"& _ 
                "mNo, SAPItemSerialsTrans.GLAC, SAPItemSerialsTrans.CostCenter, SAPItemSerialsTra"& _ 
                "ns.BusinessArea, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.AssetNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM      "& _ 
                "   SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments ON SAPDocu"& _ 
                "ments.GUID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIt"& _ 
                "emSerials ON SAPItemSerialsTrans.ItemSerialGUID = SAPItemSerials.GUID INNER JOIN"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans AS OrgTrans ON OrgTrans.GUID = SAPIt"& _ 
                "emSerialsTrans.OrgItemSerialTransGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocum"& _ 
                "ents AS OrgDocuments ON OrgDocuments.GUID = OrgTrans.DocGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocu"& _ 
                "ments.DocType = 'Reversal')"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     'Cancelation' AS DocType, SAPDocuments.DocNo AS ReversalDocNo, CONVERT"& _ 
                "(varchar, SAPDocuments.DocDate, 104) AS DocDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItem"& _ 
                "Serials.SAPPartNo, SAPItemSerials.SerialNo, SAPItemSerials.ManufacturePartNo, SA"& _ 
                "PItemSerialsTrans.SAPMaterialDocNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans."& _ 
                "SAPMaterialDocLineNo, OrgTrans.PORequisitionNo, OrgTrans.InvProposalNo, OrgDocum"& _ 
                "ents.DocNo AS 'GRGIDocNo', "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.Plant, SA"& _ 
                "PItemSerialsTrans.Location, SAPItemSerialsTrans.ReasonOfFault AS ReasonOfMovemen"& _ 
                "t, SAPItemSerialsTrans.PONo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.LineIte"& _ 
                "mNo, SAPItemSerialsTrans.GLAC, SAPItemSerialsTrans.CostCenter, SAPItemSerialsTra"& _ 
                "ns.BusinessArea, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.AssetNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM      "& _ 
                "   SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments ON SAPDocu"& _ 
                "ments.GUID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIt"& _ 
                "emSerials ON SAPItemSerialsTrans.ItemSerialGUID = SAPItemSerials.GUID INNER JOIN"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans AS OrgTrans ON OrgTrans.GUID = SAPIt"& _ 
                "emSerialsTrans.OrgItemSerialTransGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocum"& _ 
                "ents AS OrgDocuments ON OrgDocuments.GUID = OrgTrans.DocGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocu"& _ 
                "ments.DocType = 'Reversal')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SerialNo = ISNULL(?,SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ManufactureP"& _ 
                "artNo = ISNULL(?,ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = ISNULL(?,SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and  S"& _ 
                "APDocuments.DocNo= ISNULL(?,SAPDocuments.DocNo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManufacturePartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DocNo", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ReversalDocNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     'Cancelation' AS DocType, SAPDocuments.DocNo AS ReversalDocNo, CONVERT"& _ 
                "(varchar, SAPDocuments.DocDate, 104) AS DocDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItem"& _ 
                "Serials.SAPPartNo, SAPItemSerials.SerialNo, SAPItemSerials.ManufacturePartNo, SA"& _ 
                "PItemSerialsTrans.SAPMaterialDocNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans."& _ 
                "SAPMaterialDocLineNo, OrgTrans.PORequisitionNo, OrgTrans.InvProposalNo, OrgDocum"& _ 
                "ents.DocNo AS 'GRGIDocNo', "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.Plant, SA"& _ 
                "PItemSerialsTrans.Location, SAPItemSerialsTrans.ReasonOfFault AS ReasonOfMovemen"& _ 
                "t, SAPItemSerialsTrans.PONo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.LineIte"& _ 
                "mNo, SAPItemSerialsTrans.GLAC, SAPItemSerialsTrans.CostCenter, SAPItemSerialsTra"& _ 
                "ns.BusinessArea, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.AssetNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM      "& _ 
                "   SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments ON SAPDocu"& _ 
                "ments.GUID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIt"& _ 
                "emSerials ON SAPItemSerialsTrans.ItemSerialGUID = SAPItemSerials.GUID INNER JOIN"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans AS OrgTrans ON OrgTrans.GUID = SAPIt"& _ 
                "emSerialsTrans.OrgItemSerialTransGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocum"& _ 
                "ents AS OrgDocuments ON OrgDocuments.GUID = OrgTrans.DocGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocu"& _ 
                "ments.DocType = 'Reversal')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SerialNo = ISNULL(?,SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ManufactureP"& _ 
                "artNo = ISNULL(?,ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = ISNULL(?,SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and  S"& _ 
                "APDocuments.DocNo= ISNULL(?,SAPDocuments.DocNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd(d, datediff(d,0, SA"& _ 
                "PDocuments.DocDate ), 0)  >= ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd(d, datediff(d,0, SAPDocuments.DocDat"& _ 
                "e ), 0)  <= ?"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManufacturePartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DocNo", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ReversalDocNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param11", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param12", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SAPReports.ReversalReportDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SAPReports.ReversalReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SAPReports.ReversalReportDataTable = New SAPReports.ReversalReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParams(ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal DocNo As String) As SAPReports.ReversalReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SAPPartNo,String)
            End If
            If (DocNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(DocNo,String)
            End If
            Dim dataTable As SAPReports.ReversalReportDataTable = New SAPReports.ReversalReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParamsAndDate(ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal DocNo As String, ByVal Param11 As Date, ByVal Param12 As Date) As SAPReports.ReversalReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SAPPartNo,String)
            End If
            If (DocNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(DocNo,String)
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(Param11,Date)
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(Param12,Date)
            Dim dataTable As SAPReports.ReversalReportDataTable = New SAPReports.ReversalReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VendorReturnReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VendorReturnReport"
            tableMapping.ColumnMappings.Add("DocNo", "DocNo")
            tableMapping.ColumnMappings.Add("PONo", "PONo")
            tableMapping.ColumnMappings.Add("SerialNo", "SerialNo")
            tableMapping.ColumnMappings.Add("ManufacturePartNo", "ManufacturePartNo")
            tableMapping.ColumnMappings.Add("SAPPartNo", "SAPPartNo")
            tableMapping.ColumnMappings.Add("POLineNo", "POLineNo")
            tableMapping.ColumnMappings.Add("DocType", "DocType")
            tableMapping.ColumnMappings.Add("DocDate", "DocDate")
            tableMapping.ColumnMappings.Add("Plant", "Plant")
            tableMapping.ColumnMappings.Add("Location", "Location")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssetsDAL.My.MySettings.Default.TempDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     SAPDocuments.DocNo, CONVERT(varchar, SAPDocuments.DocDate, 104) AS Doc"& _ 
                "Date, SAPDocuments.PONo, SAPItemSerials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIte"& _ 
                "mSerials.ManufacturePartNo, SAPItemSerials.SAPPartNo, SAPItemSerialsTrans.POLine"& _ 
                "No, SAPDocuments.DocType, SAPItemSerialsTrans.Plant, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAP"& _ 
                "ItemSerialsTrans.Location"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "              SAPDocuments ON SAPDocuments.GUID = SAPItemSerialsTrans.DocGUID IN"& _ 
                "NER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerials ON SAPItemSerials.GUID = SAPItemS"& _ 
                "erialsTrans.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocuments.DocType = 'VendorReturn')"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     SAPDocuments.DocNo, CONVERT(varchar, SAPDocuments.DocDate, 104) AS Doc"& _ 
                "Date, SAPDocuments.PONo, SAPItemSerials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIte"& _ 
                "mSerials.ManufacturePartNo, SAPItemSerials.SAPPartNo, SAPItemSerialsTrans.POLine"& _ 
                "No, SAPDocuments.DocType, SAPItemSerialsTrans.Plant, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAP"& _ 
                "ItemSerialsTrans.Location"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "              SAPDocuments ON SAPDocuments.GUID = SAPItemSerialsTrans.DocGUID IN"& _ 
                "NER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerials ON SAPItemSerials.GUID = SAPItemS"& _ 
                "erialsTrans.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocuments.DocType = 'VendorReturn')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"a"& _ 
                "nd SerialNo = ISNULL(?,SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ManufacturePartNo = ISNULL(?,ManufacturePa"& _ 
                "rtNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = ISNULL(?,SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and  SAPDocuments.DocNo= ISNULL(?,SA"& _ 
                "PDocuments.DocNo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManufacturePartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DocNo", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DocNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     SAPDocuments.DocNo, CONVERT(varchar, SAPDocuments.DocDate, 104) AS Doc"& _ 
                "Date, SAPDocuments.PONo, SAPItemSerials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIte"& _ 
                "mSerials.ManufacturePartNo, SAPItemSerials.SAPPartNo, SAPItemSerialsTrans.POLine"& _ 
                "No, SAPDocuments.DocType, SAPItemSerialsTrans.Plant, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAP"& _ 
                "ItemSerialsTrans.Location"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "              SAPDocuments ON SAPDocuments.GUID = SAPItemSerialsTrans.DocGUID IN"& _ 
                "NER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerials ON SAPItemSerials.GUID = SAPItemS"& _ 
                "erialsTrans.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocuments.DocType = 'VendorReturn')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"a"& _ 
                "nd SerialNo = ISNULL(?,SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ManufacturePartNo = ISNULL(?,ManufacturePa"& _ 
                "rtNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = ISNULL(?,SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and  SAPDocuments.DocNo= ISNULL(?,SA"& _ 
                "PDocuments.DocNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd(d, datediff(d,0, DocDate ), 0)  >= ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd"& _ 
                "(d, datediff(d,0, DocDate ), 0)  <= ?"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManufacturePartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DocNo", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DocNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param11", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param12", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SAPReports.VendorReturnReportDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SAPReports.VendorReturnReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SAPReports.VendorReturnReportDataTable = New SAPReports.VendorReturnReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParams(ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal DocNo As String) As SAPReports.VendorReturnReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SAPPartNo,String)
            End If
            If (DocNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(DocNo,String)
            End If
            Dim dataTable As SAPReports.VendorReturnReportDataTable = New SAPReports.VendorReturnReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParamsAndDate(ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal DocNo As String, ByVal Param11 As Date, ByVal Param12 As Date) As SAPReports.VendorReturnReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SAPPartNo,String)
            End If
            If (DocNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(DocNo,String)
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(Param11,Date)
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(Param12,Date)
            Dim dataTable As SAPReports.VendorReturnReportDataTable = New SAPReports.VendorReturnReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WarrantyClaimReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WarrantyClaimReport"
            tableMapping.ColumnMappings.Add("DocNo", "DocNo")
            tableMapping.ColumnMappings.Add("PONo", "PONo")
            tableMapping.ColumnMappings.Add("SerialNo", "SerialNo")
            tableMapping.ColumnMappings.Add("ManufacturePartNo", "ManufacturePartNo")
            tableMapping.ColumnMappings.Add("SAPPartNo", "SAPPartNo")
            tableMapping.ColumnMappings.Add("POLineNo", "POLineNo")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("InvProposalNo", "InvProposalNo")
            tableMapping.ColumnMappings.Add("EmpNo", "EmpNo")
            tableMapping.ColumnMappings.Add("ReasonOfFault", "ReasonOfFault")
            tableMapping.ColumnMappings.Add("DocType", "DocType")
            tableMapping.ColumnMappings.Add("DocDate", "DocDate")
            tableMapping.ColumnMappings.Add("ExpectedReturnDate", "ExpectedReturnDate")
            tableMapping.ColumnMappings.Add("CostCenter", "CostCenter")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssetsDAL.My.MySettings.Default.TempDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     SAPDocuments.DocNo, CONVERT(varchar, SAPDocuments.DocDate, 104) AS Doc"& _ 
                "Date, SAPDocuments.PONo, SAPItemSerials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIte"& _ 
                "mSerials.ManufacturePartNo, SAPItemSerials.SAPPartNo, SAPItemSerialsTrans.POLine"& _ 
                "No, CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments.ExpectedReturnDate, 10"& _ 
                "4) AS ExpectedReturnDate, SAPDocuments.Remarks, SAPItemSerialsTrans.InvProposalN"& _ 
                "o, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.EmpNo, SAPItemSerialsTrans.Reason"& _ 
                "OfFault, SAPDocuments.DocType, SAPItemSerialsTrans.CostCenter"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAPI"& _ 
                "temSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments ON SAPDocuments.G"& _ 
                "UID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSeria"& _ 
                "ls ON SAPItemSerials.GUID = SAPItemSerialsTrans.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDo"& _ 
                "cuments.DocType = 'WarrantyClaim')"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     SAPDocuments.DocNo,   CONVERT(varchar, SAPDocuments.DocDate, 104) AS D"& _ 
                "ocDate, SAPDocuments.PONo, SAPItemSerials.SerialNo, SAPItemSerials.ManufacturePa"& _ 
                "rtNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerials.SAPPartNo, SAPItemSerialsTrans.POLi"& _ 
                "neNo,  CONVERT(varchar, SAPDocuments.ExpectedReturnDate, 104) AS ExpectedReturnD"& _ 
                "ate, SAPDocuments.Remarks, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.InvPropos"& _ 
                "alNo, SAPItemSerialsTrans.EmpNo, SAPItemSerialsTrans.CostCenter, SAPItemSerialsT"& _ 
                "rans.ReasonOfFault, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments.DocType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         S"& _ 
                "APItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments ON SAPDocument"& _ 
                "s.GUID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSe"& _ 
                "rials ON SAPItemSerials.GUID = SAPItemSerialsTrans.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SA"& _ 
                "PDocuments.DocType = 'WarrantyClaim')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SerialNo = ISNULL(?,SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and Ma"& _ 
                "nufacturePartNo = ISNULL(?,ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = ISNULL(?,SAPPartN"& _ 
                "o)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and  SAPDocuments.DocNo= ISNULL(?,SAPDocuments.DocNo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManufacturePartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DocNo", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DocNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     SAPDocuments.DocNo,   CONVERT(varchar, SAPDocuments.DocDate, 104) AS D"& _ 
                "ocDate, SAPDocuments.PONo, SAPItemSerials.SerialNo, SAPItemSerials.ManufacturePa"& _ 
                "rtNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerials.SAPPartNo, SAPItemSerialsTrans.POLi"& _ 
                "neNo,  CONVERT(varchar, SAPDocuments.ExpectedReturnDate, 104) AS ExpectedReturnD"& _ 
                "ate, SAPDocuments.Remarks, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.InvPropos"& _ 
                "alNo, SAPItemSerialsTrans.EmpNo, SAPItemSerialsTrans.CostCenter, SAPItemSerialsT"& _ 
                "rans.ReasonOfFault, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments.DocType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         S"& _ 
                "APItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments ON SAPDocument"& _ 
                "s.GUID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSe"& _ 
                "rials ON SAPItemSerials.GUID = SAPItemSerialsTrans.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SA"& _ 
                "PDocuments.DocType = 'WarrantyClaim')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SerialNo = ISNULL(?,SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and Ma"& _ 
                "nufacturePartNo = ISNULL(?,ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = ISNULL(?,SAPPartN"& _ 
                "o)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and  SAPDocuments.DocNo= ISNULL(?,SAPDocuments.DocNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd(d, datedi"& _ 
                "ff(d,0, SAPDocuments.DocDate ), 0)  >= ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd(d, datediff(d,0, SAPDocume"& _ 
                "nts.DocDate ), 0)  <= ?"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManufacturePartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DocNo", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DocNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param11", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param12", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SAPReports.WarrantyClaimReportDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SAPReports.WarrantyClaimReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SAPReports.WarrantyClaimReportDataTable = New SAPReports.WarrantyClaimReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParams(ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal DocNo As String) As SAPReports.WarrantyClaimReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SAPPartNo,String)
            End If
            If (DocNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(DocNo,String)
            End If
            Dim dataTable As SAPReports.WarrantyClaimReportDataTable = New SAPReports.WarrantyClaimReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParamsAndDate(ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal DocNo As String, ByVal Param11 As Date, ByVal Param12 As Date) As SAPReports.WarrantyClaimReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SAPPartNo,String)
            End If
            If (DocNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(DocNo,String)
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(Param11,Date)
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(Param12,Date)
            Dim dataTable As SAPReports.WarrantyClaimReportDataTable = New SAPReports.WarrantyClaimReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WarrantyReceiveSameTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WarrantyReceiveSame"
            tableMapping.ColumnMappings.Add("DocNo", "DocNo")
            tableMapping.ColumnMappings.Add("DocDate", "DocDate")
            tableMapping.ColumnMappings.Add("PONo", "PONo")
            tableMapping.ColumnMappings.Add("SerialNo", "SerialNo")
            tableMapping.ColumnMappings.Add("ManufacturePartNo", "ManufacturePartNo")
            tableMapping.ColumnMappings.Add("SAPPartNo", "SAPPartNo")
            tableMapping.ColumnMappings.Add("InvProposalNo", "InvProposalNo")
            tableMapping.ColumnMappings.Add("EmpNo", "EmpNo")
            tableMapping.ColumnMappings.Add("ReasonOfFault", "ReasonOfFault")
            tableMapping.ColumnMappings.Add("WarrantyClaimDocNo", "WarrantyClaimDocNo")
            tableMapping.ColumnMappings.Add("WarrantyClaimDate", "WarrantyClaimDate")
            tableMapping.ColumnMappings.Add("CostCenter", "CostCenter")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssetsDAL.My.MySettings.Default.TempDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     SAPDocuments.DocNo, CONVERT(varchar, SAPDocuments.DocDate, 104) AS Doc"& _ 
                "Date, SAPDocuments.PONo, SAPItemSerials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIte"& _ 
                "mSerials.ManufacturePartNo, SAPItemSerials.SAPPartNo, SAPItemSerialsTrans.InvPro"& _ 
                "posalNo, SAPItemSerialsTrans.EmpNo, SAPItemSerialsTrans.CostCenter, SAPItemSeria"& _ 
                "lsTrans.ReasonOfFault, WarrantyClaimDocuments.DocNo AS WarrantyClaimDocNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" CO"& _ 
                "NVERT(varchar,  WarrantyClaimDocuments.DocDate, 104) AS WarrantyClaimDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM "& _ 
                "        SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments ON SA"& _ 
                "PDocuments.GUID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "SAPItemSerials ON SAPItemSerials.GUID = SAPItemSerialsTrans.ItemSerialGUID INNER"& _ 
                " JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments AS WarrantyClaimDocuments ON WarrantyC"& _ 
                "laimDocuments.GUID = SAPDocuments.WarrantyClaimDocGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocuments."& _ 
                "DocType = 'WarrantyReceivingSame')"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     SAPDocuments.DocNo, CONVERT(varchar, SAPDocuments.DocDate, 104) AS Doc"& _ 
                "Date, SAPDocuments.PONo, SAPItemSerials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIte"& _ 
                "mSerials.ManufacturePartNo, SAPItemSerials.SAPPartNo, SAPItemSerialsTrans.InvPro"& _ 
                "posalNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.EmpNo, SAPItemSerialsTrans."& _ 
                "CostCenter, SAPItemSerialsTrans.ReasonOfFault,WarrantyClaimDocuments.DocNo as Wa"& _ 
                "rrantyClaimDocNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"CONVERT(varchar,  WarrantyClaimDocuments.DocDate, 104) AS Wa"& _ 
                "rrantyClaimDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "    SAPDocuments ON SAPDocuments.GUID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                      SAPItemSerials ON SAPItemSerials.GUID = SAPItemSerialsTran"& _ 
                "s.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      inner join SAPDocuments WarrantyClaimDoc"& _ 
                "uments ON WarrantyClaimDocuments.GUID = SAPDocuments.WarrantyClaimDocGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                "     (SAPDocuments.DocType = 'WarrantyReceivingSame')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SerialNo = ISNULL(?,S"& _ 
                "erialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ManufacturePartNo = ISNULL(?,ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo = I"& _ 
                "SNULL(?,SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and  SAPDocuments.DocNo= ISNULL(?,SAPDocuments.DocNo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManufacturePartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DocNo", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DocNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     SAPDocuments.DocNo, CONVERT(varchar, SAPDocuments.DocDate, 104) AS Doc"& _ 
                "Date, SAPDocuments.PONo, SAPItemSerials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIte"& _ 
                "mSerials.ManufacturePartNo, SAPItemSerials.SAPPartNo, SAPItemSerialsTrans.InvPro"& _ 
                "posalNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerialsTrans.EmpNo, SAPItemSerialsTrans."& _ 
                "CostCenter, SAPItemSerialsTrans.ReasonOfFault,WarrantyClaimDocuments.DocNo as Wa"& _ 
                "rrantyClaimDocNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"CONVERT(varchar,  WarrantyClaimDocuments.DocDate, 104) AS Wa"& _ 
                "rrantyClaimDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAPItemSerialsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "    SAPDocuments ON SAPDocuments.GUID = SAPItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                      SAPItemSerials ON SAPItemSerials.GUID = SAPItemSerialsTran"& _ 
                "s.ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      inner join SAPDocuments WarrantyClaimDoc"& _ 
                "uments ON WarrantyClaimDocuments.GUID = SAPDocuments.WarrantyClaimDocGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                "     (SAPDocuments.DocType = 'WarrantyReceivingSame')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SerialNo = ISNULL(?"& _ 
                ",SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ManufacturePartNo = ISNULL(?,ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPPartNo ="& _ 
                " ISNULL(?,SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and  SAPDocuments.DocNo= ISNULL(?,SAPDocuments.DocNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and"& _ 
                " dateadd(d, datediff(d,0, SAPDocuments.DocDate ), 0)  >= ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd(d, dated"& _ 
                "iff(d,0, SAPDocuments.DocDate ), 0)  <= ?"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManufacturePartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DocNo", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DocNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param11", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param12", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SAPReports.WarrantyReceiveSameDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SAPReports.WarrantyReceiveSameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SAPReports.WarrantyReceiveSameDataTable = New SAPReports.WarrantyReceiveSameDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParams(ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal DocNo As String) As SAPReports.WarrantyReceiveSameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SAPPartNo,String)
            End If
            If (DocNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(DocNo,String)
            End If
            Dim dataTable As SAPReports.WarrantyReceiveSameDataTable = New SAPReports.WarrantyReceiveSameDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParamsAndDate(ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal DocNo As String, ByVal Param11 As Date, ByVal Param12 As Date) As SAPReports.WarrantyReceiveSameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SAPPartNo,String)
            End If
            If (DocNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(DocNo,String)
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(Param11,Date)
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(Param12,Date)
            Dim dataTable As SAPReports.WarrantyReceiveSameDataTable = New SAPReports.WarrantyReceiveSameDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WarrantyReceiveReplaceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WarrantyReceiveReplace"
            tableMapping.ColumnMappings.Add("DocNo", "DocNo")
            tableMapping.ColumnMappings.Add("DocDate", "DocDate")
            tableMapping.ColumnMappings.Add("PONo", "PONo")
            tableMapping.ColumnMappings.Add("SerialNo", "SerialNo")
            tableMapping.ColumnMappings.Add("ManufacturePartNo", "ManufacturePartNo")
            tableMapping.ColumnMappings.Add("SAPPartNo", "SAPPartNo")
            tableMapping.ColumnMappings.Add("InvProposalNo", "InvProposalNo")
            tableMapping.ColumnMappings.Add("EmpNo", "EmpNo")
            tableMapping.ColumnMappings.Add("ReasonOfFault", "ReasonOfFault")
            tableMapping.ColumnMappings.Add("WarrantyClaimDocNo", "WarrantyClaimDocNo")
            tableMapping.ColumnMappings.Add("OrgSerialNo", "OrgSerialNo")
            tableMapping.ColumnMappings.Add("OrgManPartNo", "OrgManPartNo")
            tableMapping.ColumnMappings.Add("WarrantyClaimDate", "WarrantyClaimDate")
            tableMapping.ColumnMappings.Add("CostCenter", "CostCenter")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssetsDAL.My.MySettings.Default.TempDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     SAPDocuments.DocNo, CONVERT(varchar, SAPDocuments.DocDate, 104) AS Doc"& _ 
                "Date, SAPDocuments.PONo, SAPItemSerials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIte"& _ 
                "mSerials.ManufacturePartNo, SAPItemSerials.SAPPartNo, SAPItemSerialsTrans.InvPro"& _ 
                "posalNo, SAPItemSerialsTrans.EmpNo, SAPItemSerialsTrans.CostCenter, SAPItemSeria"& _ 
                "lsTrans.ReasonOfFault, WarrantyClaimDocuments.DocNo AS WarrantyClaimDocNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   OrgSAPItemSerials.SerialNo AS OrgSerialNo, OrgSAPItemSerials."& _ 
                "ManufacturePartNo AS OrgManPartNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  CONVERT(varchar,  Warrant"& _ 
                "yClaimDocuments.DocDate, 104) AS WarrantyClaimDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAPItemSerialsT"& _ 
                "rans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments ON SAPDocuments.GUID = SAPIt"& _ 
                "emSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerials ON SAPIt"& _ 
                "emSerials.GUID = SAPItemSerialsTrans.ItemSerialGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "      SAPDocuments AS WarrantyClaimDocuments ON WarrantyClaimDocuments.GUID = SA"& _ 
                "PDocuments.WarrantyClaimDocGUID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSe"& _ 
                "rials AS OrgSAPItemSerials ON OrgSAPItemSerials.GUID = SAPItemSerialsTrans.OrgIt"& _ 
                "emSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocuments.DocType = 'WarrantyReceivingReplace')"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     SAPDocuments.DocNo, CONVERT(varchar, SAPDocuments.DocDate, 104) AS Doc"& _ 
                "Date, SAPDocuments.PONo, SAPItemSerials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIte"& _ 
                "mSerials.ManufacturePartNo, SAPItemSerials.SAPPartNo, SAPItemSerialsTrans.InvPro"& _ 
                "posalNo, SAPItemSerialsTrans.EmpNo, SAPItemSerialsTrans.CostCenter, SAPItemSeria"& _ 
                "lsTrans.ReasonOfFault, WarrantyClaimDocuments.DocNo AS WarrantyClaimDocNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   OrgSAPItemSerials.SerialNo AS OrgSerialNo, OrgSAPItemSerials."& _ 
                "ManufacturePartNo AS OrgManPartNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CONVERT(varchar,  War"& _ 
                "rantyClaimDocuments.DocDate, 104) AS WarrantyClaimDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAPItemSeri"& _ 
                "alsTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments ON SAPDocuments.GUID = S"& _ 
                "APItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerials ON S"& _ 
                "APItemSerials.GUID = SAPItemSerialsTrans.ItemSerialGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "          SAPDocuments AS WarrantyClaimDocuments ON WarrantyClaimDocuments.GUID "& _ 
                "= SAPDocuments.WarrantyClaimDocGUID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIt"& _ 
                "emSerials AS OrgSAPItemSerials ON OrgSAPItemSerials.GUID = SAPItemSerialsTrans.O"& _ 
                "rgItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocuments.DocType = 'WarrantyReceivingReplace')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPItemSerials.SerialNo = ISNULL(?,SAPItemSerials.SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPItemSer"& _ 
                "ials.ManufacturePartNo = ISNULL(?,SAPItemSerials.ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPItem"& _ 
                "Serials.SAPPartNo = ISNULL(?,SAPItemSerials.SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and  SAPDocuments.DocNo="& _ 
                " ISNULL(?,SAPDocuments.DocNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManufacturePartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DocNo", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DocNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     SAPDocuments.DocNo, CONVERT(varchar, SAPDocuments.DocDate, 104) AS Doc"& _ 
                "Date, SAPDocuments.PONo, SAPItemSerials.SerialNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPIte"& _ 
                "mSerials.ManufacturePartNo, SAPItemSerials.SAPPartNo, SAPItemSerialsTrans.InvPro"& _ 
                "posalNo, SAPItemSerialsTrans.EmpNo, SAPItemSerialsTrans.CostCenter, SAPItemSeria"& _ 
                "lsTrans.ReasonOfFault, WarrantyClaimDocuments.DocNo AS WarrantyClaimDocNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   OrgSAPItemSerials.SerialNo AS OrgSerialNo, OrgSAPItemSerials."& _ 
                "ManufacturePartNo AS OrgManPartNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    CONVERT(varchar,  Warra"& _ 
                "ntyClaimDocuments.DocDate, 104) AS WarrantyClaimDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAPItemSerial"& _ 
                "sTrans INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPDocuments ON SAPDocuments.GUID = SAP"& _ 
                "ItemSerialsTrans.DocGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItemSerials ON SAP"& _ 
                "ItemSerials.GUID = SAPItemSerialsTrans.ItemSerialGUID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        SAPDocuments AS WarrantyClaimDocuments ON WarrantyClaimDocuments.GUID = "& _ 
                "SAPDocuments.WarrantyClaimDocGUID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SAPItem"& _ 
                "Serials AS OrgSAPItemSerials ON OrgSAPItemSerials.GUID = SAPItemSerialsTrans.Org"& _ 
                "ItemSerialGUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SAPDocuments.DocType = 'WarrantyReceivingReplace')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPItemSerials.SerialNo = ISNULL(?,SAPItemSerials.SerialNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPItemSer"& _ 
                "ials.ManufacturePartNo = ISNULL(?,SAPItemSerials.ManufacturePartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and SAPItem"& _ 
                "Serials.SAPPartNo = ISNULL(?,SAPItemSerials.SAPPartNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and  SAPDocuments.DocNo="& _ 
                " ISNULL(?,SAPDocuments.DocNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd(d, datediff(d,0, SAPDocuments.DocDate"& _ 
                " ), 0)  >= ?"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dateadd(d, datediff(d,0, SAPDocuments.DocDate ), 0)  <= ?"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ManufacturePartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ManufacturePartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SAPPartNo", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SAPPartNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DocNo", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DocNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param11", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param12", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SAPReports.WarrantyReceiveReplaceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SAPReports.WarrantyReceiveReplaceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SAPReports.WarrantyReceiveReplaceDataTable = New SAPReports.WarrantyReceiveReplaceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParams(ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal DocNo As String) As SAPReports.WarrantyReceiveReplaceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SAPPartNo,String)
            End If
            If (DocNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(DocNo,String)
            End If
            Dim dataTable As SAPReports.WarrantyReceiveReplaceDataTable = New SAPReports.WarrantyReceiveReplaceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByParamsAndDate(ByVal SerialNo As String, ByVal ManufacturePartNo As String, ByVal SAPPartNo As String, ByVal DocNo As String, ByVal Param11 As Date, ByVal Param12 As Date) As SAPReports.WarrantyReceiveReplaceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (SerialNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SerialNo,String)
            End If
            If (ManufacturePartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ManufacturePartNo,String)
            End If
            If (SAPPartNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SAPPartNo,String)
            End If
            If (DocNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(DocNo,String)
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(Param11,Date)
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(Param12,Date)
            Dim dataTable As SAPReports.WarrantyReceiveReplaceDataTable = New SAPReports.WarrantyReceiveReplaceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CompanyAssetsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CompanyAssets"
            tableMapping.ColumnMappings.Add("barcode", "barcode")
            tableMapping.ColumnMappings.Add("AssetNumber", "AssetNumber")
            tableMapping.ColumnMappings.Add("SubNumber", "SubNumber")
            tableMapping.ColumnMappings.Add("CompanyCode", "CompanyCode")
            tableMapping.ColumnMappings.Add("CatFullPath", "CatFullPath")
            tableMapping.ColumnMappings.Add("Assetdetailsdesc1", "Assetdetailsdesc1")
            tableMapping.ColumnMappings.Add("Assetdetailsdesc2", "Assetdetailsdesc2")
            tableMapping.ColumnMappings.Add("InventoryNumber", "InventoryNumber")
            tableMapping.ColumnMappings.Add("CreationDate", "CreationDate")
            tableMapping.ColumnMappings.Add("CreatedBY", "CreatedBY")
            tableMapping.ColumnMappings.Add("SerailNo", "SerailNo")
            tableMapping.ColumnMappings.Add("CapitalizationDate", "CapitalizationDate")
            tableMapping.ColumnMappings.Add("BussinessArea", "BussinessArea")
            tableMapping.ColumnMappings.Add("CostNumber", "CostNumber")
            tableMapping.ColumnMappings.Add("LocationFullPath", "LocationFullPath")
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("EvaluationGroup1", "EvaluationGroup1")
            tableMapping.ColumnMappings.Add("EvaluationGroup2", "EvaluationGroup2")
            tableMapping.ColumnMappings.Add("EvaluationGroup3", "EvaluationGroup3")
            tableMapping.ColumnMappings.Add("EvaluationGroup4", "EvaluationGroup4")
            tableMapping.ColumnMappings.Add("SalvageYear", "SalvageYear")
            tableMapping.ColumnMappings.Add("AssetWithValue", "AssetWithValue")
            tableMapping.ColumnMappings.Add("InvStatus", "InvStatus")
            tableMapping.ColumnMappings.Add("HisDate", "HisDate")
            tableMapping.ColumnMappings.Add("RetirementDate", "RetirementDate")
            tableMapping.ColumnMappings.Add("StatusDesc", "StatusDesc")
            tableMapping.ColumnMappings.Add("ToFullLocation", "ToFullLocation")
            tableMapping.ColumnMappings.Add("OldCust", "OldCust")
            tableMapping.ColumnMappings.Add("LastEditBY", "LastEditBY")
            tableMapping.ColumnMappings.Add("LastEditDate", "LastEditDate")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssetsDAL.My.MySettings.Default.ZulAssetsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = " select distinct  AssetDetails.AstID as barcode, SUBSTRING ( RefNo , charindex('-"& _ 
                "',RefNo) +1 , charindex('-',RefNo,charindex('-',RefNo) + 2) - charindex('-',RefN"& _ 
                "o)-1 ) as AssetNumber,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SUBSTRING ( RefNo , charindex('-',RefNo,charindex('-',Re"& _ 
                "fNo) + 2) +1,len(RefNo)-charindex('-',RefNo,charindex('-',RefNo) + 2)) as SubNum"& _ 
                "ber ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Companies.CompanyCode,Category.CatFullPath,Assetdetails.AstDesc as Assetd"& _ 
                "etailsdesc1, Assetdetails.AstDesc2  as Assetdetailsdesc2,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"InventoryNumber,Asset"& _ 
                "Details.Purdate as CreationDate,CreatedBY, AssetDetails.SerailNo,CapitalizationD"& _ 
                "ate,BussinessArea,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"CostCenter.CostNumber,FromLocation.LocationFullPath,ToLocati"& _ 
                "on.LocationFullPath as ToFullLocation,Custodian.CustodianID,EvaluationGroup1,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"E"& _ 
                "valuationGroup2,EvaluationGroup3,EvaluationGroup4,AstBooks.SalvageYear,AssetDeta"& _ 
                "ils.LastEditBY,AssetDetails.LastEditDate,InStockAsset as AssetWithValue,InvStatu"& _ 
                "s,HisDate,DispDate as RetirementDate,AuditStatus.StatusDesc ,(select top 1 Fromc"& _ 
                "ustodian from Ast_Cust_history where Ast_Cust_history.AstID = AssetDetails.AstID"& _ 
                " order by historyid desc) as OldCust,Ast_History.Remarks"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from AssetDetails inne"& _ 
                "r join Assets on Assets.ItemCode = AssetDetails.ItemCode           "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer "& _ 
                "join Companies on AssetDetails.CompanyID = Companies.CompanyID       "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left oute"& _ 
                "r join Custodian on AssetDetails.CustodianID = custodian.CustodianID  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left out"& _ 
                "er join CostCenter on AssetDetails.CostCenterID = CostCenter.CostID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer "& _ 
                "join Category  on Assets.AstCatID = Category.AstCatID   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join AuditS"& _ 
                "tatus  on AuditStatus.StatusID = AssetDetails.InvStatus"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join AstBook"& _ 
                "s  on AstBooks.AstID = AssetDetails.AstID   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join Ast_History  on As"& _ 
                "t_History.AstID = AssetDetails.AstID   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join Location FromLocation o"& _ 
                "n AssetDetails.LocID = FromLocation.LocID        "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join Location ToLo"& _ 
                "cation on Ast_History.To_Loc = ToLocation.LocID        "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where AssetDetails.IsDe"& _ 
                "leted = 0 and Disposed = 0 "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and dbo.Ast_History.HisDate = (select max(HisDate) "& _ 
                "from dbo.Ast_History where AstID = AssetDetails.AstID   )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"order by AssetDetails"& _ 
                ".AstID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SAPReports.CompanyAssetsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SAPReports.CompanyAssetsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SAPReports.CompanyAssetsDataTable = New SAPReports.CompanyAssetsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class NonBarCodedTempTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "NonBarCodedTemp"
            tableMapping.ColumnMappings.Add("NonBCode", "NonBCode")
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID")
            tableMapping.ColumnMappings.Add("LocID", "LocID")
            tableMapping.ColumnMappings.Add("AstCatID", "AstCatID")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("AstModel", "AstModel")
            tableMapping.ColumnMappings.Add("SerailNo", "SerailNo")
            tableMapping.ColumnMappings.Add("HisDate", "HisDate")
            tableMapping.ColumnMappings.Add("RefNo", "RefNo")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("CompanyCode", "CompanyCode")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssetsDAL.My.MySettings.Default.TempDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     NonBCode, DeviceID, LocID, AstCatID, AstDesc AS Description, Model AS "& _ 
                "AstModel, Serial AS SerailNo, TransDate AS HisDate, RefNo, Remarks, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "            CompanyCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         NonBarCodedTemp"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SAPReports.NonBarCodedTempDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SAPReports.NonBarCodedTempDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SAPReports.NonBarCodedTempDataTable = New SAPReports.NonBarCodedTempDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class rpt_AssetsLogTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rpt_AssetsLog"
            tableMapping.ColumnMappings.Add("DetailID", "DetailID")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("CompanyCode", "CompanyCode")
            tableMapping.ColumnMappings.Add("AssetNumber", "AssetNumber")
            tableMapping.ColumnMappings.Add("SubNumber", "SubNumber")
            tableMapping.ColumnMappings.Add("Field", "Field")
            tableMapping.ColumnMappings.Add("OldValue", "OldValue")
            tableMapping.ColumnMappings.Add("NewValue", "NewValue")
            tableMapping.ColumnMappings.Add("User ID/ Name", "User ID/ Name")
            tableMapping.ColumnMappings.Add("LastModifiedDate", "LastModifiedDate")
            tableMapping.ColumnMappings.Add("ChangeType", "ChangeType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssetsDAL.My.MySettings.Default.ZulAssetsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select DetailID,logsummary.ID,SUBSTRING ( RefNo , 0 , charindex('-',RefNo) ) as C"& _ 
                "ompanyCode "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",SUBSTRING ( RefNo , charindex('-',RefNo) +1 , charindex('-',RefNo,"& _ 
                "charindex('-',RefNo) + 2) - charindex('-',RefNo)-1 ) as AssetNumber ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SUBSTRING"& _ 
                " ( RefNo , charindex('-',RefNo,charindex('-',RefNo) + 2) +1,len(RefNo)-charindex"& _ 
                "('-',RefNo,charindex('-',RefNo) + 2)) as SubNumber,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"logdetail.columnName as Fie"& _ 
                "ld, logdetail.OldValue,logdetail.NewValue,[AppUsers].LoginName + '-' + [AppUsers"& _ 
                "].UserName  as 'User ID/ Name',LastModifiedDate,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" case ChangeType when 'U' Then"& _ 
                " 'Update' When 'I' then 'Insert' When 'D' then 'Delete' end as ChangeType "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" fro"& _ 
                "m AssetDetailsChangeLogSummary logsummary "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" Left outer join [dbo].[AssetDetails"& _ 
                "] on [AssetDetails].ASTID = logsummary.ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" left outer join AssetDetailsChangeLo"& _ 
                "gDetail logdetail on logsummary.SummaryID = logdetail.SummaryID "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" left outer jo"& _ 
                "in [dbo].[AppUsers] on [AppUsers].LoginName = ModifiedByUser"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" order by logsumma"& _ 
                "ry.SummaryID desc,logdetail.DetailID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SAPReports.rpt_AssetsLogDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SAPReports.rpt_AssetsLogDataTable = New SAPReports.rpt_AssetsLogDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As SAPReports, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As SAPReports, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As SAPReports, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As SAPReports) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
