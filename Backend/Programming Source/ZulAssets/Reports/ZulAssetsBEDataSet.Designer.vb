'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9040
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ZulAssetsBEDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ZulAssetsBEDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableDesignation As DesignationDataTable
    
    Private tableAssetDetail As AssetDetailDataTable
    
    Private tableCustodian As CustodianDataTable
    
    Private tableAssetsLabel As AssetsLabelDataTable
    
    Private tableAssetReg As AssetRegDataTable
    
    Private tableDepBooks As DepBooksDataTable
    
    Private tableAssetTag As AssetTagDataTable
    
    Private tableAssetLedger As AssetLedgerDataTable
    
    Private tableDisposedAssets As DisposedAssetsDataTable
    
    Private tableAuditSatus As AuditSatusDataTable
    
    Private tableItemsInventory As ItemsInventoryDataTable
    
    Private tableCompanyAssets As CompanyAssetsDataTable
    
    Private tableAssetByCat As AssetByCatDataTable
    
    Private tableSupplier As SupplierDataTable
    
    Private tableDepreciation_Method As Depreciation_MethodDataTable
    
    Private tableDisposal_Method As Disposal_MethodDataTable
    
    Private tableAst_INV_Schedule As Ast_INV_ScheduleDataTable
    
    Private tableInsurer As InsurerDataTable
    
    Private tableReport_AssetbySubCategory As Report_AssetbySubCategoryDataTable
    
    Private tableBrand As BrandDataTable
    
    Private tableAssetsItems As AssetsItemsDataTable
    
    Private tableAssetBooks As AssetBooksDataTable
    
    Private tableAddress As AddressDataTable
    
    Private tablerptStockIssuance As rptStockIssuanceDataTable
    
    Private tableLocationLabel As LocationLabelDataTable
    
    Private tablerpt_AssetsLog As rpt_AssetsLogDataTable
    
    Private tableCostCenterAuditStatus As CostCenterAuditStatusDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Designation")) Is Nothing) Then
                MyBase.Tables.Add(New DesignationDataTable(ds.Tables("Designation")))
            End If
            If (Not (ds.Tables("AssetDetail")) Is Nothing) Then
                MyBase.Tables.Add(New AssetDetailDataTable(ds.Tables("AssetDetail")))
            End If
            If (Not (ds.Tables("Custodian")) Is Nothing) Then
                MyBase.Tables.Add(New CustodianDataTable(ds.Tables("Custodian")))
            End If
            If (Not (ds.Tables("AssetsLabel")) Is Nothing) Then
                MyBase.Tables.Add(New AssetsLabelDataTable(ds.Tables("AssetsLabel")))
            End If
            If (Not (ds.Tables("AssetReg")) Is Nothing) Then
                MyBase.Tables.Add(New AssetRegDataTable(ds.Tables("AssetReg")))
            End If
            If (Not (ds.Tables("DepBooks")) Is Nothing) Then
                MyBase.Tables.Add(New DepBooksDataTable(ds.Tables("DepBooks")))
            End If
            If (Not (ds.Tables("AssetTag")) Is Nothing) Then
                MyBase.Tables.Add(New AssetTagDataTable(ds.Tables("AssetTag")))
            End If
            If (Not (ds.Tables("AssetLedger")) Is Nothing) Then
                MyBase.Tables.Add(New AssetLedgerDataTable(ds.Tables("AssetLedger")))
            End If
            If (Not (ds.Tables("DisposedAssets")) Is Nothing) Then
                MyBase.Tables.Add(New DisposedAssetsDataTable(ds.Tables("DisposedAssets")))
            End If
            If (Not (ds.Tables("AuditSatus")) Is Nothing) Then
                MyBase.Tables.Add(New AuditSatusDataTable(ds.Tables("AuditSatus")))
            End If
            If (Not (ds.Tables("ItemsInventory")) Is Nothing) Then
                MyBase.Tables.Add(New ItemsInventoryDataTable(ds.Tables("ItemsInventory")))
            End If
            If (Not (ds.Tables("CompanyAssets")) Is Nothing) Then
                MyBase.Tables.Add(New CompanyAssetsDataTable(ds.Tables("CompanyAssets")))
            End If
            If (Not (ds.Tables("AssetByCat")) Is Nothing) Then
                MyBase.Tables.Add(New AssetByCatDataTable(ds.Tables("AssetByCat")))
            End If
            If (Not (ds.Tables("Supplier")) Is Nothing) Then
                MyBase.Tables.Add(New SupplierDataTable(ds.Tables("Supplier")))
            End If
            If (Not (ds.Tables("Depreciation_Method")) Is Nothing) Then
                MyBase.Tables.Add(New Depreciation_MethodDataTable(ds.Tables("Depreciation_Method")))
            End If
            If (Not (ds.Tables("Disposal_Method")) Is Nothing) Then
                MyBase.Tables.Add(New Disposal_MethodDataTable(ds.Tables("Disposal_Method")))
            End If
            If (Not (ds.Tables("Ast_INV_Schedule")) Is Nothing) Then
                MyBase.Tables.Add(New Ast_INV_ScheduleDataTable(ds.Tables("Ast_INV_Schedule")))
            End If
            If (Not (ds.Tables("Insurer")) Is Nothing) Then
                MyBase.Tables.Add(New InsurerDataTable(ds.Tables("Insurer")))
            End If
            If (Not (ds.Tables("Report_AssetbySubCategory")) Is Nothing) Then
                MyBase.Tables.Add(New Report_AssetbySubCategoryDataTable(ds.Tables("Report_AssetbySubCategory")))
            End If
            If (Not (ds.Tables("Brand")) Is Nothing) Then
                MyBase.Tables.Add(New BrandDataTable(ds.Tables("Brand")))
            End If
            If (Not (ds.Tables("AssetsItems")) Is Nothing) Then
                MyBase.Tables.Add(New AssetsItemsDataTable(ds.Tables("AssetsItems")))
            End If
            If (Not (ds.Tables("AssetBooks")) Is Nothing) Then
                MyBase.Tables.Add(New AssetBooksDataTable(ds.Tables("AssetBooks")))
            End If
            If (Not (ds.Tables("Address")) Is Nothing) Then
                MyBase.Tables.Add(New AddressDataTable(ds.Tables("Address")))
            End If
            If (Not (ds.Tables("rptStockIssuance")) Is Nothing) Then
                MyBase.Tables.Add(New rptStockIssuanceDataTable(ds.Tables("rptStockIssuance")))
            End If
            If (Not (ds.Tables("LocationLabel")) Is Nothing) Then
                MyBase.Tables.Add(New LocationLabelDataTable(ds.Tables("LocationLabel")))
            End If
            If (Not (ds.Tables("rpt_AssetsLog")) Is Nothing) Then
                MyBase.Tables.Add(New rpt_AssetsLogDataTable(ds.Tables("rpt_AssetsLog")))
            End If
            If (Not (ds.Tables("CostCenterAuditStatus")) Is Nothing) Then
                MyBase.Tables.Add(New CostCenterAuditStatusDataTable(ds.Tables("CostCenterAuditStatus")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Designation() As DesignationDataTable
        Get
            Return Me.tableDesignation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssetDetail() As AssetDetailDataTable
        Get
            Return Me.tableAssetDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Custodian() As CustodianDataTable
        Get
            Return Me.tableCustodian
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssetsLabel() As AssetsLabelDataTable
        Get
            Return Me.tableAssetsLabel
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssetReg() As AssetRegDataTable
        Get
            Return Me.tableAssetReg
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DepBooks() As DepBooksDataTable
        Get
            Return Me.tableDepBooks
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssetTag() As AssetTagDataTable
        Get
            Return Me.tableAssetTag
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssetLedger() As AssetLedgerDataTable
        Get
            Return Me.tableAssetLedger
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DisposedAssets() As DisposedAssetsDataTable
        Get
            Return Me.tableDisposedAssets
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AuditSatus() As AuditSatusDataTable
        Get
            Return Me.tableAuditSatus
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ItemsInventory() As ItemsInventoryDataTable
        Get
            Return Me.tableItemsInventory
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CompanyAssets() As CompanyAssetsDataTable
        Get
            Return Me.tableCompanyAssets
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssetByCat() As AssetByCatDataTable
        Get
            Return Me.tableAssetByCat
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Supplier() As SupplierDataTable
        Get
            Return Me.tableSupplier
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Depreciation_Method() As Depreciation_MethodDataTable
        Get
            Return Me.tableDepreciation_Method
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Disposal_Method() As Disposal_MethodDataTable
        Get
            Return Me.tableDisposal_Method
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ast_INV_Schedule() As Ast_INV_ScheduleDataTable
        Get
            Return Me.tableAst_INV_Schedule
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Insurer() As InsurerDataTable
        Get
            Return Me.tableInsurer
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Report_AssetbySubCategory() As Report_AssetbySubCategoryDataTable
        Get
            Return Me.tableReport_AssetbySubCategory
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Brand() As BrandDataTable
        Get
            Return Me.tableBrand
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssetsItems() As AssetsItemsDataTable
        Get
            Return Me.tableAssetsItems
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssetBooks() As AssetBooksDataTable
        Get
            Return Me.tableAssetBooks
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Address() As AddressDataTable
        Get
            Return Me.tableAddress
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rptStockIssuance() As rptStockIssuanceDataTable
        Get
            Return Me.tablerptStockIssuance
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LocationLabel() As LocationLabelDataTable
        Get
            Return Me.tableLocationLabel
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rpt_AssetsLog() As rpt_AssetsLogDataTable
        Get
            Return Me.tablerpt_AssetsLog
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CostCenterAuditStatus() As CostCenterAuditStatusDataTable
        Get
            Return Me.tableCostCenterAuditStatus
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ZulAssetsBEDataSet = CType(MyBase.Clone,ZulAssetsBEDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Designation")) Is Nothing) Then
                MyBase.Tables.Add(New DesignationDataTable(ds.Tables("Designation")))
            End If
            If (Not (ds.Tables("AssetDetail")) Is Nothing) Then
                MyBase.Tables.Add(New AssetDetailDataTable(ds.Tables("AssetDetail")))
            End If
            If (Not (ds.Tables("Custodian")) Is Nothing) Then
                MyBase.Tables.Add(New CustodianDataTable(ds.Tables("Custodian")))
            End If
            If (Not (ds.Tables("AssetsLabel")) Is Nothing) Then
                MyBase.Tables.Add(New AssetsLabelDataTable(ds.Tables("AssetsLabel")))
            End If
            If (Not (ds.Tables("AssetReg")) Is Nothing) Then
                MyBase.Tables.Add(New AssetRegDataTable(ds.Tables("AssetReg")))
            End If
            If (Not (ds.Tables("DepBooks")) Is Nothing) Then
                MyBase.Tables.Add(New DepBooksDataTable(ds.Tables("DepBooks")))
            End If
            If (Not (ds.Tables("AssetTag")) Is Nothing) Then
                MyBase.Tables.Add(New AssetTagDataTable(ds.Tables("AssetTag")))
            End If
            If (Not (ds.Tables("AssetLedger")) Is Nothing) Then
                MyBase.Tables.Add(New AssetLedgerDataTable(ds.Tables("AssetLedger")))
            End If
            If (Not (ds.Tables("DisposedAssets")) Is Nothing) Then
                MyBase.Tables.Add(New DisposedAssetsDataTable(ds.Tables("DisposedAssets")))
            End If
            If (Not (ds.Tables("AuditSatus")) Is Nothing) Then
                MyBase.Tables.Add(New AuditSatusDataTable(ds.Tables("AuditSatus")))
            End If
            If (Not (ds.Tables("ItemsInventory")) Is Nothing) Then
                MyBase.Tables.Add(New ItemsInventoryDataTable(ds.Tables("ItemsInventory")))
            End If
            If (Not (ds.Tables("CompanyAssets")) Is Nothing) Then
                MyBase.Tables.Add(New CompanyAssetsDataTable(ds.Tables("CompanyAssets")))
            End If
            If (Not (ds.Tables("AssetByCat")) Is Nothing) Then
                MyBase.Tables.Add(New AssetByCatDataTable(ds.Tables("AssetByCat")))
            End If
            If (Not (ds.Tables("Supplier")) Is Nothing) Then
                MyBase.Tables.Add(New SupplierDataTable(ds.Tables("Supplier")))
            End If
            If (Not (ds.Tables("Depreciation_Method")) Is Nothing) Then
                MyBase.Tables.Add(New Depreciation_MethodDataTable(ds.Tables("Depreciation_Method")))
            End If
            If (Not (ds.Tables("Disposal_Method")) Is Nothing) Then
                MyBase.Tables.Add(New Disposal_MethodDataTable(ds.Tables("Disposal_Method")))
            End If
            If (Not (ds.Tables("Ast_INV_Schedule")) Is Nothing) Then
                MyBase.Tables.Add(New Ast_INV_ScheduleDataTable(ds.Tables("Ast_INV_Schedule")))
            End If
            If (Not (ds.Tables("Insurer")) Is Nothing) Then
                MyBase.Tables.Add(New InsurerDataTable(ds.Tables("Insurer")))
            End If
            If (Not (ds.Tables("Report_AssetbySubCategory")) Is Nothing) Then
                MyBase.Tables.Add(New Report_AssetbySubCategoryDataTable(ds.Tables("Report_AssetbySubCategory")))
            End If
            If (Not (ds.Tables("Brand")) Is Nothing) Then
                MyBase.Tables.Add(New BrandDataTable(ds.Tables("Brand")))
            End If
            If (Not (ds.Tables("AssetsItems")) Is Nothing) Then
                MyBase.Tables.Add(New AssetsItemsDataTable(ds.Tables("AssetsItems")))
            End If
            If (Not (ds.Tables("AssetBooks")) Is Nothing) Then
                MyBase.Tables.Add(New AssetBooksDataTable(ds.Tables("AssetBooks")))
            End If
            If (Not (ds.Tables("Address")) Is Nothing) Then
                MyBase.Tables.Add(New AddressDataTable(ds.Tables("Address")))
            End If
            If (Not (ds.Tables("rptStockIssuance")) Is Nothing) Then
                MyBase.Tables.Add(New rptStockIssuanceDataTable(ds.Tables("rptStockIssuance")))
            End If
            If (Not (ds.Tables("LocationLabel")) Is Nothing) Then
                MyBase.Tables.Add(New LocationLabelDataTable(ds.Tables("LocationLabel")))
            End If
            If (Not (ds.Tables("rpt_AssetsLog")) Is Nothing) Then
                MyBase.Tables.Add(New rpt_AssetsLogDataTable(ds.Tables("rpt_AssetsLog")))
            End If
            If (Not (ds.Tables("CostCenterAuditStatus")) Is Nothing) Then
                MyBase.Tables.Add(New CostCenterAuditStatusDataTable(ds.Tables("CostCenterAuditStatus")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDesignation = CType(MyBase.Tables("Designation"),DesignationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDesignation) Is Nothing) Then
                Me.tableDesignation.InitVars
            End If
        End If
        Me.tableAssetDetail = CType(MyBase.Tables("AssetDetail"),AssetDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssetDetail) Is Nothing) Then
                Me.tableAssetDetail.InitVars
            End If
        End If
        Me.tableCustodian = CType(MyBase.Tables("Custodian"),CustodianDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustodian) Is Nothing) Then
                Me.tableCustodian.InitVars
            End If
        End If
        Me.tableAssetsLabel = CType(MyBase.Tables("AssetsLabel"),AssetsLabelDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssetsLabel) Is Nothing) Then
                Me.tableAssetsLabel.InitVars
            End If
        End If
        Me.tableAssetReg = CType(MyBase.Tables("AssetReg"),AssetRegDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssetReg) Is Nothing) Then
                Me.tableAssetReg.InitVars
            End If
        End If
        Me.tableDepBooks = CType(MyBase.Tables("DepBooks"),DepBooksDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDepBooks) Is Nothing) Then
                Me.tableDepBooks.InitVars
            End If
        End If
        Me.tableAssetTag = CType(MyBase.Tables("AssetTag"),AssetTagDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssetTag) Is Nothing) Then
                Me.tableAssetTag.InitVars
            End If
        End If
        Me.tableAssetLedger = CType(MyBase.Tables("AssetLedger"),AssetLedgerDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssetLedger) Is Nothing) Then
                Me.tableAssetLedger.InitVars
            End If
        End If
        Me.tableDisposedAssets = CType(MyBase.Tables("DisposedAssets"),DisposedAssetsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDisposedAssets) Is Nothing) Then
                Me.tableDisposedAssets.InitVars
            End If
        End If
        Me.tableAuditSatus = CType(MyBase.Tables("AuditSatus"),AuditSatusDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAuditSatus) Is Nothing) Then
                Me.tableAuditSatus.InitVars
            End If
        End If
        Me.tableItemsInventory = CType(MyBase.Tables("ItemsInventory"),ItemsInventoryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableItemsInventory) Is Nothing) Then
                Me.tableItemsInventory.InitVars
            End If
        End If
        Me.tableCompanyAssets = CType(MyBase.Tables("CompanyAssets"),CompanyAssetsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCompanyAssets) Is Nothing) Then
                Me.tableCompanyAssets.InitVars
            End If
        End If
        Me.tableAssetByCat = CType(MyBase.Tables("AssetByCat"),AssetByCatDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssetByCat) Is Nothing) Then
                Me.tableAssetByCat.InitVars
            End If
        End If
        Me.tableSupplier = CType(MyBase.Tables("Supplier"),SupplierDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSupplier) Is Nothing) Then
                Me.tableSupplier.InitVars
            End If
        End If
        Me.tableDepreciation_Method = CType(MyBase.Tables("Depreciation_Method"),Depreciation_MethodDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDepreciation_Method) Is Nothing) Then
                Me.tableDepreciation_Method.InitVars
            End If
        End If
        Me.tableDisposal_Method = CType(MyBase.Tables("Disposal_Method"),Disposal_MethodDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDisposal_Method) Is Nothing) Then
                Me.tableDisposal_Method.InitVars
            End If
        End If
        Me.tableAst_INV_Schedule = CType(MyBase.Tables("Ast_INV_Schedule"),Ast_INV_ScheduleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAst_INV_Schedule) Is Nothing) Then
                Me.tableAst_INV_Schedule.InitVars
            End If
        End If
        Me.tableInsurer = CType(MyBase.Tables("Insurer"),InsurerDataTable)
        If (initTable = true) Then
            If (Not (Me.tableInsurer) Is Nothing) Then
                Me.tableInsurer.InitVars
            End If
        End If
        Me.tableReport_AssetbySubCategory = CType(MyBase.Tables("Report_AssetbySubCategory"),Report_AssetbySubCategoryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReport_AssetbySubCategory) Is Nothing) Then
                Me.tableReport_AssetbySubCategory.InitVars
            End If
        End If
        Me.tableBrand = CType(MyBase.Tables("Brand"),BrandDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBrand) Is Nothing) Then
                Me.tableBrand.InitVars
            End If
        End If
        Me.tableAssetsItems = CType(MyBase.Tables("AssetsItems"),AssetsItemsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssetsItems) Is Nothing) Then
                Me.tableAssetsItems.InitVars
            End If
        End If
        Me.tableAssetBooks = CType(MyBase.Tables("AssetBooks"),AssetBooksDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssetBooks) Is Nothing) Then
                Me.tableAssetBooks.InitVars
            End If
        End If
        Me.tableAddress = CType(MyBase.Tables("Address"),AddressDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAddress) Is Nothing) Then
                Me.tableAddress.InitVars
            End If
        End If
        Me.tablerptStockIssuance = CType(MyBase.Tables("rptStockIssuance"),rptStockIssuanceDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerptStockIssuance) Is Nothing) Then
                Me.tablerptStockIssuance.InitVars
            End If
        End If
        Me.tableLocationLabel = CType(MyBase.Tables("LocationLabel"),LocationLabelDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLocationLabel) Is Nothing) Then
                Me.tableLocationLabel.InitVars
            End If
        End If
        Me.tablerpt_AssetsLog = CType(MyBase.Tables("rpt_AssetsLog"),rpt_AssetsLogDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerpt_AssetsLog) Is Nothing) Then
                Me.tablerpt_AssetsLog.InitVars
            End If
        End If
        Me.tableCostCenterAuditStatus = CType(MyBase.Tables("CostCenterAuditStatus"),CostCenterAuditStatusDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCostCenterAuditStatus) Is Nothing) Then
                Me.tableCostCenterAuditStatus.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ZulAssetsBEDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ZulAssetsBEDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDesignation = New DesignationDataTable
        MyBase.Tables.Add(Me.tableDesignation)
        Me.tableAssetDetail = New AssetDetailDataTable
        MyBase.Tables.Add(Me.tableAssetDetail)
        Me.tableCustodian = New CustodianDataTable
        MyBase.Tables.Add(Me.tableCustodian)
        Me.tableAssetsLabel = New AssetsLabelDataTable
        MyBase.Tables.Add(Me.tableAssetsLabel)
        Me.tableAssetReg = New AssetRegDataTable
        MyBase.Tables.Add(Me.tableAssetReg)
        Me.tableDepBooks = New DepBooksDataTable
        MyBase.Tables.Add(Me.tableDepBooks)
        Me.tableAssetTag = New AssetTagDataTable
        MyBase.Tables.Add(Me.tableAssetTag)
        Me.tableAssetLedger = New AssetLedgerDataTable
        MyBase.Tables.Add(Me.tableAssetLedger)
        Me.tableDisposedAssets = New DisposedAssetsDataTable
        MyBase.Tables.Add(Me.tableDisposedAssets)
        Me.tableAuditSatus = New AuditSatusDataTable
        MyBase.Tables.Add(Me.tableAuditSatus)
        Me.tableItemsInventory = New ItemsInventoryDataTable
        MyBase.Tables.Add(Me.tableItemsInventory)
        Me.tableCompanyAssets = New CompanyAssetsDataTable
        MyBase.Tables.Add(Me.tableCompanyAssets)
        Me.tableAssetByCat = New AssetByCatDataTable
        MyBase.Tables.Add(Me.tableAssetByCat)
        Me.tableSupplier = New SupplierDataTable
        MyBase.Tables.Add(Me.tableSupplier)
        Me.tableDepreciation_Method = New Depreciation_MethodDataTable
        MyBase.Tables.Add(Me.tableDepreciation_Method)
        Me.tableDisposal_Method = New Disposal_MethodDataTable
        MyBase.Tables.Add(Me.tableDisposal_Method)
        Me.tableAst_INV_Schedule = New Ast_INV_ScheduleDataTable
        MyBase.Tables.Add(Me.tableAst_INV_Schedule)
        Me.tableInsurer = New InsurerDataTable
        MyBase.Tables.Add(Me.tableInsurer)
        Me.tableReport_AssetbySubCategory = New Report_AssetbySubCategoryDataTable
        MyBase.Tables.Add(Me.tableReport_AssetbySubCategory)
        Me.tableBrand = New BrandDataTable
        MyBase.Tables.Add(Me.tableBrand)
        Me.tableAssetsItems = New AssetsItemsDataTable
        MyBase.Tables.Add(Me.tableAssetsItems)
        Me.tableAssetBooks = New AssetBooksDataTable
        MyBase.Tables.Add(Me.tableAssetBooks)
        Me.tableAddress = New AddressDataTable
        MyBase.Tables.Add(Me.tableAddress)
        Me.tablerptStockIssuance = New rptStockIssuanceDataTable
        MyBase.Tables.Add(Me.tablerptStockIssuance)
        Me.tableLocationLabel = New LocationLabelDataTable
        MyBase.Tables.Add(Me.tableLocationLabel)
        Me.tablerpt_AssetsLog = New rpt_AssetsLogDataTable
        MyBase.Tables.Add(Me.tablerpt_AssetsLog)
        Me.tableCostCenterAuditStatus = New CostCenterAuditStatusDataTable
        MyBase.Tables.Add(Me.tableCostCenterAuditStatus)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDesignation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssetDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCustodian() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssetsLabel() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssetReg() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDepBooks() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssetTag() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssetLedger() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDisposedAssets() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAuditSatus() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeItemsInventory() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCompanyAssets() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssetByCat() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSupplier() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDepreciation_Method() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDisposal_Method() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAst_INV_Schedule() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeInsurer() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReport_AssetbySubCategory() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBrand() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssetsItems() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssetBooks() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAddress() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerptStockIssuance() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLocationLabel() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerpt_AssetsLog() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCostCenterAuditStatus() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DesignationRowChangeEventHandler(ByVal sender As Object, ByVal e As DesignationRowChangeEvent)
    
    Public Delegate Sub AssetDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As AssetDetailRowChangeEvent)
    
    Public Delegate Sub CustodianRowChangeEventHandler(ByVal sender As Object, ByVal e As CustodianRowChangeEvent)
    
    Public Delegate Sub AssetsLabelRowChangeEventHandler(ByVal sender As Object, ByVal e As AssetsLabelRowChangeEvent)
    
    Public Delegate Sub AssetRegRowChangeEventHandler(ByVal sender As Object, ByVal e As AssetRegRowChangeEvent)
    
    Public Delegate Sub DepBooksRowChangeEventHandler(ByVal sender As Object, ByVal e As DepBooksRowChangeEvent)
    
    Public Delegate Sub AssetTagRowChangeEventHandler(ByVal sender As Object, ByVal e As AssetTagRowChangeEvent)
    
    Public Delegate Sub AssetLedgerRowChangeEventHandler(ByVal sender As Object, ByVal e As AssetLedgerRowChangeEvent)
    
    Public Delegate Sub DisposedAssetsRowChangeEventHandler(ByVal sender As Object, ByVal e As DisposedAssetsRowChangeEvent)
    
    Public Delegate Sub AuditSatusRowChangeEventHandler(ByVal sender As Object, ByVal e As AuditSatusRowChangeEvent)
    
    Public Delegate Sub ItemsInventoryRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemsInventoryRowChangeEvent)
    
    Public Delegate Sub CompanyAssetsRowChangeEventHandler(ByVal sender As Object, ByVal e As CompanyAssetsRowChangeEvent)
    
    Public Delegate Sub AssetByCatRowChangeEventHandler(ByVal sender As Object, ByVal e As AssetByCatRowChangeEvent)
    
    Public Delegate Sub SupplierRowChangeEventHandler(ByVal sender As Object, ByVal e As SupplierRowChangeEvent)
    
    Public Delegate Sub Depreciation_MethodRowChangeEventHandler(ByVal sender As Object, ByVal e As Depreciation_MethodRowChangeEvent)
    
    Public Delegate Sub Disposal_MethodRowChangeEventHandler(ByVal sender As Object, ByVal e As Disposal_MethodRowChangeEvent)
    
    Public Delegate Sub Ast_INV_ScheduleRowChangeEventHandler(ByVal sender As Object, ByVal e As Ast_INV_ScheduleRowChangeEvent)
    
    Public Delegate Sub InsurerRowChangeEventHandler(ByVal sender As Object, ByVal e As InsurerRowChangeEvent)
    
    Public Delegate Sub Report_AssetbySubCategoryRowChangeEventHandler(ByVal sender As Object, ByVal e As Report_AssetbySubCategoryRowChangeEvent)
    
    Public Delegate Sub BrandRowChangeEventHandler(ByVal sender As Object, ByVal e As BrandRowChangeEvent)
    
    Public Delegate Sub AssetsItemsRowChangeEventHandler(ByVal sender As Object, ByVal e As AssetsItemsRowChangeEvent)
    
    Public Delegate Sub AssetBooksRowChangeEventHandler(ByVal sender As Object, ByVal e As AssetBooksRowChangeEvent)
    
    Public Delegate Sub AddressRowChangeEventHandler(ByVal sender As Object, ByVal e As AddressRowChangeEvent)
    
    Public Delegate Sub rptStockIssuanceRowChangeEventHandler(ByVal sender As Object, ByVal e As rptStockIssuanceRowChangeEvent)
    
    Public Delegate Sub LocationLabelRowChangeEventHandler(ByVal sender As Object, ByVal e As LocationLabelRowChangeEvent)
    
    Public Delegate Sub rpt_AssetsLogRowChangeEventHandler(ByVal sender As Object, ByVal e As rpt_AssetsLogRowChangeEvent)
    
    Public Delegate Sub CostCenterAuditStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As CostCenterAuditStatusRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DesignationDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDesignationID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Designation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DesignationIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesignationID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DesignationRow
            Get
                Return CType(Me.Rows(index),DesignationRow)
            End Get
        End Property
        
        Public Event DesignationRowChanging As DesignationRowChangeEventHandler
        
        Public Event DesignationRowChanged As DesignationRowChangeEventHandler
        
        Public Event DesignationRowDeleting As DesignationRowChangeEventHandler
        
        Public Event DesignationRowDeleted As DesignationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDesignationRow(ByVal row As DesignationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDesignationRow(ByVal DesignationID As Integer, ByVal Description As String) As DesignationRow
            Dim rowDesignationRow As DesignationRow = CType(Me.NewRow,DesignationRow)
            Dim columnValuesArray() As Object = New Object() {DesignationID, Description}
            rowDesignationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDesignationRow)
            Return rowDesignationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDesignationID(ByVal DesignationID As Integer) As DesignationRow
            Return CType(Me.Rows.Find(New Object() {DesignationID}),DesignationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DesignationDataTable = CType(MyBase.Clone,DesignationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DesignationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDesignationID = MyBase.Columns("DesignationID")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDesignationID = New Global.System.Data.DataColumn("DesignationID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesignationID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDesignationID}, true))
            Me.columnDesignationID.AllowDBNull = false
            Me.columnDesignationID.Unique = true
            Me.columnDescription.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDesignationRow() As DesignationRow
            Return CType(Me.NewRow,DesignationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DesignationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DesignationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DesignationRowChangedEvent) Is Nothing) Then
                RaiseEvent DesignationRowChanged(Me, New DesignationRowChangeEvent(CType(e.Row,DesignationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DesignationRowChangingEvent) Is Nothing) Then
                RaiseEvent DesignationRowChanging(Me, New DesignationRowChangeEvent(CType(e.Row,DesignationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DesignationRowDeletedEvent) Is Nothing) Then
                RaiseEvent DesignationRowDeleted(Me, New DesignationRowChangeEvent(CType(e.Row,DesignationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DesignationRowDeletingEvent) Is Nothing) Then
                RaiseEvent DesignationRowDeleting(Me, New DesignationRowChangeEvent(CType(e.Row,DesignationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDesignationRow(ByVal row As DesignationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DesignationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssetDetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAstNum As Global.System.Data.DataColumn
        
        Private columnitemcode As Global.System.Data.DataColumn
        
        Private columnAstDesc As Global.System.Data.DataColumn
        
        Private columnAstID As Global.System.Data.DataColumn
        
        Private columnLocDesc As Global.System.Data.DataColumn
        
        Private columnCustodianName As Global.System.Data.DataColumn
        
        Private columnLocID As Global.System.Data.DataColumn
        
        Private columnAstCatID As Global.System.Data.DataColumn
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnAstBrandName As Global.System.Data.DataColumn
        
        Private columnCompanyName As Global.System.Data.DataColumn
        
        Private columnCompanyID As Global.System.Data.DataColumn
        
        Private columnAstModel As Global.System.Data.DataColumn
        
        Private columnInsName As Global.System.Data.DataColumn
        
        Private columnAstCatDesc As Global.System.Data.DataColumn
        
        Private columnSuppName As Global.System.Data.DataColumn
        
        Private columnTransRemarks As Global.System.Data.DataColumn
        
        Private columnBaseCost As Global.System.Data.DataColumn
        
        Private columnTax As Global.System.Data.DataColumn
        
        Private columnSrvDate As Global.System.Data.DataColumn
        
        Private columnRefNo As Global.System.Data.DataColumn
        
        Private columnPurDate As Global.System.Data.DataColumn
        
        Private columnAssetdetailsdesc1 As Global.System.Data.DataColumn
        
        Private columnAssetdetailsdesc2 As Global.System.Data.DataColumn
        
        Private columnSerailNo As Global.System.Data.DataColumn
        
        Private columnCustodianCode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssetDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstBrandNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstBrandName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransRemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrvDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrvDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Assetdetailsdesc1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetdetailsdesc1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Assetdetailsdesc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetdetailsdesc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerailNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerailNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssetDetailRow
            Get
                Return CType(Me.Rows(index),AssetDetailRow)
            End Get
        End Property
        
        Public Event AssetDetailRowChanging As AssetDetailRowChangeEventHandler
        
        Public Event AssetDetailRowChanged As AssetDetailRowChangeEventHandler
        
        Public Event AssetDetailRowDeleting As AssetDetailRowChangeEventHandler
        
        Public Event AssetDetailRowDeleted As AssetDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssetDetailRow(ByVal row As AssetDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssetDetailRow( _
                    ByVal AstNum As Long,  _
                    ByVal itemcode As Long,  _
                    ByVal AstDesc As String,  _
                    ByVal AstID As String,  _
                    ByVal LocDesc As String,  _
                    ByVal CustodianName As String,  _
                    ByVal LocID As String,  _
                    ByVal AstCatID As String,  _
                    ByVal CustodianID As String,  _
                    ByVal AstBrandName As String,  _
                    ByVal CompanyName As String,  _
                    ByVal CompanyID As Integer,  _
                    ByVal AstModel As String,  _
                    ByVal InsName As String,  _
                    ByVal AstCatDesc As String,  _
                    ByVal SuppName As String,  _
                    ByVal TransRemarks As String,  _
                    ByVal BaseCost As Double,  _
                    ByVal Tax As Double,  _
                    ByVal SrvDate As Date,  _
                    ByVal RefNo As String,  _
                    ByVal PurDate As Date,  _
                    ByVal Assetdetailsdesc1 As String,  _
                    ByVal Assetdetailsdesc2 As String,  _
                    ByVal SerailNo As String,  _
                    ByVal CustodianCode As String) As AssetDetailRow
            Dim rowAssetDetailRow As AssetDetailRow = CType(Me.NewRow,AssetDetailRow)
            Dim columnValuesArray() As Object = New Object() {AstNum, itemcode, AstDesc, AstID, LocDesc, CustodianName, LocID, AstCatID, CustodianID, AstBrandName, CompanyName, CompanyID, AstModel, InsName, AstCatDesc, SuppName, TransRemarks, BaseCost, Tax, SrvDate, RefNo, PurDate, Assetdetailsdesc1, Assetdetailsdesc2, SerailNo, CustodianCode}
            rowAssetDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAssetDetailRow)
            Return rowAssetDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAstID(ByVal AstID As String) As AssetDetailRow
            Return CType(Me.Rows.Find(New Object() {AstID}),AssetDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AssetDetailDataTable = CType(MyBase.Clone,AssetDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AssetDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAstNum = MyBase.Columns("AstNum")
            Me.columnitemcode = MyBase.Columns("itemcode")
            Me.columnAstDesc = MyBase.Columns("AstDesc")
            Me.columnAstID = MyBase.Columns("AstID")
            Me.columnLocDesc = MyBase.Columns("LocDesc")
            Me.columnCustodianName = MyBase.Columns("CustodianName")
            Me.columnLocID = MyBase.Columns("LocID")
            Me.columnAstCatID = MyBase.Columns("AstCatID")
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnAstBrandName = MyBase.Columns("AstBrandName")
            Me.columnCompanyName = MyBase.Columns("CompanyName")
            Me.columnCompanyID = MyBase.Columns("CompanyID")
            Me.columnAstModel = MyBase.Columns("AstModel")
            Me.columnInsName = MyBase.Columns("InsName")
            Me.columnAstCatDesc = MyBase.Columns("AstCatDesc")
            Me.columnSuppName = MyBase.Columns("SuppName")
            Me.columnTransRemarks = MyBase.Columns("TransRemarks")
            Me.columnBaseCost = MyBase.Columns("BaseCost")
            Me.columnTax = MyBase.Columns("Tax")
            Me.columnSrvDate = MyBase.Columns("SrvDate")
            Me.columnRefNo = MyBase.Columns("RefNo")
            Me.columnPurDate = MyBase.Columns("PurDate")
            Me.columnAssetdetailsdesc1 = MyBase.Columns("Assetdetailsdesc1")
            Me.columnAssetdetailsdesc2 = MyBase.Columns("Assetdetailsdesc2")
            Me.columnSerailNo = MyBase.Columns("SerailNo")
            Me.columnCustodianCode = MyBase.Columns("CustodianCode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAstNum = New Global.System.Data.DataColumn("AstNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstNum)
            Me.columnitemcode = New Global.System.Data.DataColumn("itemcode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemcode)
            Me.columnAstDesc = New Global.System.Data.DataColumn("AstDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc)
            Me.columnAstID = New Global.System.Data.DataColumn("AstID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstID)
            Me.columnLocDesc = New Global.System.Data.DataColumn("LocDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocDesc)
            Me.columnCustodianName = New Global.System.Data.DataColumn("CustodianName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianName)
            Me.columnLocID = New Global.System.Data.DataColumn("LocID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocID)
            Me.columnAstCatID = New Global.System.Data.DataColumn("AstCatID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatID)
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnAstBrandName = New Global.System.Data.DataColumn("AstBrandName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstBrandName)
            Me.columnCompanyName = New Global.System.Data.DataColumn("CompanyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyName)
            Me.columnCompanyID = New Global.System.Data.DataColumn("CompanyID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyID)
            Me.columnAstModel = New Global.System.Data.DataColumn("AstModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstModel)
            Me.columnInsName = New Global.System.Data.DataColumn("InsName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsName)
            Me.columnAstCatDesc = New Global.System.Data.DataColumn("AstCatDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatDesc)
            Me.columnSuppName = New Global.System.Data.DataColumn("SuppName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppName)
            Me.columnTransRemarks = New Global.System.Data.DataColumn("TransRemarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransRemarks)
            Me.columnBaseCost = New Global.System.Data.DataColumn("BaseCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseCost)
            Me.columnTax = New Global.System.Data.DataColumn("Tax", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax)
            Me.columnSrvDate = New Global.System.Data.DataColumn("SrvDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrvDate)
            Me.columnRefNo = New Global.System.Data.DataColumn("RefNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefNo)
            Me.columnPurDate = New Global.System.Data.DataColumn("PurDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurDate)
            Me.columnAssetdetailsdesc1 = New Global.System.Data.DataColumn("Assetdetailsdesc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetdetailsdesc1)
            Me.columnAssetdetailsdesc2 = New Global.System.Data.DataColumn("Assetdetailsdesc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetdetailsdesc2)
            Me.columnSerailNo = New Global.System.Data.DataColumn("SerailNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerailNo)
            Me.columnCustodianCode = New Global.System.Data.DataColumn("CustodianCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianCode)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAstID}, true))
            Me.columnAstNum.AllowDBNull = false
            Me.columnitemcode.ReadOnly = true
            Me.columnAstDesc.MaxLength = 100
            Me.columnAstID.AllowDBNull = false
            Me.columnAstID.Unique = true
            Me.columnAstID.MaxLength = 25
            Me.columnLocDesc.MaxLength = 100
            Me.columnCustodianName.MaxLength = 100
            Me.columnLocID.MaxLength = 255
            Me.columnAstCatID.MaxLength = 25
            Me.columnCustodianID.MaxLength = 25
            Me.columnAstBrandName.MaxLength = 100
            Me.columnCompanyName.MaxLength = 50
            Me.columnAstModel.MaxLength = 50
            Me.columnInsName.MaxLength = 25
            Me.columnAstCatDesc.MaxLength = 100
            Me.columnSuppName.MaxLength = 100
            Me.columnTransRemarks.MaxLength = 200
            Me.columnRefNo.MaxLength = 50
            Me.columnAssetdetailsdesc1.MaxLength = 200
            Me.columnAssetdetailsdesc2.MaxLength = 200
            Me.columnSerailNo.MaxLength = 50
            Me.columnCustodianCode.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssetDetailRow() As AssetDetailRow
            Return CType(Me.NewRow,AssetDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AssetDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AssetDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssetDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent AssetDetailRowChanged(Me, New AssetDetailRowChangeEvent(CType(e.Row,AssetDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssetDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent AssetDetailRowChanging(Me, New AssetDetailRowChangeEvent(CType(e.Row,AssetDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssetDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssetDetailRowDeleted(Me, New AssetDetailRowChangeEvent(CType(e.Row,AssetDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssetDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssetDetailRowDeleting(Me, New AssetDetailRowChangeEvent(CType(e.Row,AssetDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssetDetailRow(ByVal row As AssetDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssetDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustodianDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnCustodianName As Global.System.Data.DataColumn
        
        Private columnDesignationID As Global.System.Data.DataColumn
        
        Private columnCustodianPhone As Global.System.Data.DataColumn
        
        Private columnCustodianEmail As Global.System.Data.DataColumn
        
        Private columnCustodianFax As Global.System.Data.DataColumn
        
        Private columnCustodianCell As Global.System.Data.DataColumn
        
        Private columnCustodianAddress As Global.System.Data.DataColumn
        
        Private columnIsDeleted As Global.System.Data.DataColumn
        
        Private columnDeptId As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Custodian"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DesignationIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesignationID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianFaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianCellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianCell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeptIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeptId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustodianRow
            Get
                Return CType(Me.Rows(index),CustodianRow)
            End Get
        End Property
        
        Public Event CustodianRowChanging As CustodianRowChangeEventHandler
        
        Public Event CustodianRowChanged As CustodianRowChangeEventHandler
        
        Public Event CustodianRowDeleting As CustodianRowChangeEventHandler
        
        Public Event CustodianRowDeleted As CustodianRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCustodianRow(ByVal row As CustodianRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCustodianRow(ByVal CustodianID As String, ByVal CustodianName As String, ByVal DesignationID As Integer, ByVal CustodianPhone As String, ByVal CustodianEmail As String, ByVal CustodianFax As String, ByVal CustodianCell As String, ByVal CustodianAddress As String, ByVal IsDeleted As Boolean, ByVal DeptId As String, ByVal Description As String) As CustodianRow
            Dim rowCustodianRow As CustodianRow = CType(Me.NewRow,CustodianRow)
            Dim columnValuesArray() As Object = New Object() {CustodianID, CustodianName, DesignationID, CustodianPhone, CustodianEmail, CustodianFax, CustodianCell, CustodianAddress, IsDeleted, DeptId, Description}
            rowCustodianRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCustodianRow)
            Return rowCustodianRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCustodianID(ByVal CustodianID As String) As CustodianRow
            Return CType(Me.Rows.Find(New Object() {CustodianID}),CustodianRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CustodianDataTable = CType(MyBase.Clone,CustodianDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CustodianDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnCustodianName = MyBase.Columns("CustodianName")
            Me.columnDesignationID = MyBase.Columns("DesignationID")
            Me.columnCustodianPhone = MyBase.Columns("CustodianPhone")
            Me.columnCustodianEmail = MyBase.Columns("CustodianEmail")
            Me.columnCustodianFax = MyBase.Columns("CustodianFax")
            Me.columnCustodianCell = MyBase.Columns("CustodianCell")
            Me.columnCustodianAddress = MyBase.Columns("CustodianAddress")
            Me.columnIsDeleted = MyBase.Columns("IsDeleted")
            Me.columnDeptId = MyBase.Columns("DeptId")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnCustodianName = New Global.System.Data.DataColumn("CustodianName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianName)
            Me.columnDesignationID = New Global.System.Data.DataColumn("DesignationID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesignationID)
            Me.columnCustodianPhone = New Global.System.Data.DataColumn("CustodianPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianPhone)
            Me.columnCustodianEmail = New Global.System.Data.DataColumn("CustodianEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianEmail)
            Me.columnCustodianFax = New Global.System.Data.DataColumn("CustodianFax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianFax)
            Me.columnCustodianCell = New Global.System.Data.DataColumn("CustodianCell", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianCell)
            Me.columnCustodianAddress = New Global.System.Data.DataColumn("CustodianAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianAddress)
            Me.columnIsDeleted = New Global.System.Data.DataColumn("IsDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDeleted)
            Me.columnDeptId = New Global.System.Data.DataColumn("DeptId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeptId)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCustodianID}, true))
            Me.columnCustodianID.AllowDBNull = false
            Me.columnCustodianID.Unique = true
            Me.columnCustodianID.MaxLength = 25
            Me.columnCustodianName.MaxLength = 100
            Me.columnCustodianPhone.MaxLength = 50
            Me.columnCustodianEmail.MaxLength = 50
            Me.columnCustodianFax.MaxLength = 50
            Me.columnCustodianCell.MaxLength = 50
            Me.columnCustodianAddress.MaxLength = 100
            Me.columnDeptId.MaxLength = 50
            Me.columnDescription.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCustodianRow() As CustodianRow
            Return CType(Me.NewRow,CustodianRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CustodianRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CustodianRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustodianRowChangedEvent) Is Nothing) Then
                RaiseEvent CustodianRowChanged(Me, New CustodianRowChangeEvent(CType(e.Row,CustodianRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustodianRowChangingEvent) Is Nothing) Then
                RaiseEvent CustodianRowChanging(Me, New CustodianRowChangeEvent(CType(e.Row,CustodianRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustodianRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustodianRowDeleted(Me, New CustodianRowChangeEvent(CType(e.Row,CustodianRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustodianRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustodianRowDeleting(Me, New CustodianRowChangeEvent(CType(e.Row,CustodianRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCustodianRow(ByVal row As CustodianRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustodianDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssetsLabelDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAstNum As Global.System.Data.DataColumn
        
        Private columnitemcode As Global.System.Data.DataColumn
        
        Private columnAstDesc As Global.System.Data.DataColumn
        
        Private columnAstID As Global.System.Data.DataColumn
        
        Private columnLocDesc As Global.System.Data.DataColumn
        
        Private columnCustodianName As Global.System.Data.DataColumn
        
        Private columnLocID As Global.System.Data.DataColumn
        
        Private columnAstCatID As Global.System.Data.DataColumn
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnAstBrandName As Global.System.Data.DataColumn
        
        Private columnCompanyName As Global.System.Data.DataColumn
        
        Private columnBarCode As Global.System.Data.DataColumn
        
        Private columnRefno As Global.System.Data.DataColumn
        
        Private columnCompanyID As Global.System.Data.DataColumn
        
        Private columnPurdate As Global.System.Data.DataColumn
        
        Private columnAstModel As Global.System.Data.DataColumn
        
        Private columnInsName As Global.System.Data.DataColumn
        
        Private columnAstCatDesc As Global.System.Data.DataColumn
        
        Private columnSuppName As Global.System.Data.DataColumn
        
        Private columnTransRemarks As Global.System.Data.DataColumn
        
        Private columnBaseCost As Global.System.Data.DataColumn
        
        Private columnTax As Global.System.Data.DataColumn
        
        Private columnSrvDate As Global.System.Data.DataColumn
        
        Private columnInsID As Global.System.Data.DataColumn
        
        Private columnInvNumber As Global.System.Data.DataColumn
        
        Private columnAstBrandID As Global.System.Data.DataColumn
        
        Private columnPOCode As Global.System.Data.DataColumn
        
        Private columnSuppID As Global.System.Data.DataColumn
        
        Private columnDisposed As Global.System.Data.DataColumn
        
        Private columnDiscount As Global.System.Data.DataColumn
        
        Private columnBarcode1 As Global.System.Data.DataColumn
        
        Private columnSerailNo As Global.System.Data.DataColumn
        
        Private columnRefCode As Global.System.Data.DataColumn
        
        Private columnPlate As Global.System.Data.DataColumn
        
        Private columnPoerp As Global.System.Data.DataColumn
        
        Private columnCapex As Global.System.Data.DataColumn
        
        Private columnGrn As Global.System.Data.DataColumn
        
        Private columnNoPiece As Global.System.Data.DataColumn
        
        Private columnGLCode As Global.System.Data.DataColumn
        
        Private columnPONumber As Global.System.Data.DataColumn
        
        Private columnLabelCount As Global.System.Data.DataColumn
        
        Private columnAssetdetailsdesc1 As Global.System.Data.DataColumn
        
        Private columnAssetdetailsdesc2 As Global.System.Data.DataColumn
        
        Private columnCatFullPath As Global.System.Data.DataColumn
        
        Private columnLocationFullPath As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnLocationCode As Global.System.Data.DataColumn
        
        Private columnLocationCompCode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssetsLabel"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstBrandNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstBrandName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransRemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrvDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrvDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstBrandIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstBrandID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisposedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisposed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Barcode1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerailNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerailNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PoerpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoerp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoPieceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoPiece
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabelCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabelCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Assetdetailsdesc1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetdetailsdesc1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Assetdetailsdesc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetdetailsdesc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCatFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationCompCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationCompCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssetsLabelRow
            Get
                Return CType(Me.Rows(index),AssetsLabelRow)
            End Get
        End Property
        
        Public Event AssetsLabelRowChanging As AssetsLabelRowChangeEventHandler
        
        Public Event AssetsLabelRowChanged As AssetsLabelRowChangeEventHandler
        
        Public Event AssetsLabelRowDeleting As AssetsLabelRowChangeEventHandler
        
        Public Event AssetsLabelRowDeleted As AssetsLabelRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssetsLabelRow(ByVal row As AssetsLabelRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssetsLabelRow( _
                    ByVal AstNum As Long,  _
                    ByVal itemcode As Long,  _
                    ByVal AstDesc As String,  _
                    ByVal AstID As String,  _
                    ByVal LocDesc As String,  _
                    ByVal CustodianName As String,  _
                    ByVal LocID As String,  _
                    ByVal AstCatID As String,  _
                    ByVal CustodianID As String,  _
                    ByVal AstBrandName As String,  _
                    ByVal CompanyName As String,  _
                    ByVal BarCode As String,  _
                    ByVal Refno As String,  _
                    ByVal CompanyID As Integer,  _
                    ByVal Purdate As Date,  _
                    ByVal AstModel As String,  _
                    ByVal InsName As String,  _
                    ByVal AstCatDesc As String,  _
                    ByVal SuppName As String,  _
                    ByVal TransRemarks As String,  _
                    ByVal BaseCost As Double,  _
                    ByVal Tax As Double,  _
                    ByVal SrvDate As Date,  _
                    ByVal InsID As Integer,  _
                    ByVal InvNumber As String,  _
                    ByVal AstBrandID As Integer,  _
                    ByVal POCode As Long,  _
                    ByVal SuppID As String,  _
                    ByVal Disposed As Boolean,  _
                    ByVal Discount As Long,  _
                    ByVal Barcode1 As String,  _
                    ByVal SerailNo As String,  _
                    ByVal RefCode As String,  _
                    ByVal Plate As String,  _
                    ByVal Poerp As String,  _
                    ByVal Capex As String,  _
                    ByVal Grn As String,  _
                    ByVal NoPiece As Integer,  _
                    ByVal GLCode As Long,  _
                    ByVal PONumber As String,  _
                    ByVal LabelCount As Integer,  _
                    ByVal Assetdetailsdesc1 As String,  _
                    ByVal Assetdetailsdesc2 As String,  _
                    ByVal CatFullPath As String,  _
                    ByVal LocationFullPath As String,  _
                    ByVal Status As String,  _
                    ByVal LocationCode As String,  _
                    ByVal LocationCompCode As String) As AssetsLabelRow
            Dim rowAssetsLabelRow As AssetsLabelRow = CType(Me.NewRow,AssetsLabelRow)
            Dim columnValuesArray() As Object = New Object() {AstNum, itemcode, AstDesc, AstID, LocDesc, CustodianName, LocID, AstCatID, CustodianID, AstBrandName, CompanyName, BarCode, Refno, CompanyID, Purdate, AstModel, InsName, AstCatDesc, SuppName, TransRemarks, BaseCost, Tax, SrvDate, InsID, InvNumber, AstBrandID, POCode, SuppID, Disposed, Discount, Barcode1, SerailNo, RefCode, Plate, Poerp, Capex, Grn, NoPiece, GLCode, PONumber, LabelCount, Assetdetailsdesc1, Assetdetailsdesc2, CatFullPath, LocationFullPath, Status, LocationCode, LocationCompCode}
            rowAssetsLabelRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAssetsLabelRow)
            Return rowAssetsLabelRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAstID(ByVal AstID As String) As AssetsLabelRow
            Return CType(Me.Rows.Find(New Object() {AstID}),AssetsLabelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AssetsLabelDataTable = CType(MyBase.Clone,AssetsLabelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AssetsLabelDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAstNum = MyBase.Columns("AstNum")
            Me.columnitemcode = MyBase.Columns("itemcode")
            Me.columnAstDesc = MyBase.Columns("AstDesc")
            Me.columnAstID = MyBase.Columns("AstID")
            Me.columnLocDesc = MyBase.Columns("LocDesc")
            Me.columnCustodianName = MyBase.Columns("CustodianName")
            Me.columnLocID = MyBase.Columns("LocID")
            Me.columnAstCatID = MyBase.Columns("AstCatID")
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnAstBrandName = MyBase.Columns("AstBrandName")
            Me.columnCompanyName = MyBase.Columns("CompanyName")
            Me.columnBarCode = MyBase.Columns("BarCode")
            Me.columnRefno = MyBase.Columns("Refno")
            Me.columnCompanyID = MyBase.Columns("CompanyID")
            Me.columnPurdate = MyBase.Columns("Purdate")
            Me.columnAstModel = MyBase.Columns("AstModel")
            Me.columnInsName = MyBase.Columns("InsName")
            Me.columnAstCatDesc = MyBase.Columns("AstCatDesc")
            Me.columnSuppName = MyBase.Columns("SuppName")
            Me.columnTransRemarks = MyBase.Columns("TransRemarks")
            Me.columnBaseCost = MyBase.Columns("BaseCost")
            Me.columnTax = MyBase.Columns("Tax")
            Me.columnSrvDate = MyBase.Columns("SrvDate")
            Me.columnInsID = MyBase.Columns("InsID")
            Me.columnInvNumber = MyBase.Columns("InvNumber")
            Me.columnAstBrandID = MyBase.Columns("AstBrandID")
            Me.columnPOCode = MyBase.Columns("POCode")
            Me.columnSuppID = MyBase.Columns("SuppID")
            Me.columnDisposed = MyBase.Columns("Disposed")
            Me.columnDiscount = MyBase.Columns("Discount")
            Me.columnBarcode1 = MyBase.Columns("Barcode1")
            Me.columnSerailNo = MyBase.Columns("SerailNo")
            Me.columnRefCode = MyBase.Columns("RefCode")
            Me.columnPlate = MyBase.Columns("Plate")
            Me.columnPoerp = MyBase.Columns("Poerp")
            Me.columnCapex = MyBase.Columns("Capex")
            Me.columnGrn = MyBase.Columns("Grn")
            Me.columnNoPiece = MyBase.Columns("NoPiece")
            Me.columnGLCode = MyBase.Columns("GLCode")
            Me.columnPONumber = MyBase.Columns("PONumber")
            Me.columnLabelCount = MyBase.Columns("LabelCount")
            Me.columnAssetdetailsdesc1 = MyBase.Columns("Assetdetailsdesc1")
            Me.columnAssetdetailsdesc2 = MyBase.Columns("Assetdetailsdesc2")
            Me.columnCatFullPath = MyBase.Columns("CatFullPath")
            Me.columnLocationFullPath = MyBase.Columns("LocationFullPath")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnLocationCode = MyBase.Columns("LocationCode")
            Me.columnLocationCompCode = MyBase.Columns("LocationCompCode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAstNum = New Global.System.Data.DataColumn("AstNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstNum)
            Me.columnitemcode = New Global.System.Data.DataColumn("itemcode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemcode)
            Me.columnAstDesc = New Global.System.Data.DataColumn("AstDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc)
            Me.columnAstID = New Global.System.Data.DataColumn("AstID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstID)
            Me.columnLocDesc = New Global.System.Data.DataColumn("LocDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocDesc)
            Me.columnCustodianName = New Global.System.Data.DataColumn("CustodianName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianName)
            Me.columnLocID = New Global.System.Data.DataColumn("LocID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocID)
            Me.columnAstCatID = New Global.System.Data.DataColumn("AstCatID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatID)
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnAstBrandName = New Global.System.Data.DataColumn("AstBrandName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstBrandName)
            Me.columnCompanyName = New Global.System.Data.DataColumn("CompanyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyName)
            Me.columnBarCode = New Global.System.Data.DataColumn("BarCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarCode)
            Me.columnRefno = New Global.System.Data.DataColumn("Refno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefno)
            Me.columnCompanyID = New Global.System.Data.DataColumn("CompanyID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyID)
            Me.columnPurdate = New Global.System.Data.DataColumn("Purdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurdate)
            Me.columnAstModel = New Global.System.Data.DataColumn("AstModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstModel)
            Me.columnInsName = New Global.System.Data.DataColumn("InsName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsName)
            Me.columnAstCatDesc = New Global.System.Data.DataColumn("AstCatDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatDesc)
            Me.columnSuppName = New Global.System.Data.DataColumn("SuppName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppName)
            Me.columnTransRemarks = New Global.System.Data.DataColumn("TransRemarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransRemarks)
            Me.columnBaseCost = New Global.System.Data.DataColumn("BaseCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseCost)
            Me.columnTax = New Global.System.Data.DataColumn("Tax", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax)
            Me.columnSrvDate = New Global.System.Data.DataColumn("SrvDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrvDate)
            Me.columnInsID = New Global.System.Data.DataColumn("InsID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsID)
            Me.columnInvNumber = New Global.System.Data.DataColumn("InvNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvNumber)
            Me.columnAstBrandID = New Global.System.Data.DataColumn("AstBrandID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstBrandID)
            Me.columnPOCode = New Global.System.Data.DataColumn("POCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOCode)
            Me.columnSuppID = New Global.System.Data.DataColumn("SuppID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppID)
            Me.columnDisposed = New Global.System.Data.DataColumn("Disposed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisposed)
            Me.columnDiscount = New Global.System.Data.DataColumn("Discount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscount)
            Me.columnBarcode1 = New Global.System.Data.DataColumn("Barcode1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode1)
            Me.columnSerailNo = New Global.System.Data.DataColumn("SerailNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerailNo)
            Me.columnRefCode = New Global.System.Data.DataColumn("RefCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefCode)
            Me.columnPlate = New Global.System.Data.DataColumn("Plate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlate)
            Me.columnPoerp = New Global.System.Data.DataColumn("Poerp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoerp)
            Me.columnCapex = New Global.System.Data.DataColumn("Capex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapex)
            Me.columnGrn = New Global.System.Data.DataColumn("Grn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrn)
            Me.columnNoPiece = New Global.System.Data.DataColumn("NoPiece", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoPiece)
            Me.columnGLCode = New Global.System.Data.DataColumn("GLCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLCode)
            Me.columnPONumber = New Global.System.Data.DataColumn("PONumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONumber)
            Me.columnLabelCount = New Global.System.Data.DataColumn("LabelCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabelCount)
            Me.columnAssetdetailsdesc1 = New Global.System.Data.DataColumn("Assetdetailsdesc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetdetailsdesc1)
            Me.columnAssetdetailsdesc2 = New Global.System.Data.DataColumn("Assetdetailsdesc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetdetailsdesc2)
            Me.columnCatFullPath = New Global.System.Data.DataColumn("CatFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCatFullPath)
            Me.columnLocationFullPath = New Global.System.Data.DataColumn("LocationFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationFullPath)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnLocationCode = New Global.System.Data.DataColumn("LocationCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationCode)
            Me.columnLocationCompCode = New Global.System.Data.DataColumn("LocationCompCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationCompCode)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAstID}, true))
            Me.columnAstNum.AllowDBNull = false
            Me.columnitemcode.ReadOnly = true
            Me.columnAstDesc.MaxLength = 100
            Me.columnAstID.AllowDBNull = false
            Me.columnAstID.Unique = true
            Me.columnAstID.MaxLength = 25
            Me.columnLocDesc.MaxLength = 100
            Me.columnCustodianName.MaxLength = 100
            Me.columnLocID.MaxLength = 255
            Me.columnAstCatID.MaxLength = 25
            Me.columnCustodianID.MaxLength = 25
            Me.columnAstBrandName.MaxLength = 100
            Me.columnCompanyName.MaxLength = 50
            Me.columnBarCode.MaxLength = 50
            Me.columnRefno.MaxLength = 50
            Me.columnAstModel.MaxLength = 50
            Me.columnInsName.MaxLength = 25
            Me.columnAstCatDesc.MaxLength = 100
            Me.columnSuppName.MaxLength = 100
            Me.columnTransRemarks.MaxLength = 200
            Me.columnInvNumber.MaxLength = 25
            Me.columnSuppID.MaxLength = 25
            Me.columnBarcode1.MaxLength = 50
            Me.columnSerailNo.MaxLength = 50
            Me.columnRefCode.MaxLength = 50
            Me.columnPlate.MaxLength = 50
            Me.columnPoerp.MaxLength = 50
            Me.columnCapex.MaxLength = 50
            Me.columnGrn.MaxLength = 50
            Me.columnPONumber.MaxLength = 50
            Me.columnAssetdetailsdesc1.MaxLength = 200
            Me.columnAssetdetailsdesc2.MaxLength = 200
            Me.columnCatFullPath.MaxLength = 1073741823
            Me.columnLocationFullPath.MaxLength = 1073741823
            Me.columnStatus.MaxLength = 50
            Me.columnLocationCode.MaxLength = 100
            Me.columnLocationCompCode.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssetsLabelRow() As AssetsLabelRow
            Return CType(Me.NewRow,AssetsLabelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AssetsLabelRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AssetsLabelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssetsLabelRowChangedEvent) Is Nothing) Then
                RaiseEvent AssetsLabelRowChanged(Me, New AssetsLabelRowChangeEvent(CType(e.Row,AssetsLabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssetsLabelRowChangingEvent) Is Nothing) Then
                RaiseEvent AssetsLabelRowChanging(Me, New AssetsLabelRowChangeEvent(CType(e.Row,AssetsLabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssetsLabelRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssetsLabelRowDeleted(Me, New AssetsLabelRowChangeEvent(CType(e.Row,AssetsLabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssetsLabelRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssetsLabelRowDeleting(Me, New AssetsLabelRowChangeEvent(CType(e.Row,AssetsLabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssetsLabelRow(ByVal row As AssetsLabelRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssetsLabelDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssetRegDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCustodianName As Global.System.Data.DataColumn
        
        Private columnAstNum As Global.System.Data.DataColumn
        
        Private columnAstID As Global.System.Data.DataColumn
        
        Private columnPurDate As Global.System.Data.DataColumn
        
        Private columnOracleRef As Global.System.Data.DataColumn
        
        Private columnCompRef As Global.System.Data.DataColumn
        
        Private columnAstCat1 As Global.System.Data.DataColumn
        
        Private columnAstCat2 As Global.System.Data.DataColumn
        
        Private columnAstCat3 As Global.System.Data.DataColumn
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnCost As Global.System.Data.DataColumn
        
        Private columnCCDepart As Global.System.Data.DataColumn
        
        Private columnCCSection As Global.System.Data.DataColumn
        
        Private columnCCLocation As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssetReg"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OracleRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOracleRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCat1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCat1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCat2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCat2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCat3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCat3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCDepartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCDepart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCSectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssetRegRow
            Get
                Return CType(Me.Rows(index),AssetRegRow)
            End Get
        End Property
        
        Public Event AssetRegRowChanging As AssetRegRowChangeEventHandler
        
        Public Event AssetRegRowChanged As AssetRegRowChangeEventHandler
        
        Public Event AssetRegRowDeleting As AssetRegRowChangeEventHandler
        
        Public Event AssetRegRowDeleted As AssetRegRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssetRegRow(ByVal row As AssetRegRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssetRegRow(ByVal CustodianName As String, ByVal AstNum As String, ByVal AstID As String, ByVal PurDate As Date, ByVal OracleRef As String, ByVal CompRef As String, ByVal AstCat1 As String, ByVal AstCat2 As String, ByVal AstCat3 As String, ByVal CustodianID As String, ByVal Cost As Double, ByVal CCDepart As String, ByVal CCSection As String, ByVal CCLocation As String) As AssetRegRow
            Dim rowAssetRegRow As AssetRegRow = CType(Me.NewRow,AssetRegRow)
            Dim columnValuesArray() As Object = New Object() {CustodianName, AstNum, AstID, PurDate, OracleRef, CompRef, AstCat1, AstCat2, AstCat3, CustodianID, Cost, CCDepart, CCSection, CCLocation}
            rowAssetRegRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAssetRegRow)
            Return rowAssetRegRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AssetRegDataTable = CType(MyBase.Clone,AssetRegDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AssetRegDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCustodianName = MyBase.Columns("CustodianName")
            Me.columnAstNum = MyBase.Columns("AstNum")
            Me.columnAstID = MyBase.Columns("AstID")
            Me.columnPurDate = MyBase.Columns("PurDate")
            Me.columnOracleRef = MyBase.Columns("OracleRef")
            Me.columnCompRef = MyBase.Columns("CompRef")
            Me.columnAstCat1 = MyBase.Columns("AstCat1")
            Me.columnAstCat2 = MyBase.Columns("AstCat2")
            Me.columnAstCat3 = MyBase.Columns("AstCat3")
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnCost = MyBase.Columns("Cost")
            Me.columnCCDepart = MyBase.Columns("CCDepart")
            Me.columnCCSection = MyBase.Columns("CCSection")
            Me.columnCCLocation = MyBase.Columns("CCLocation")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCustodianName = New Global.System.Data.DataColumn("CustodianName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianName)
            Me.columnAstNum = New Global.System.Data.DataColumn("AstNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstNum)
            Me.columnAstID = New Global.System.Data.DataColumn("AstID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstID)
            Me.columnPurDate = New Global.System.Data.DataColumn("PurDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurDate)
            Me.columnOracleRef = New Global.System.Data.DataColumn("OracleRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOracleRef)
            Me.columnCompRef = New Global.System.Data.DataColumn("CompRef", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompRef)
            Me.columnAstCat1 = New Global.System.Data.DataColumn("AstCat1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCat1)
            Me.columnAstCat2 = New Global.System.Data.DataColumn("AstCat2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCat2)
            Me.columnAstCat3 = New Global.System.Data.DataColumn("AstCat3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCat3)
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCost)
            Me.columnCCDepart = New Global.System.Data.DataColumn("CCDepart", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCDepart)
            Me.columnCCSection = New Global.System.Data.DataColumn("CCSection", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCSection)
            Me.columnCCLocation = New Global.System.Data.DataColumn("CCLocation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCLocation)
            Me.columnCustodianName.MaxLength = 100
            Me.columnAstNum.MaxLength = 50
            Me.columnAstID.MaxLength = 50
            Me.columnOracleRef.MaxLength = 50
            Me.columnCompRef.MaxLength = 50
            Me.columnAstCat1.MaxLength = 50
            Me.columnAstCat2.MaxLength = 50
            Me.columnAstCat3.MaxLength = 50
            Me.columnCustodianID.MaxLength = 50
            Me.columnCCDepart.MaxLength = 50
            Me.columnCCSection.MaxLength = 50
            Me.columnCCLocation.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssetRegRow() As AssetRegRow
            Return CType(Me.NewRow,AssetRegRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AssetRegRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AssetRegRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssetRegRowChangedEvent) Is Nothing) Then
                RaiseEvent AssetRegRowChanged(Me, New AssetRegRowChangeEvent(CType(e.Row,AssetRegRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssetRegRowChangingEvent) Is Nothing) Then
                RaiseEvent AssetRegRowChanging(Me, New AssetRegRowChangeEvent(CType(e.Row,AssetRegRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssetRegRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssetRegRowDeleted(Me, New AssetRegRowChangeEvent(CType(e.Row,AssetRegRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssetRegRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssetRegRowDeleting(Me, New AssetRegRowChangeEvent(CType(e.Row,AssetRegRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssetRegRow(ByVal row As AssetRegRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssetRegDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DepBooksDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAstID As Global.System.Data.DataColumn
        
        Private columnAstNum As Global.System.Data.DataColumn
        
        Private columnRefNo As Global.System.Data.DataColumn
        
        Private columnCompCode As Global.System.Data.DataColumn
        
        Private columnAstCatDesc As Global.System.Data.DataColumn
        
        Private columnCustodianName As Global.System.Data.DataColumn
        
        Private columnAstDesc As Global.System.Data.DataColumn
        
        Private columntot As Global.System.Data.DataColumn
        
        Private columnsalvageYear As Global.System.Data.DataColumn
        
        Private columnacc As Global.System.Data.DataColumn
        
        Private columnCurrentBV As Global.System.Data.DataColumn
        
        Private columnAstDesc2 As Global.System.Data.DataColumn
        
        Private columnLocationFullPath As Global.System.Data.DataColumn
        
        Private columnCatFullPath As Global.System.Data.DataColumn
        
        Private columnSalvageMonth As Global.System.Data.DataColumn
        
        Private columnEndOfServiceDate As Global.System.Data.DataColumn
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnCustodianCode As Global.System.Data.DataColumn
        
        Private columnItemDesc As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnPurDate As Global.System.Data.DataColumn
        
        Private columnDepPercentage As Global.System.Data.DataColumn
        
        Private columnAstBrandName As Global.System.Data.DataColumn
        
        Private columnCompanyCode As Global.System.Data.DataColumn
        
        Private columnCompanyName As Global.System.Data.DataColumn
        
        Private columnSrvDate As Global.System.Data.DataColumn
        
        Private columnLoc1 As Global.System.Data.DataColumn
        
        Private columnLoc2 As Global.System.Data.DataColumn
        
        Private columnLoc3 As Global.System.Data.DataColumn
        
        Private columnLoc4 As Global.System.Data.DataColumn
        
        Private columnLoc5 As Global.System.Data.DataColumn
        
        Private columnCat1 As Global.System.Data.DataColumn
        
        Private columnCat2 As Global.System.Data.DataColumn
        
        Private columnCat3 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DepBooks"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property salvageYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalvageYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property accColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnacc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentBVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentBV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCatFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalvageMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalvageMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndOfServiceDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndOfServiceDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepPercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepPercentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstBrandNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstBrandName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrvDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrvDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Loc1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoc1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Loc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Loc3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoc3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Loc4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoc4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Loc5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoc5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cat1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCat1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cat2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCat2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cat3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCat3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DepBooksRow
            Get
                Return CType(Me.Rows(index),DepBooksRow)
            End Get
        End Property
        
        Public Event DepBooksRowChanging As DepBooksRowChangeEventHandler
        
        Public Event DepBooksRowChanged As DepBooksRowChangeEventHandler
        
        Public Event DepBooksRowDeleting As DepBooksRowChangeEventHandler
        
        Public Event DepBooksRowDeleted As DepBooksRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDepBooksRow(ByVal row As DepBooksRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDepBooksRow( _
                    ByVal AstID As String,  _
                    ByVal AstNum As Long,  _
                    ByVal RefNo As String,  _
                    ByVal CompCode As String,  _
                    ByVal AstCatDesc As String,  _
                    ByVal CustodianName As String,  _
                    ByVal AstDesc As String,  _
                    ByVal tot As Double,  _
                    ByVal salvageYear As Integer,  _
                    ByVal acc As Double,  _
                    ByVal CurrentBV As Double,  _
                    ByVal AstDesc2 As String,  _
                    ByVal LocationFullPath As String,  _
                    ByVal CatFullPath As String,  _
                    ByVal SalvageMonth As Integer,  _
                    ByVal EndOfServiceDate As Date,  _
                    ByVal CustodianID As String,  _
                    ByVal CustodianCode As String,  _
                    ByVal ItemDesc As String,  _
                    ByVal ItemCode As String,  _
                    ByVal PurDate As Date,  _
                    ByVal DepPercentage As Integer,  _
                    ByVal AstBrandName As String,  _
                    ByVal CompanyCode As String,  _
                    ByVal CompanyName As String,  _
                    ByVal SrvDate As Date,  _
                    ByVal Loc1 As String,  _
                    ByVal Loc2 As String,  _
                    ByVal Loc3 As String,  _
                    ByVal Loc4 As String,  _
                    ByVal Loc5 As String,  _
                    ByVal Cat1 As String,  _
                    ByVal Cat2 As String,  _
                    ByVal Cat3 As String) As DepBooksRow
            Dim rowDepBooksRow As DepBooksRow = CType(Me.NewRow,DepBooksRow)
            Dim columnValuesArray() As Object = New Object() {AstID, AstNum, RefNo, CompCode, AstCatDesc, CustodianName, AstDesc, tot, salvageYear, acc, CurrentBV, AstDesc2, LocationFullPath, CatFullPath, SalvageMonth, EndOfServiceDate, CustodianID, CustodianCode, ItemDesc, ItemCode, PurDate, DepPercentage, AstBrandName, CompanyCode, CompanyName, SrvDate, Loc1, Loc2, Loc3, Loc4, Loc5, Cat1, Cat2, Cat3}
            rowDepBooksRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDepBooksRow)
            Return rowDepBooksRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAstID(ByVal AstID As String) As DepBooksRow
            Return CType(Me.Rows.Find(New Object() {AstID}),DepBooksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DepBooksDataTable = CType(MyBase.Clone,DepBooksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DepBooksDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAstID = MyBase.Columns("AstID")
            Me.columnAstNum = MyBase.Columns("AstNum")
            Me.columnRefNo = MyBase.Columns("RefNo")
            Me.columnCompCode = MyBase.Columns("CompCode")
            Me.columnAstCatDesc = MyBase.Columns("AstCatDesc")
            Me.columnCustodianName = MyBase.Columns("CustodianName")
            Me.columnAstDesc = MyBase.Columns("AstDesc")
            Me.columntot = MyBase.Columns("tot")
            Me.columnsalvageYear = MyBase.Columns("salvageYear")
            Me.columnacc = MyBase.Columns("acc")
            Me.columnCurrentBV = MyBase.Columns("CurrentBV")
            Me.columnAstDesc2 = MyBase.Columns("AstDesc2")
            Me.columnLocationFullPath = MyBase.Columns("LocationFullPath")
            Me.columnCatFullPath = MyBase.Columns("CatFullPath")
            Me.columnSalvageMonth = MyBase.Columns("SalvageMonth")
            Me.columnEndOfServiceDate = MyBase.Columns("EndOfServiceDate")
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnCustodianCode = MyBase.Columns("CustodianCode")
            Me.columnItemDesc = MyBase.Columns("ItemDesc")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnPurDate = MyBase.Columns("PurDate")
            Me.columnDepPercentage = MyBase.Columns("DepPercentage")
            Me.columnAstBrandName = MyBase.Columns("AstBrandName")
            Me.columnCompanyCode = MyBase.Columns("CompanyCode")
            Me.columnCompanyName = MyBase.Columns("CompanyName")
            Me.columnSrvDate = MyBase.Columns("SrvDate")
            Me.columnLoc1 = MyBase.Columns("Loc1")
            Me.columnLoc2 = MyBase.Columns("Loc2")
            Me.columnLoc3 = MyBase.Columns("Loc3")
            Me.columnLoc4 = MyBase.Columns("Loc4")
            Me.columnLoc5 = MyBase.Columns("Loc5")
            Me.columnCat1 = MyBase.Columns("Cat1")
            Me.columnCat2 = MyBase.Columns("Cat2")
            Me.columnCat3 = MyBase.Columns("Cat3")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAstID = New Global.System.Data.DataColumn("AstID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstID)
            Me.columnAstNum = New Global.System.Data.DataColumn("AstNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstNum)
            Me.columnRefNo = New Global.System.Data.DataColumn("RefNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefNo)
            Me.columnCompCode = New Global.System.Data.DataColumn("CompCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompCode)
            Me.columnAstCatDesc = New Global.System.Data.DataColumn("AstCatDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatDesc)
            Me.columnCustodianName = New Global.System.Data.DataColumn("CustodianName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianName)
            Me.columnAstDesc = New Global.System.Data.DataColumn("AstDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc)
            Me.columntot = New Global.System.Data.DataColumn("tot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntot)
            Me.columnsalvageYear = New Global.System.Data.DataColumn("salvageYear", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalvageYear)
            Me.columnacc = New Global.System.Data.DataColumn("acc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnacc)
            Me.columnCurrentBV = New Global.System.Data.DataColumn("CurrentBV", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentBV)
            Me.columnAstDesc2 = New Global.System.Data.DataColumn("AstDesc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc2)
            Me.columnLocationFullPath = New Global.System.Data.DataColumn("LocationFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationFullPath)
            Me.columnCatFullPath = New Global.System.Data.DataColumn("CatFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCatFullPath)
            Me.columnSalvageMonth = New Global.System.Data.DataColumn("SalvageMonth", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalvageMonth)
            Me.columnEndOfServiceDate = New Global.System.Data.DataColumn("EndOfServiceDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndOfServiceDate)
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnCustodianCode = New Global.System.Data.DataColumn("CustodianCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianCode)
            Me.columnItemDesc = New Global.System.Data.DataColumn("ItemDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDesc)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnPurDate = New Global.System.Data.DataColumn("PurDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurDate)
            Me.columnDepPercentage = New Global.System.Data.DataColumn("DepPercentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepPercentage)
            Me.columnAstBrandName = New Global.System.Data.DataColumn("AstBrandName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstBrandName)
            Me.columnCompanyCode = New Global.System.Data.DataColumn("CompanyCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyCode)
            Me.columnCompanyName = New Global.System.Data.DataColumn("CompanyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyName)
            Me.columnSrvDate = New Global.System.Data.DataColumn("SrvDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrvDate)
            Me.columnLoc1 = New Global.System.Data.DataColumn("Loc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoc1)
            Me.columnLoc2 = New Global.System.Data.DataColumn("Loc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoc2)
            Me.columnLoc3 = New Global.System.Data.DataColumn("Loc3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoc3)
            Me.columnLoc4 = New Global.System.Data.DataColumn("Loc4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoc4)
            Me.columnLoc5 = New Global.System.Data.DataColumn("Loc5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoc5)
            Me.columnCat1 = New Global.System.Data.DataColumn("Cat1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCat1)
            Me.columnCat2 = New Global.System.Data.DataColumn("Cat2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCat2)
            Me.columnCat3 = New Global.System.Data.DataColumn("Cat3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCat3)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAstID}, true))
            Me.columnAstID.AllowDBNull = false
            Me.columnAstID.Unique = true
            Me.columnAstID.MaxLength = 25
            Me.columnAstNum.AllowDBNull = false
            Me.columnRefNo.MaxLength = 50
            Me.columnCompCode.MaxLength = 255
            Me.columnAstCatDesc.MaxLength = 100
            Me.columnCustodianName.MaxLength = 100
            Me.columnAstDesc.MaxLength = 200
            Me.columntot.ReadOnly = true
            Me.columnacc.ReadOnly = true
            Me.columnAstDesc2.MaxLength = 200
            Me.columnLocationFullPath.MaxLength = 1073741823
            Me.columnCatFullPath.MaxLength = 1073741823
            Me.columnEndOfServiceDate.ReadOnly = true
            Me.columnCustodianID.AllowDBNull = false
            Me.columnCustodianID.MaxLength = 25
            Me.columnCustodianCode.MaxLength = 255
            Me.columnItemDesc.MaxLength = 200
            Me.columnItemCode.AllowDBNull = false
            Me.columnItemCode.MaxLength = 25
            Me.columnDepPercentage.ReadOnly = true
            Me.columnAstBrandName.MaxLength = 100
            Me.columnCompanyCode.MaxLength = 50
            Me.columnCompanyName.MaxLength = 50
            Me.columnLoc1.ReadOnly = true
            Me.columnLoc1.MaxLength = 1
            Me.columnLoc2.ReadOnly = true
            Me.columnLoc2.MaxLength = 1
            Me.columnLoc3.ReadOnly = true
            Me.columnLoc3.MaxLength = 1
            Me.columnLoc4.ReadOnly = true
            Me.columnLoc4.MaxLength = 1
            Me.columnLoc5.ReadOnly = true
            Me.columnLoc5.MaxLength = 1
            Me.columnCat1.ReadOnly = true
            Me.columnCat1.MaxLength = 1
            Me.columnCat2.ReadOnly = true
            Me.columnCat2.MaxLength = 1
            Me.columnCat3.ReadOnly = true
            Me.columnCat3.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDepBooksRow() As DepBooksRow
            Return CType(Me.NewRow,DepBooksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DepBooksRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DepBooksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DepBooksRowChangedEvent) Is Nothing) Then
                RaiseEvent DepBooksRowChanged(Me, New DepBooksRowChangeEvent(CType(e.Row,DepBooksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DepBooksRowChangingEvent) Is Nothing) Then
                RaiseEvent DepBooksRowChanging(Me, New DepBooksRowChangeEvent(CType(e.Row,DepBooksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DepBooksRowDeletedEvent) Is Nothing) Then
                RaiseEvent DepBooksRowDeleted(Me, New DepBooksRowChangeEvent(CType(e.Row,DepBooksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DepBooksRowDeletingEvent) Is Nothing) Then
                RaiseEvent DepBooksRowDeleting(Me, New DepBooksRowChangeEvent(CType(e.Row,DepBooksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDepBooksRow(ByVal row As DepBooksRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DepBooksDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssetTagDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAstID As Global.System.Data.DataColumn
        
        Private columnAstNum As Global.System.Data.DataColumn
        
        Private columnRefNo As Global.System.Data.DataColumn
        
        Private columnCompCode As Global.System.Data.DataColumn
        
        Private columnCustodianName As Global.System.Data.DataColumn
        
        Private columnAstCatDesc As Global.System.Data.DataColumn
        
        Private columnPurDate As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnBaseCost As Global.System.Data.DataColumn
        
        Private columnTax As Global.System.Data.DataColumn
        
        Private columnDiscount As Global.System.Data.DataColumn
        
        Private columntot As Global.System.Data.DataColumn
        
        Private columnInvNumber As Global.System.Data.DataColumn
        
        Private columnSuppName As Global.System.Data.DataColumn
        
        Private columnInsName As Global.System.Data.DataColumn
        
        Private columnLocID As Global.System.Data.DataColumn
        
        Private columnAstBrandName As Global.System.Data.DataColumn
        
        Private columnSrvDate As Global.System.Data.DataColumn
        
        Private columnAstModel As Global.System.Data.DataColumn
        
        Private columnDispDate As Global.System.Data.DataColumn
        
        Private columnDisposed As Global.System.Data.DataColumn
        
        Private columnBarCode As Global.System.Data.DataColumn
        
        Private columnSerailNo As Global.System.Data.DataColumn
        
        Private columnRefCode As Global.System.Data.DataColumn
        
        Private columnPlate As Global.System.Data.DataColumn
        
        Private columnPoerp As Global.System.Data.DataColumn
        
        Private columnCapex As Global.System.Data.DataColumn
        
        Private columnGrn As Global.System.Data.DataColumn
        
        Private columnGLCode As Global.System.Data.DataColumn
        
        Private columnAstCatID As Global.System.Data.DataColumn
        
        Private columnCatFullPath As Global.System.Data.DataColumn
        
        Private columnLocationFullPath As Global.System.Data.DataColumn
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnCustodianCode As Global.System.Data.DataColumn
        
        Private columnAstDesc1 As Global.System.Data.DataColumn
        
        Private columnAstDesc2 As Global.System.Data.DataColumn
        
        Private columnItemDesc As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssetTag"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstBrandNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstBrandName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrvDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrvDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DispDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDispDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisposedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisposed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerailNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerailNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PoerpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoerp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCatFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssetTagRow
            Get
                Return CType(Me.Rows(index),AssetTagRow)
            End Get
        End Property
        
        Public Event AssetTagRowChanging As AssetTagRowChangeEventHandler
        
        Public Event AssetTagRowChanged As AssetTagRowChangeEventHandler
        
        Public Event AssetTagRowDeleting As AssetTagRowChangeEventHandler
        
        Public Event AssetTagRowDeleted As AssetTagRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssetTagRow(ByVal row As AssetTagRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssetTagRow( _
                    ByVal AstID As String,  _
                    ByVal AstNum As Long,  _
                    ByVal RefNo As String,  _
                    ByVal CompCode As String,  _
                    ByVal CustodianName As String,  _
                    ByVal AstCatDesc As String,  _
                    ByVal PurDate As Date,  _
                    ByVal Description As String,  _
                    ByVal BaseCost As Double,  _
                    ByVal Tax As Double,  _
                    ByVal Discount As Long,  _
                    ByVal tot As Double,  _
                    ByVal InvNumber As String,  _
                    ByVal SuppName As String,  _
                    ByVal InsName As String,  _
                    ByVal LocID As String,  _
                    ByVal AstBrandName As String,  _
                    ByVal SrvDate As Date,  _
                    ByVal AstModel As String,  _
                    ByVal DispDate As Date,  _
                    ByVal Disposed As Boolean,  _
                    ByVal BarCode As String,  _
                    ByVal SerailNo As String,  _
                    ByVal RefCode As String,  _
                    ByVal Plate As String,  _
                    ByVal Poerp As String,  _
                    ByVal Capex As String,  _
                    ByVal Grn As String,  _
                    ByVal GLCode As Long,  _
                    ByVal AstCatID As String,  _
                    ByVal CatFullPath As String,  _
                    ByVal LocationFullPath As String,  _
                    ByVal CustodianID As String,  _
                    ByVal CustodianCode As String,  _
                    ByVal AstDesc1 As String,  _
                    ByVal AstDesc2 As String,  _
                    ByVal ItemDesc As String,  _
                    ByVal ItemCode As String) As AssetTagRow
            Dim rowAssetTagRow As AssetTagRow = CType(Me.NewRow,AssetTagRow)
            Dim columnValuesArray() As Object = New Object() {AstID, AstNum, RefNo, CompCode, CustodianName, AstCatDesc, PurDate, Description, BaseCost, Tax, Discount, tot, InvNumber, SuppName, InsName, LocID, AstBrandName, SrvDate, AstModel, DispDate, Disposed, BarCode, SerailNo, RefCode, Plate, Poerp, Capex, Grn, GLCode, AstCatID, CatFullPath, LocationFullPath, CustodianID, CustodianCode, AstDesc1, AstDesc2, ItemDesc, ItemCode}
            rowAssetTagRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAssetTagRow)
            Return rowAssetTagRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAstID(ByVal AstID As String) As AssetTagRow
            Return CType(Me.Rows.Find(New Object() {AstID}),AssetTagRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AssetTagDataTable = CType(MyBase.Clone,AssetTagDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AssetTagDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAstID = MyBase.Columns("AstID")
            Me.columnAstNum = MyBase.Columns("AstNum")
            Me.columnRefNo = MyBase.Columns("RefNo")
            Me.columnCompCode = MyBase.Columns("CompCode")
            Me.columnCustodianName = MyBase.Columns("CustodianName")
            Me.columnAstCatDesc = MyBase.Columns("AstCatDesc")
            Me.columnPurDate = MyBase.Columns("PurDate")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnBaseCost = MyBase.Columns("BaseCost")
            Me.columnTax = MyBase.Columns("Tax")
            Me.columnDiscount = MyBase.Columns("Discount")
            Me.columntot = MyBase.Columns("tot")
            Me.columnInvNumber = MyBase.Columns("InvNumber")
            Me.columnSuppName = MyBase.Columns("SuppName")
            Me.columnInsName = MyBase.Columns("InsName")
            Me.columnLocID = MyBase.Columns("LocID")
            Me.columnAstBrandName = MyBase.Columns("AstBrandName")
            Me.columnSrvDate = MyBase.Columns("SrvDate")
            Me.columnAstModel = MyBase.Columns("AstModel")
            Me.columnDispDate = MyBase.Columns("DispDate")
            Me.columnDisposed = MyBase.Columns("Disposed")
            Me.columnBarCode = MyBase.Columns("BarCode")
            Me.columnSerailNo = MyBase.Columns("SerailNo")
            Me.columnRefCode = MyBase.Columns("RefCode")
            Me.columnPlate = MyBase.Columns("Plate")
            Me.columnPoerp = MyBase.Columns("Poerp")
            Me.columnCapex = MyBase.Columns("Capex")
            Me.columnGrn = MyBase.Columns("Grn")
            Me.columnGLCode = MyBase.Columns("GLCode")
            Me.columnAstCatID = MyBase.Columns("AstCatID")
            Me.columnCatFullPath = MyBase.Columns("CatFullPath")
            Me.columnLocationFullPath = MyBase.Columns("LocationFullPath")
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnCustodianCode = MyBase.Columns("CustodianCode")
            Me.columnAstDesc1 = MyBase.Columns("AstDesc1")
            Me.columnAstDesc2 = MyBase.Columns("AstDesc2")
            Me.columnItemDesc = MyBase.Columns("ItemDesc")
            Me.columnItemCode = MyBase.Columns("ItemCode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAstID = New Global.System.Data.DataColumn("AstID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstID)
            Me.columnAstNum = New Global.System.Data.DataColumn("AstNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstNum)
            Me.columnRefNo = New Global.System.Data.DataColumn("RefNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefNo)
            Me.columnCompCode = New Global.System.Data.DataColumn("CompCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompCode)
            Me.columnCustodianName = New Global.System.Data.DataColumn("CustodianName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianName)
            Me.columnAstCatDesc = New Global.System.Data.DataColumn("AstCatDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatDesc)
            Me.columnPurDate = New Global.System.Data.DataColumn("PurDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurDate)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnBaseCost = New Global.System.Data.DataColumn("BaseCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseCost)
            Me.columnTax = New Global.System.Data.DataColumn("Tax", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax)
            Me.columnDiscount = New Global.System.Data.DataColumn("Discount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscount)
            Me.columntot = New Global.System.Data.DataColumn("tot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntot)
            Me.columnInvNumber = New Global.System.Data.DataColumn("InvNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvNumber)
            Me.columnSuppName = New Global.System.Data.DataColumn("SuppName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppName)
            Me.columnInsName = New Global.System.Data.DataColumn("InsName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsName)
            Me.columnLocID = New Global.System.Data.DataColumn("LocID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocID)
            Me.columnAstBrandName = New Global.System.Data.DataColumn("AstBrandName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstBrandName)
            Me.columnSrvDate = New Global.System.Data.DataColumn("SrvDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrvDate)
            Me.columnAstModel = New Global.System.Data.DataColumn("AstModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstModel)
            Me.columnDispDate = New Global.System.Data.DataColumn("DispDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDispDate)
            Me.columnDisposed = New Global.System.Data.DataColumn("Disposed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisposed)
            Me.columnBarCode = New Global.System.Data.DataColumn("BarCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarCode)
            Me.columnSerailNo = New Global.System.Data.DataColumn("SerailNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerailNo)
            Me.columnRefCode = New Global.System.Data.DataColumn("RefCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefCode)
            Me.columnPlate = New Global.System.Data.DataColumn("Plate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlate)
            Me.columnPoerp = New Global.System.Data.DataColumn("Poerp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoerp)
            Me.columnCapex = New Global.System.Data.DataColumn("Capex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapex)
            Me.columnGrn = New Global.System.Data.DataColumn("Grn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrn)
            Me.columnGLCode = New Global.System.Data.DataColumn("GLCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLCode)
            Me.columnAstCatID = New Global.System.Data.DataColumn("AstCatID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatID)
            Me.columnCatFullPath = New Global.System.Data.DataColumn("CatFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCatFullPath)
            Me.columnLocationFullPath = New Global.System.Data.DataColumn("LocationFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationFullPath)
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnCustodianCode = New Global.System.Data.DataColumn("CustodianCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianCode)
            Me.columnAstDesc1 = New Global.System.Data.DataColumn("AstDesc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc1)
            Me.columnAstDesc2 = New Global.System.Data.DataColumn("AstDesc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc2)
            Me.columnItemDesc = New Global.System.Data.DataColumn("ItemDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDesc)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAstID}, true))
            Me.columnAstID.AllowDBNull = false
            Me.columnAstID.Unique = true
            Me.columnAstID.MaxLength = 25
            Me.columnAstNum.AllowDBNull = false
            Me.columnRefNo.MaxLength = 50
            Me.columnCompCode.MaxLength = 255
            Me.columnCustodianName.MaxLength = 100
            Me.columnAstCatDesc.MaxLength = 100
            Me.columnDescription.MaxLength = 200
            Me.columntot.ReadOnly = true
            Me.columnInvNumber.MaxLength = 25
            Me.columnSuppName.MaxLength = 100
            Me.columnInsName.MaxLength = 25
            Me.columnLocID.MaxLength = 255
            Me.columnAstBrandName.MaxLength = 100
            Me.columnAstModel.MaxLength = 50
            Me.columnBarCode.MaxLength = 50
            Me.columnSerailNo.MaxLength = 50
            Me.columnRefCode.MaxLength = 50
            Me.columnPlate.MaxLength = 50
            Me.columnPoerp.MaxLength = 50
            Me.columnCapex.MaxLength = 50
            Me.columnGrn.MaxLength = 50
            Me.columnAstCatID.MaxLength = 25
            Me.columnCatFullPath.MaxLength = 1073741823
            Me.columnLocationFullPath.MaxLength = 1073741823
            Me.columnCustodianID.AllowDBNull = false
            Me.columnCustodianID.MaxLength = 25
            Me.columnCustodianCode.MaxLength = 255
            Me.columnAstDesc1.MaxLength = 200
            Me.columnAstDesc2.MaxLength = 200
            Me.columnItemDesc.MaxLength = 200
            Me.columnItemCode.AllowDBNull = false
            Me.columnItemCode.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssetTagRow() As AssetTagRow
            Return CType(Me.NewRow,AssetTagRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AssetTagRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AssetTagRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssetTagRowChangedEvent) Is Nothing) Then
                RaiseEvent AssetTagRowChanged(Me, New AssetTagRowChangeEvent(CType(e.Row,AssetTagRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssetTagRowChangingEvent) Is Nothing) Then
                RaiseEvent AssetTagRowChanging(Me, New AssetTagRowChangeEvent(CType(e.Row,AssetTagRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssetTagRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssetTagRowDeleted(Me, New AssetTagRowChangeEvent(CType(e.Row,AssetTagRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssetTagRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssetTagRowDeleting(Me, New AssetTagRowChangeEvent(CType(e.Row,AssetTagRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssetTagRow(ByVal row As AssetTagRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssetTagDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssetLedgerDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAstID As Global.System.Data.DataColumn
        
        Private columnAstNum As Global.System.Data.DataColumn
        
        Private columnRefNo As Global.System.Data.DataColumn
        
        Private columnCompCode As Global.System.Data.DataColumn
        
        Private columnCustodianName As Global.System.Data.DataColumn
        
        Private columnAstCatDesc As Global.System.Data.DataColumn
        
        Private columnPurDate As Global.System.Data.DataColumn
        
        Private columnBaseCost As Global.System.Data.DataColumn
        
        Private columnTax As Global.System.Data.DataColumn
        
        Private columnDiscount As Global.System.Data.DataColumn
        
        Private columntot As Global.System.Data.DataColumn
        
        Private columnInvNumber As Global.System.Data.DataColumn
        
        Private columnSuppName As Global.System.Data.DataColumn
        
        Private columnInsName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnCustodianCode As Global.System.Data.DataColumn
        
        Private columnAstDesc1 As Global.System.Data.DataColumn
        
        Private columnAstDesc2 As Global.System.Data.DataColumn
        
        Private columnItemDesc As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssetLedger"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssetLedgerRow
            Get
                Return CType(Me.Rows(index),AssetLedgerRow)
            End Get
        End Property
        
        Public Event AssetLedgerRowChanging As AssetLedgerRowChangeEventHandler
        
        Public Event AssetLedgerRowChanged As AssetLedgerRowChangeEventHandler
        
        Public Event AssetLedgerRowDeleting As AssetLedgerRowChangeEventHandler
        
        Public Event AssetLedgerRowDeleted As AssetLedgerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssetLedgerRow(ByVal row As AssetLedgerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssetLedgerRow( _
                    ByVal AstID As String,  _
                    ByVal AstNum As Long,  _
                    ByVal RefNo As String,  _
                    ByVal CompCode As String,  _
                    ByVal CustodianName As String,  _
                    ByVal AstCatDesc As String,  _
                    ByVal PurDate As Date,  _
                    ByVal BaseCost As Double,  _
                    ByVal Tax As Double,  _
                    ByVal Discount As Long,  _
                    ByVal tot As Double,  _
                    ByVal InvNumber As String,  _
                    ByVal SuppName As String,  _
                    ByVal InsName As String,  _
                    ByVal Description As String,  _
                    ByVal CustodianID As String,  _
                    ByVal CustodianCode As String,  _
                    ByVal AstDesc1 As String,  _
                    ByVal AstDesc2 As String,  _
                    ByVal ItemDesc As String,  _
                    ByVal ItemCode As String) As AssetLedgerRow
            Dim rowAssetLedgerRow As AssetLedgerRow = CType(Me.NewRow,AssetLedgerRow)
            Dim columnValuesArray() As Object = New Object() {AstID, AstNum, RefNo, CompCode, CustodianName, AstCatDesc, PurDate, BaseCost, Tax, Discount, tot, InvNumber, SuppName, InsName, Description, CustodianID, CustodianCode, AstDesc1, AstDesc2, ItemDesc, ItemCode}
            rowAssetLedgerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAssetLedgerRow)
            Return rowAssetLedgerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAstID(ByVal AstID As String) As AssetLedgerRow
            Return CType(Me.Rows.Find(New Object() {AstID}),AssetLedgerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AssetLedgerDataTable = CType(MyBase.Clone,AssetLedgerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AssetLedgerDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAstID = MyBase.Columns("AstID")
            Me.columnAstNum = MyBase.Columns("AstNum")
            Me.columnRefNo = MyBase.Columns("RefNo")
            Me.columnCompCode = MyBase.Columns("CompCode")
            Me.columnCustodianName = MyBase.Columns("CustodianName")
            Me.columnAstCatDesc = MyBase.Columns("AstCatDesc")
            Me.columnPurDate = MyBase.Columns("PurDate")
            Me.columnBaseCost = MyBase.Columns("BaseCost")
            Me.columnTax = MyBase.Columns("Tax")
            Me.columnDiscount = MyBase.Columns("Discount")
            Me.columntot = MyBase.Columns("tot")
            Me.columnInvNumber = MyBase.Columns("InvNumber")
            Me.columnSuppName = MyBase.Columns("SuppName")
            Me.columnInsName = MyBase.Columns("InsName")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnCustodianCode = MyBase.Columns("CustodianCode")
            Me.columnAstDesc1 = MyBase.Columns("AstDesc1")
            Me.columnAstDesc2 = MyBase.Columns("AstDesc2")
            Me.columnItemDesc = MyBase.Columns("ItemDesc")
            Me.columnItemCode = MyBase.Columns("ItemCode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAstID = New Global.System.Data.DataColumn("AstID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstID)
            Me.columnAstNum = New Global.System.Data.DataColumn("AstNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstNum)
            Me.columnRefNo = New Global.System.Data.DataColumn("RefNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefNo)
            Me.columnCompCode = New Global.System.Data.DataColumn("CompCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompCode)
            Me.columnCustodianName = New Global.System.Data.DataColumn("CustodianName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianName)
            Me.columnAstCatDesc = New Global.System.Data.DataColumn("AstCatDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatDesc)
            Me.columnPurDate = New Global.System.Data.DataColumn("PurDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurDate)
            Me.columnBaseCost = New Global.System.Data.DataColumn("BaseCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseCost)
            Me.columnTax = New Global.System.Data.DataColumn("Tax", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax)
            Me.columnDiscount = New Global.System.Data.DataColumn("Discount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscount)
            Me.columntot = New Global.System.Data.DataColumn("tot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntot)
            Me.columnInvNumber = New Global.System.Data.DataColumn("InvNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvNumber)
            Me.columnSuppName = New Global.System.Data.DataColumn("SuppName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppName)
            Me.columnInsName = New Global.System.Data.DataColumn("InsName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnCustodianCode = New Global.System.Data.DataColumn("CustodianCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianCode)
            Me.columnAstDesc1 = New Global.System.Data.DataColumn("AstDesc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc1)
            Me.columnAstDesc2 = New Global.System.Data.DataColumn("AstDesc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc2)
            Me.columnItemDesc = New Global.System.Data.DataColumn("ItemDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDesc)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAstID}, true))
            Me.columnAstID.AllowDBNull = false
            Me.columnAstID.Unique = true
            Me.columnAstID.MaxLength = 25
            Me.columnAstNum.AllowDBNull = false
            Me.columnRefNo.MaxLength = 50
            Me.columnCompCode.MaxLength = 255
            Me.columnCustodianName.MaxLength = 100
            Me.columnAstCatDesc.MaxLength = 100
            Me.columntot.ReadOnly = true
            Me.columnInvNumber.MaxLength = 25
            Me.columnSuppName.MaxLength = 100
            Me.columnInsName.MaxLength = 25
            Me.columnDescription.MaxLength = 200
            Me.columnCustodianID.AllowDBNull = false
            Me.columnCustodianID.MaxLength = 25
            Me.columnCustodianCode.MaxLength = 255
            Me.columnAstDesc1.MaxLength = 200
            Me.columnAstDesc2.MaxLength = 200
            Me.columnItemDesc.MaxLength = 200
            Me.columnItemCode.AllowDBNull = false
            Me.columnItemCode.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssetLedgerRow() As AssetLedgerRow
            Return CType(Me.NewRow,AssetLedgerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AssetLedgerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AssetLedgerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssetLedgerRowChangedEvent) Is Nothing) Then
                RaiseEvent AssetLedgerRowChanged(Me, New AssetLedgerRowChangeEvent(CType(e.Row,AssetLedgerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssetLedgerRowChangingEvent) Is Nothing) Then
                RaiseEvent AssetLedgerRowChanging(Me, New AssetLedgerRowChangeEvent(CType(e.Row,AssetLedgerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssetLedgerRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssetLedgerRowDeleted(Me, New AssetLedgerRowChangeEvent(CType(e.Row,AssetLedgerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssetLedgerRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssetLedgerRowDeleting(Me, New AssetLedgerRowChangeEvent(CType(e.Row,AssetLedgerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssetLedgerRow(ByVal row As AssetLedgerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssetLedgerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DisposedAssetsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAstNum As Global.System.Data.DataColumn
        
        Private columnDispDate As Global.System.Data.DataColumn
        
        Private columnDispDesc As Global.System.Data.DataColumn
        
        Private columnTransRemarks As Global.System.Data.DataColumn
        
        Private columnSel_Price As Global.System.Data.DataColumn
        
        Private columnSel_Date As Global.System.Data.DataColumn
        
        Private columnAstID As Global.System.Data.DataColumn
        
        Private columnIsSold As Global.System.Data.DataColumn
        
        Private columnSoldTo As Global.System.Data.DataColumn
        
        Private columnRefNo As Global.System.Data.DataColumn
        
        Private columnCompCode As Global.System.Data.DataColumn
        
        Private columnCustodianName As Global.System.Data.DataColumn
        
        Private columnAstCatDesc As Global.System.Data.DataColumn
        
        Private columnPurDate As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnBaseCost As Global.System.Data.DataColumn
        
        Private columnTax As Global.System.Data.DataColumn
        
        Private columnDiscount As Global.System.Data.DataColumn
        
        Private columntot As Global.System.Data.DataColumn
        
        Private columnInvNumber As Global.System.Data.DataColumn
        
        Private columnSuppName As Global.System.Data.DataColumn
        
        Private columnInsName As Global.System.Data.DataColumn
        
        Private columnLocID As Global.System.Data.DataColumn
        
        Private columnAstBrandName As Global.System.Data.DataColumn
        
        Private columnSrvDate As Global.System.Data.DataColumn
        
        Private columnAstModel As Global.System.Data.DataColumn
        
        Private columnDisposed As Global.System.Data.DataColumn
        
        Private columnBarCode As Global.System.Data.DataColumn
        
        Private columnSerailNo As Global.System.Data.DataColumn
        
        Private columnRefCode As Global.System.Data.DataColumn
        
        Private columnPlate As Global.System.Data.DataColumn
        
        Private columnPoerp As Global.System.Data.DataColumn
        
        Private columnCapex As Global.System.Data.DataColumn
        
        Private columnGrn As Global.System.Data.DataColumn
        
        Private columnGLCode As Global.System.Data.DataColumn
        
        Private columnAstCatID As Global.System.Data.DataColumn
        
        Private columnCatFullPath As Global.System.Data.DataColumn
        
        Private columnLocationFullPath As Global.System.Data.DataColumn
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnCustodianCode As Global.System.Data.DataColumn
        
        Private columnAstDesc1 As Global.System.Data.DataColumn
        
        Private columnAstDesc2 As Global.System.Data.DataColumn
        
        Private columnItemDesc As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnDisposalComments As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DisposedAssets"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DispDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDispDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DispDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDispDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransRemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sel_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSel_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sel_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSel_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSoldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsSold
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SoldToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSoldTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstBrandNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstBrandName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrvDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrvDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisposedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisposed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerailNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerailNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PoerpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoerp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCatFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisposalCommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisposalComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DisposedAssetsRow
            Get
                Return CType(Me.Rows(index),DisposedAssetsRow)
            End Get
        End Property
        
        Public Event DisposedAssetsRowChanging As DisposedAssetsRowChangeEventHandler
        
        Public Event DisposedAssetsRowChanged As DisposedAssetsRowChangeEventHandler
        
        Public Event DisposedAssetsRowDeleting As DisposedAssetsRowChangeEventHandler
        
        Public Event DisposedAssetsRowDeleted As DisposedAssetsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDisposedAssetsRow(ByVal row As DisposedAssetsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDisposedAssetsRow( _
                    ByVal AstNum As Long,  _
                    ByVal DispDate As Date,  _
                    ByVal DispDesc As String,  _
                    ByVal TransRemarks As String,  _
                    ByVal Sel_Price As Double,  _
                    ByVal Sel_Date As Date,  _
                    ByVal AstID As String,  _
                    ByVal IsSold As Boolean,  _
                    ByVal SoldTo As String,  _
                    ByVal RefNo As String,  _
                    ByVal CompCode As String,  _
                    ByVal CustodianName As String,  _
                    ByVal AstCatDesc As String,  _
                    ByVal PurDate As Date,  _
                    ByVal Description As String,  _
                    ByVal BaseCost As Double,  _
                    ByVal Tax As Double,  _
                    ByVal Discount As Long,  _
                    ByVal tot As Double,  _
                    ByVal InvNumber As String,  _
                    ByVal SuppName As String,  _
                    ByVal InsName As String,  _
                    ByVal LocID As String,  _
                    ByVal AstBrandName As String,  _
                    ByVal SrvDate As Date,  _
                    ByVal AstModel As String,  _
                    ByVal Disposed As Boolean,  _
                    ByVal BarCode As String,  _
                    ByVal SerailNo As String,  _
                    ByVal RefCode As String,  _
                    ByVal Plate As String,  _
                    ByVal Poerp As String,  _
                    ByVal Capex As String,  _
                    ByVal Grn As String,  _
                    ByVal GLCode As Long,  _
                    ByVal AstCatID As String,  _
                    ByVal CatFullPath As String,  _
                    ByVal LocationFullPath As String,  _
                    ByVal CustodianID As String,  _
                    ByVal CustodianCode As String,  _
                    ByVal AstDesc1 As String,  _
                    ByVal AstDesc2 As String,  _
                    ByVal ItemDesc As String,  _
                    ByVal ItemCode As String,  _
                    ByVal DisposalComments As String) As DisposedAssetsRow
            Dim rowDisposedAssetsRow As DisposedAssetsRow = CType(Me.NewRow,DisposedAssetsRow)
            Dim columnValuesArray() As Object = New Object() {AstNum, DispDate, DispDesc, TransRemarks, Sel_Price, Sel_Date, AstID, IsSold, SoldTo, RefNo, CompCode, CustodianName, AstCatDesc, PurDate, Description, BaseCost, Tax, Discount, tot, InvNumber, SuppName, InsName, LocID, AstBrandName, SrvDate, AstModel, Disposed, BarCode, SerailNo, RefCode, Plate, Poerp, Capex, Grn, GLCode, AstCatID, CatFullPath, LocationFullPath, CustodianID, CustodianCode, AstDesc1, AstDesc2, ItemDesc, ItemCode, DisposalComments}
            rowDisposedAssetsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDisposedAssetsRow)
            Return rowDisposedAssetsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAstID(ByVal AstID As String) As DisposedAssetsRow
            Return CType(Me.Rows.Find(New Object() {AstID}),DisposedAssetsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DisposedAssetsDataTable = CType(MyBase.Clone,DisposedAssetsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DisposedAssetsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAstNum = MyBase.Columns("AstNum")
            Me.columnDispDate = MyBase.Columns("DispDate")
            Me.columnDispDesc = MyBase.Columns("DispDesc")
            Me.columnTransRemarks = MyBase.Columns("TransRemarks")
            Me.columnSel_Price = MyBase.Columns("Sel_Price")
            Me.columnSel_Date = MyBase.Columns("Sel_Date")
            Me.columnAstID = MyBase.Columns("AstID")
            Me.columnIsSold = MyBase.Columns("IsSold")
            Me.columnSoldTo = MyBase.Columns("SoldTo")
            Me.columnRefNo = MyBase.Columns("RefNo")
            Me.columnCompCode = MyBase.Columns("CompCode")
            Me.columnCustodianName = MyBase.Columns("CustodianName")
            Me.columnAstCatDesc = MyBase.Columns("AstCatDesc")
            Me.columnPurDate = MyBase.Columns("PurDate")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnBaseCost = MyBase.Columns("BaseCost")
            Me.columnTax = MyBase.Columns("Tax")
            Me.columnDiscount = MyBase.Columns("Discount")
            Me.columntot = MyBase.Columns("tot")
            Me.columnInvNumber = MyBase.Columns("InvNumber")
            Me.columnSuppName = MyBase.Columns("SuppName")
            Me.columnInsName = MyBase.Columns("InsName")
            Me.columnLocID = MyBase.Columns("LocID")
            Me.columnAstBrandName = MyBase.Columns("AstBrandName")
            Me.columnSrvDate = MyBase.Columns("SrvDate")
            Me.columnAstModel = MyBase.Columns("AstModel")
            Me.columnDisposed = MyBase.Columns("Disposed")
            Me.columnBarCode = MyBase.Columns("BarCode")
            Me.columnSerailNo = MyBase.Columns("SerailNo")
            Me.columnRefCode = MyBase.Columns("RefCode")
            Me.columnPlate = MyBase.Columns("Plate")
            Me.columnPoerp = MyBase.Columns("Poerp")
            Me.columnCapex = MyBase.Columns("Capex")
            Me.columnGrn = MyBase.Columns("Grn")
            Me.columnGLCode = MyBase.Columns("GLCode")
            Me.columnAstCatID = MyBase.Columns("AstCatID")
            Me.columnCatFullPath = MyBase.Columns("CatFullPath")
            Me.columnLocationFullPath = MyBase.Columns("LocationFullPath")
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnCustodianCode = MyBase.Columns("CustodianCode")
            Me.columnAstDesc1 = MyBase.Columns("AstDesc1")
            Me.columnAstDesc2 = MyBase.Columns("AstDesc2")
            Me.columnItemDesc = MyBase.Columns("ItemDesc")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnDisposalComments = MyBase.Columns("DisposalComments")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAstNum = New Global.System.Data.DataColumn("AstNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstNum)
            Me.columnDispDate = New Global.System.Data.DataColumn("DispDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDispDate)
            Me.columnDispDesc = New Global.System.Data.DataColumn("DispDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDispDesc)
            Me.columnTransRemarks = New Global.System.Data.DataColumn("TransRemarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransRemarks)
            Me.columnSel_Price = New Global.System.Data.DataColumn("Sel_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSel_Price)
            Me.columnSel_Date = New Global.System.Data.DataColumn("Sel_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSel_Date)
            Me.columnAstID = New Global.System.Data.DataColumn("AstID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstID)
            Me.columnIsSold = New Global.System.Data.DataColumn("IsSold", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSold)
            Me.columnSoldTo = New Global.System.Data.DataColumn("SoldTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSoldTo)
            Me.columnRefNo = New Global.System.Data.DataColumn("RefNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefNo)
            Me.columnCompCode = New Global.System.Data.DataColumn("CompCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompCode)
            Me.columnCustodianName = New Global.System.Data.DataColumn("CustodianName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianName)
            Me.columnAstCatDesc = New Global.System.Data.DataColumn("AstCatDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatDesc)
            Me.columnPurDate = New Global.System.Data.DataColumn("PurDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurDate)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnBaseCost = New Global.System.Data.DataColumn("BaseCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseCost)
            Me.columnTax = New Global.System.Data.DataColumn("Tax", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax)
            Me.columnDiscount = New Global.System.Data.DataColumn("Discount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscount)
            Me.columntot = New Global.System.Data.DataColumn("tot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntot)
            Me.columnInvNumber = New Global.System.Data.DataColumn("InvNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvNumber)
            Me.columnSuppName = New Global.System.Data.DataColumn("SuppName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppName)
            Me.columnInsName = New Global.System.Data.DataColumn("InsName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsName)
            Me.columnLocID = New Global.System.Data.DataColumn("LocID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocID)
            Me.columnAstBrandName = New Global.System.Data.DataColumn("AstBrandName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstBrandName)
            Me.columnSrvDate = New Global.System.Data.DataColumn("SrvDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrvDate)
            Me.columnAstModel = New Global.System.Data.DataColumn("AstModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstModel)
            Me.columnDisposed = New Global.System.Data.DataColumn("Disposed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisposed)
            Me.columnBarCode = New Global.System.Data.DataColumn("BarCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarCode)
            Me.columnSerailNo = New Global.System.Data.DataColumn("SerailNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerailNo)
            Me.columnRefCode = New Global.System.Data.DataColumn("RefCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefCode)
            Me.columnPlate = New Global.System.Data.DataColumn("Plate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlate)
            Me.columnPoerp = New Global.System.Data.DataColumn("Poerp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoerp)
            Me.columnCapex = New Global.System.Data.DataColumn("Capex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapex)
            Me.columnGrn = New Global.System.Data.DataColumn("Grn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrn)
            Me.columnGLCode = New Global.System.Data.DataColumn("GLCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLCode)
            Me.columnAstCatID = New Global.System.Data.DataColumn("AstCatID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatID)
            Me.columnCatFullPath = New Global.System.Data.DataColumn("CatFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCatFullPath)
            Me.columnLocationFullPath = New Global.System.Data.DataColumn("LocationFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationFullPath)
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnCustodianCode = New Global.System.Data.DataColumn("CustodianCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianCode)
            Me.columnAstDesc1 = New Global.System.Data.DataColumn("AstDesc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc1)
            Me.columnAstDesc2 = New Global.System.Data.DataColumn("AstDesc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc2)
            Me.columnItemDesc = New Global.System.Data.DataColumn("ItemDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDesc)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnDisposalComments = New Global.System.Data.DataColumn("DisposalComments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisposalComments)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAstID}, true))
            Me.columnAstNum.AllowDBNull = false
            Me.columnDispDesc.MaxLength = 50
            Me.columnTransRemarks.MaxLength = 200
            Me.columnAstID.AllowDBNull = false
            Me.columnAstID.Unique = true
            Me.columnAstID.MaxLength = 25
            Me.columnSoldTo.MaxLength = 50
            Me.columnRefNo.MaxLength = 50
            Me.columnCompCode.MaxLength = 255
            Me.columnCustodianName.MaxLength = 100
            Me.columnAstCatDesc.MaxLength = 100
            Me.columnDescription.MaxLength = 200
            Me.columntot.ReadOnly = true
            Me.columnInvNumber.MaxLength = 25
            Me.columnSuppName.MaxLength = 100
            Me.columnInsName.MaxLength = 25
            Me.columnLocID.MaxLength = 255
            Me.columnAstBrandName.MaxLength = 100
            Me.columnAstModel.MaxLength = 50
            Me.columnBarCode.MaxLength = 50
            Me.columnSerailNo.MaxLength = 50
            Me.columnRefCode.MaxLength = 50
            Me.columnPlate.MaxLength = 50
            Me.columnPoerp.MaxLength = 50
            Me.columnCapex.MaxLength = 50
            Me.columnGrn.MaxLength = 50
            Me.columnAstCatID.MaxLength = 25
            Me.columnCatFullPath.MaxLength = 1073741823
            Me.columnLocationFullPath.MaxLength = 1073741823
            Me.columnCustodianID.AllowDBNull = false
            Me.columnCustodianID.MaxLength = 25
            Me.columnCustodianCode.MaxLength = 255
            Me.columnAstDesc1.MaxLength = 200
            Me.columnAstDesc2.MaxLength = 200
            Me.columnItemDesc.MaxLength = 200
            Me.columnItemCode.AllowDBNull = false
            Me.columnItemCode.MaxLength = 25
            Me.columnDisposalComments.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDisposedAssetsRow() As DisposedAssetsRow
            Return CType(Me.NewRow,DisposedAssetsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DisposedAssetsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DisposedAssetsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DisposedAssetsRowChangedEvent) Is Nothing) Then
                RaiseEvent DisposedAssetsRowChanged(Me, New DisposedAssetsRowChangeEvent(CType(e.Row,DisposedAssetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DisposedAssetsRowChangingEvent) Is Nothing) Then
                RaiseEvent DisposedAssetsRowChanging(Me, New DisposedAssetsRowChangeEvent(CType(e.Row,DisposedAssetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DisposedAssetsRowDeletedEvent) Is Nothing) Then
                RaiseEvent DisposedAssetsRowDeleted(Me, New DisposedAssetsRowChangeEvent(CType(e.Row,DisposedAssetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DisposedAssetsRowDeletingEvent) Is Nothing) Then
                RaiseEvent DisposedAssetsRowDeleting(Me, New DisposedAssetsRowChangeEvent(CType(e.Row,DisposedAssetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDisposedAssetsRow(ByVal row As DisposedAssetsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DisposedAssetsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AuditSatusDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnInvSchCode As Global.System.Data.DataColumn
        
        Private columnAstID As Global.System.Data.DataColumn
        
        Private columnAstNum As Global.System.Data.DataColumn
        
        Private columnNewLoc As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnStatusDesc As Global.System.Data.DataColumn
        
        Private columnHisDate As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnAstModel As Global.System.Data.DataColumn
        
        Private columnSerailNo As Global.System.Data.DataColumn
        
        Private columnAstCatID As Global.System.Data.DataColumn
        
        Private columnCatFullPath As Global.System.Data.DataColumn
        
        Private columnPrevLoc As Global.System.Data.DataColumn
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnCustodianName As Global.System.Data.DataColumn
        
        Private columnAstDesc1 As Global.System.Data.DataColumn
        
        Private columnAstDesc2 As Global.System.Data.DataColumn
        
        Private columnItemDesc As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnCustodianCode As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AuditSatus"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvSchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvSchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewLocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewLoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HisDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHisDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerailNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerailNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCatFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrevLocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrevLoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AuditSatusRow
            Get
                Return CType(Me.Rows(index),AuditSatusRow)
            End Get
        End Property
        
        Public Event AuditSatusRowChanging As AuditSatusRowChangeEventHandler
        
        Public Event AuditSatusRowChanged As AuditSatusRowChangeEventHandler
        
        Public Event AuditSatusRowDeleting As AuditSatusRowChangeEventHandler
        
        Public Event AuditSatusRowDeleted As AuditSatusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAuditSatusRow(ByVal row As AuditSatusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAuditSatusRow( _
                    ByVal InvSchCode As Long,  _
                    ByVal AstID As String,  _
                    ByVal AstNum As Long,  _
                    ByVal NewLoc As String,  _
                    ByVal Status As Integer,  _
                    ByVal StatusDesc As String,  _
                    ByVal HisDate As Date,  _
                    ByVal Description As String,  _
                    ByVal AstModel As String,  _
                    ByVal SerailNo As String,  _
                    ByVal AstCatID As String,  _
                    ByVal CatFullPath As String,  _
                    ByVal PrevLoc As String,  _
                    ByVal CustodianID As String,  _
                    ByVal CustodianName As String,  _
                    ByVal AstDesc1 As String,  _
                    ByVal AstDesc2 As String,  _
                    ByVal ItemDesc As String,  _
                    ByVal ItemCode As String,  _
                    ByVal CustodianCode As String,  _
                    ByVal Remarks As String) As AuditSatusRow
            Dim rowAuditSatusRow As AuditSatusRow = CType(Me.NewRow,AuditSatusRow)
            Dim columnValuesArray() As Object = New Object() {InvSchCode, AstID, AstNum, NewLoc, Status, StatusDesc, HisDate, Description, AstModel, SerailNo, AstCatID, CatFullPath, PrevLoc, CustodianID, CustodianName, AstDesc1, AstDesc2, ItemDesc, ItemCode, CustodianCode, Remarks}
            rowAuditSatusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAuditSatusRow)
            Return rowAuditSatusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAstID(ByVal AstID As String) As AuditSatusRow
            Return CType(Me.Rows.Find(New Object() {AstID}),AuditSatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AuditSatusDataTable = CType(MyBase.Clone,AuditSatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AuditSatusDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnInvSchCode = MyBase.Columns("InvSchCode")
            Me.columnAstID = MyBase.Columns("AstID")
            Me.columnAstNum = MyBase.Columns("AstNum")
            Me.columnNewLoc = MyBase.Columns("NewLoc")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnStatusDesc = MyBase.Columns("StatusDesc")
            Me.columnHisDate = MyBase.Columns("HisDate")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnAstModel = MyBase.Columns("AstModel")
            Me.columnSerailNo = MyBase.Columns("SerailNo")
            Me.columnAstCatID = MyBase.Columns("AstCatID")
            Me.columnCatFullPath = MyBase.Columns("CatFullPath")
            Me.columnPrevLoc = MyBase.Columns("PrevLoc")
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnCustodianName = MyBase.Columns("CustodianName")
            Me.columnAstDesc1 = MyBase.Columns("AstDesc1")
            Me.columnAstDesc2 = MyBase.Columns("AstDesc2")
            Me.columnItemDesc = MyBase.Columns("ItemDesc")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnCustodianCode = MyBase.Columns("CustodianCode")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnInvSchCode = New Global.System.Data.DataColumn("InvSchCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvSchCode)
            Me.columnAstID = New Global.System.Data.DataColumn("AstID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstID)
            Me.columnAstNum = New Global.System.Data.DataColumn("AstNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstNum)
            Me.columnNewLoc = New Global.System.Data.DataColumn("NewLoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewLoc)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnStatusDesc = New Global.System.Data.DataColumn("StatusDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusDesc)
            Me.columnHisDate = New Global.System.Data.DataColumn("HisDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHisDate)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnAstModel = New Global.System.Data.DataColumn("AstModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstModel)
            Me.columnSerailNo = New Global.System.Data.DataColumn("SerailNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerailNo)
            Me.columnAstCatID = New Global.System.Data.DataColumn("AstCatID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatID)
            Me.columnCatFullPath = New Global.System.Data.DataColumn("CatFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCatFullPath)
            Me.columnPrevLoc = New Global.System.Data.DataColumn("PrevLoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrevLoc)
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnCustodianName = New Global.System.Data.DataColumn("CustodianName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianName)
            Me.columnAstDesc1 = New Global.System.Data.DataColumn("AstDesc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc1)
            Me.columnAstDesc2 = New Global.System.Data.DataColumn("AstDesc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc2)
            Me.columnItemDesc = New Global.System.Data.DataColumn("ItemDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDesc)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnCustodianCode = New Global.System.Data.DataColumn("CustodianCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianCode)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAstID}, true))
            Me.columnAstID.AllowDBNull = false
            Me.columnAstID.Unique = true
            Me.columnAstID.MaxLength = 25
            Me.columnNewLoc.MaxLength = 100
            Me.columnStatusDesc.MaxLength = 50
            Me.columnDescription.MaxLength = 200
            Me.columnAstModel.MaxLength = 50
            Me.columnSerailNo.MaxLength = 50
            Me.columnAstCatID.MaxLength = 25
            Me.columnCatFullPath.MaxLength = 1073741823
            Me.columnPrevLoc.MaxLength = 1073741823
            Me.columnCustodianID.MaxLength = 25
            Me.columnCustodianName.MaxLength = 100
            Me.columnAstDesc1.MaxLength = 200
            Me.columnAstDesc2.MaxLength = 200
            Me.columnItemDesc.MaxLength = 200
            Me.columnItemCode.MaxLength = 25
            Me.columnCustodianCode.MaxLength = 255
            Me.columnRemarks.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAuditSatusRow() As AuditSatusRow
            Return CType(Me.NewRow,AuditSatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AuditSatusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AuditSatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AuditSatusRowChangedEvent) Is Nothing) Then
                RaiseEvent AuditSatusRowChanged(Me, New AuditSatusRowChangeEvent(CType(e.Row,AuditSatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AuditSatusRowChangingEvent) Is Nothing) Then
                RaiseEvent AuditSatusRowChanging(Me, New AuditSatusRowChangeEvent(CType(e.Row,AuditSatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AuditSatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent AuditSatusRowDeleted(Me, New AuditSatusRowChangeEvent(CType(e.Row,AuditSatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AuditSatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent AuditSatusRowDeleting(Me, New AuditSatusRowChangeEvent(CType(e.Row,AuditSatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAuditSatusRow(ByVal row As AuditSatusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AuditSatusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ItemsInventoryDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnItemcode As Global.System.Data.DataColumn
        
        Private columnAstDesc As Global.System.Data.DataColumn
        
        Private columntotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ItemsInventory"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ItemsInventoryRow
            Get
                Return CType(Me.Rows(index),ItemsInventoryRow)
            End Get
        End Property
        
        Public Event ItemsInventoryRowChanging As ItemsInventoryRowChangeEventHandler
        
        Public Event ItemsInventoryRowChanged As ItemsInventoryRowChangeEventHandler
        
        Public Event ItemsInventoryRowDeleting As ItemsInventoryRowChangeEventHandler
        
        Public Event ItemsInventoryRowDeleted As ItemsInventoryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddItemsInventoryRow(ByVal row As ItemsInventoryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddItemsInventoryRow(ByVal Itemcode As String, ByVal AstDesc As String, ByVal total As Integer) As ItemsInventoryRow
            Dim rowItemsInventoryRow As ItemsInventoryRow = CType(Me.NewRow,ItemsInventoryRow)
            Dim columnValuesArray() As Object = New Object() {Itemcode, AstDesc, total}
            rowItemsInventoryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowItemsInventoryRow)
            Return rowItemsInventoryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ItemsInventoryDataTable = CType(MyBase.Clone,ItemsInventoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ItemsInventoryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItemcode = MyBase.Columns("Itemcode")
            Me.columnAstDesc = MyBase.Columns("AstDesc")
            Me.columntotal = MyBase.Columns("total")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItemcode = New Global.System.Data.DataColumn("Itemcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemcode)
            Me.columnAstDesc = New Global.System.Data.DataColumn("AstDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc)
            Me.columntotal = New Global.System.Data.DataColumn("total", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal)
            Me.columnItemcode.AllowDBNull = false
            Me.columnItemcode.MaxLength = 25
            Me.columnAstDesc.MaxLength = 100
            Me.columntotal.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewItemsInventoryRow() As ItemsInventoryRow
            Return CType(Me.NewRow,ItemsInventoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ItemsInventoryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ItemsInventoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ItemsInventoryRowChangedEvent) Is Nothing) Then
                RaiseEvent ItemsInventoryRowChanged(Me, New ItemsInventoryRowChangeEvent(CType(e.Row,ItemsInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ItemsInventoryRowChangingEvent) Is Nothing) Then
                RaiseEvent ItemsInventoryRowChanging(Me, New ItemsInventoryRowChangeEvent(CType(e.Row,ItemsInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ItemsInventoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent ItemsInventoryRowDeleted(Me, New ItemsInventoryRowChangeEvent(CType(e.Row,ItemsInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ItemsInventoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent ItemsInventoryRowDeleting(Me, New ItemsInventoryRowChangeEvent(CType(e.Row,ItemsInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveItemsInventoryRow(ByVal row As ItemsInventoryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ItemsInventoryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CompanyAssetsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAstID As Global.System.Data.DataColumn
        
        Private columnPurDate As Global.System.Data.DataColumn
        
        Private columnCustodianName As Global.System.Data.DataColumn
        
        Private columnAstNum As Global.System.Data.DataColumn
        
        Private columnRefNo As Global.System.Data.DataColumn
        
        Private columnAstCatDesc As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnBaseCost As Global.System.Data.DataColumn
        
        Private columnTax As Global.System.Data.DataColumn
        
        Private columnDiscount As Global.System.Data.DataColumn
        
        Private columntot As Global.System.Data.DataColumn
        
        Private columnInvNumber As Global.System.Data.DataColumn
        
        Private columnSuppName As Global.System.Data.DataColumn
        
        Private columnInsName As Global.System.Data.DataColumn
        
        Private columnCompCode As Global.System.Data.DataColumn
        
        Private columnLocID As Global.System.Data.DataColumn
        
        Private columnLocCompletePath As Global.System.Data.DataColumn
        
        Private columnAstBrandName As Global.System.Data.DataColumn
        
        Private columnSrvDate As Global.System.Data.DataColumn
        
        Private columnAstModel As Global.System.Data.DataColumn
        
        Private columnDispDate As Global.System.Data.DataColumn
        
        Private columnDisposed As Global.System.Data.DataColumn
        
        Private columnBarCode As Global.System.Data.DataColumn
        
        Private columnSerailNo As Global.System.Data.DataColumn
        
        Private columnRefCode As Global.System.Data.DataColumn
        
        Private columnPlate As Global.System.Data.DataColumn
        
        Private columnPoerp As Global.System.Data.DataColumn
        
        Private columnCapex As Global.System.Data.DataColumn
        
        Private columnGrn As Global.System.Data.DataColumn
        
        Private columnGLCode As Global.System.Data.DataColumn
        
        Private columnAstCatID As Global.System.Data.DataColumn
        
        Private columnCatFullPath As Global.System.Data.DataColumn
        
        Private columnLocationFullPath As Global.System.Data.DataColumn
        
        Private columnAstDesc1 As Global.System.Data.DataColumn
        
        Private columnAstDesc2 As Global.System.Data.DataColumn
        
        Private columnItemDesc As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnCompanyCode As Global.System.Data.DataColumn
        
        Private columnCompanyName As Global.System.Data.DataColumn
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnCustodianCode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CompanyAssets"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocCompletePathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocCompletePath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstBrandNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstBrandName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrvDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrvDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DispDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDispDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisposedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisposed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerailNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerailNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PoerpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoerp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCatFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CompanyAssetsRow
            Get
                Return CType(Me.Rows(index),CompanyAssetsRow)
            End Get
        End Property
        
        Public Event CompanyAssetsRowChanging As CompanyAssetsRowChangeEventHandler
        
        Public Event CompanyAssetsRowChanged As CompanyAssetsRowChangeEventHandler
        
        Public Event CompanyAssetsRowDeleting As CompanyAssetsRowChangeEventHandler
        
        Public Event CompanyAssetsRowDeleted As CompanyAssetsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCompanyAssetsRow(ByVal row As CompanyAssetsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCompanyAssetsRow( _
                    ByVal AstID As String,  _
                    ByVal PurDate As Date,  _
                    ByVal CustodianName As String,  _
                    ByVal AstNum As Long,  _
                    ByVal RefNo As String,  _
                    ByVal AstCatDesc As String,  _
                    ByVal Description As String,  _
                    ByVal BaseCost As Double,  _
                    ByVal Tax As Double,  _
                    ByVal Discount As Long,  _
                    ByVal tot As Double,  _
                    ByVal InvNumber As String,  _
                    ByVal SuppName As String,  _
                    ByVal InsName As String,  _
                    ByVal CompCode As String,  _
                    ByVal LocID As String,  _
                    ByVal LocCompletePath As String,  _
                    ByVal AstBrandName As String,  _
                    ByVal SrvDate As Date,  _
                    ByVal AstModel As String,  _
                    ByVal DispDate As Date,  _
                    ByVal Disposed As Boolean,  _
                    ByVal BarCode As String,  _
                    ByVal SerailNo As String,  _
                    ByVal RefCode As String,  _
                    ByVal Plate As String,  _
                    ByVal Poerp As String,  _
                    ByVal Capex As String,  _
                    ByVal Grn As String,  _
                    ByVal GLCode As Long,  _
                    ByVal AstCatID As String,  _
                    ByVal CatFullPath As String,  _
                    ByVal LocationFullPath As String,  _
                    ByVal AstDesc1 As String,  _
                    ByVal AstDesc2 As String,  _
                    ByVal ItemDesc As String,  _
                    ByVal ItemCode As String,  _
                    ByVal CompanyCode As String,  _
                    ByVal CompanyName As String,  _
                    ByVal CustodianID As String,  _
                    ByVal CustodianCode As String) As CompanyAssetsRow
            Dim rowCompanyAssetsRow As CompanyAssetsRow = CType(Me.NewRow,CompanyAssetsRow)
            Dim columnValuesArray() As Object = New Object() {AstID, PurDate, CustodianName, AstNum, RefNo, AstCatDesc, Description, BaseCost, Tax, Discount, tot, InvNumber, SuppName, InsName, CompCode, LocID, LocCompletePath, AstBrandName, SrvDate, AstModel, DispDate, Disposed, BarCode, SerailNo, RefCode, Plate, Poerp, Capex, Grn, GLCode, AstCatID, CatFullPath, LocationFullPath, AstDesc1, AstDesc2, ItemDesc, ItemCode, CompanyCode, CompanyName, CustodianID, CustodianCode}
            rowCompanyAssetsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCompanyAssetsRow)
            Return rowCompanyAssetsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAstID(ByVal AstID As String) As CompanyAssetsRow
            Return CType(Me.Rows.Find(New Object() {AstID}),CompanyAssetsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CompanyAssetsDataTable = CType(MyBase.Clone,CompanyAssetsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CompanyAssetsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAstID = MyBase.Columns("AstID")
            Me.columnPurDate = MyBase.Columns("PurDate")
            Me.columnCustodianName = MyBase.Columns("CustodianName")
            Me.columnAstNum = MyBase.Columns("AstNum")
            Me.columnRefNo = MyBase.Columns("RefNo")
            Me.columnAstCatDesc = MyBase.Columns("AstCatDesc")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnBaseCost = MyBase.Columns("BaseCost")
            Me.columnTax = MyBase.Columns("Tax")
            Me.columnDiscount = MyBase.Columns("Discount")
            Me.columntot = MyBase.Columns("tot")
            Me.columnInvNumber = MyBase.Columns("InvNumber")
            Me.columnSuppName = MyBase.Columns("SuppName")
            Me.columnInsName = MyBase.Columns("InsName")
            Me.columnCompCode = MyBase.Columns("CompCode")
            Me.columnLocID = MyBase.Columns("LocID")
            Me.columnLocCompletePath = MyBase.Columns("LocCompletePath")
            Me.columnAstBrandName = MyBase.Columns("AstBrandName")
            Me.columnSrvDate = MyBase.Columns("SrvDate")
            Me.columnAstModel = MyBase.Columns("AstModel")
            Me.columnDispDate = MyBase.Columns("DispDate")
            Me.columnDisposed = MyBase.Columns("Disposed")
            Me.columnBarCode = MyBase.Columns("BarCode")
            Me.columnSerailNo = MyBase.Columns("SerailNo")
            Me.columnRefCode = MyBase.Columns("RefCode")
            Me.columnPlate = MyBase.Columns("Plate")
            Me.columnPoerp = MyBase.Columns("Poerp")
            Me.columnCapex = MyBase.Columns("Capex")
            Me.columnGrn = MyBase.Columns("Grn")
            Me.columnGLCode = MyBase.Columns("GLCode")
            Me.columnAstCatID = MyBase.Columns("AstCatID")
            Me.columnCatFullPath = MyBase.Columns("CatFullPath")
            Me.columnLocationFullPath = MyBase.Columns("LocationFullPath")
            Me.columnAstDesc1 = MyBase.Columns("AstDesc1")
            Me.columnAstDesc2 = MyBase.Columns("AstDesc2")
            Me.columnItemDesc = MyBase.Columns("ItemDesc")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnCompanyCode = MyBase.Columns("CompanyCode")
            Me.columnCompanyName = MyBase.Columns("CompanyName")
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnCustodianCode = MyBase.Columns("CustodianCode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAstID = New Global.System.Data.DataColumn("AstID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstID)
            Me.columnPurDate = New Global.System.Data.DataColumn("PurDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurDate)
            Me.columnCustodianName = New Global.System.Data.DataColumn("CustodianName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianName)
            Me.columnAstNum = New Global.System.Data.DataColumn("AstNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstNum)
            Me.columnRefNo = New Global.System.Data.DataColumn("RefNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefNo)
            Me.columnAstCatDesc = New Global.System.Data.DataColumn("AstCatDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatDesc)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnBaseCost = New Global.System.Data.DataColumn("BaseCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseCost)
            Me.columnTax = New Global.System.Data.DataColumn("Tax", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax)
            Me.columnDiscount = New Global.System.Data.DataColumn("Discount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscount)
            Me.columntot = New Global.System.Data.DataColumn("tot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntot)
            Me.columnInvNumber = New Global.System.Data.DataColumn("InvNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvNumber)
            Me.columnSuppName = New Global.System.Data.DataColumn("SuppName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppName)
            Me.columnInsName = New Global.System.Data.DataColumn("InsName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsName)
            Me.columnCompCode = New Global.System.Data.DataColumn("CompCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompCode)
            Me.columnLocID = New Global.System.Data.DataColumn("LocID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocID)
            Me.columnLocCompletePath = New Global.System.Data.DataColumn("LocCompletePath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocCompletePath)
            Me.columnAstBrandName = New Global.System.Data.DataColumn("AstBrandName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstBrandName)
            Me.columnSrvDate = New Global.System.Data.DataColumn("SrvDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrvDate)
            Me.columnAstModel = New Global.System.Data.DataColumn("AstModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstModel)
            Me.columnDispDate = New Global.System.Data.DataColumn("DispDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDispDate)
            Me.columnDisposed = New Global.System.Data.DataColumn("Disposed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisposed)
            Me.columnBarCode = New Global.System.Data.DataColumn("BarCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarCode)
            Me.columnSerailNo = New Global.System.Data.DataColumn("SerailNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerailNo)
            Me.columnRefCode = New Global.System.Data.DataColumn("RefCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefCode)
            Me.columnPlate = New Global.System.Data.DataColumn("Plate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlate)
            Me.columnPoerp = New Global.System.Data.DataColumn("Poerp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoerp)
            Me.columnCapex = New Global.System.Data.DataColumn("Capex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapex)
            Me.columnGrn = New Global.System.Data.DataColumn("Grn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrn)
            Me.columnGLCode = New Global.System.Data.DataColumn("GLCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLCode)
            Me.columnAstCatID = New Global.System.Data.DataColumn("AstCatID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatID)
            Me.columnCatFullPath = New Global.System.Data.DataColumn("CatFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCatFullPath)
            Me.columnLocationFullPath = New Global.System.Data.DataColumn("LocationFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationFullPath)
            Me.columnAstDesc1 = New Global.System.Data.DataColumn("AstDesc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc1)
            Me.columnAstDesc2 = New Global.System.Data.DataColumn("AstDesc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc2)
            Me.columnItemDesc = New Global.System.Data.DataColumn("ItemDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDesc)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnCompanyCode = New Global.System.Data.DataColumn("CompanyCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyCode)
            Me.columnCompanyName = New Global.System.Data.DataColumn("CompanyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyName)
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnCustodianCode = New Global.System.Data.DataColumn("CustodianCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianCode)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAstID}, true))
            Me.columnAstID.AllowDBNull = false
            Me.columnAstID.Unique = true
            Me.columnAstID.MaxLength = 50
            Me.columnCustodianName.MaxLength = 50
            Me.columnAstNum.AllowDBNull = false
            Me.columnRefNo.MaxLength = 50
            Me.columnAstCatDesc.MaxLength = 100
            Me.columnDescription.MaxLength = 200
            Me.columntot.ReadOnly = true
            Me.columnInvNumber.MaxLength = 25
            Me.columnSuppName.MaxLength = 100
            Me.columnInsName.MaxLength = 25
            Me.columnCompCode.MaxLength = 255
            Me.columnLocID.MaxLength = 255
            Me.columnAstBrandName.MaxLength = 100
            Me.columnAstModel.MaxLength = 50
            Me.columnBarCode.MaxLength = 50
            Me.columnSerailNo.MaxLength = 50
            Me.columnRefCode.MaxLength = 50
            Me.columnPlate.MaxLength = 50
            Me.columnPoerp.MaxLength = 50
            Me.columnCapex.MaxLength = 50
            Me.columnGrn.MaxLength = 50
            Me.columnAstCatID.MaxLength = 25
            Me.columnCatFullPath.MaxLength = 2147483647
            Me.columnLocationFullPath.MaxLength = 2147483647
            Me.columnAstDesc1.MaxLength = 200
            Me.columnAstDesc2.MaxLength = 200
            Me.columnItemDesc.MaxLength = 100
            Me.columnItemCode.AllowDBNull = false
            Me.columnItemCode.MaxLength = 25
            Me.columnCompanyCode.MaxLength = 50
            Me.columnCompanyName.MaxLength = 50
            Me.columnCustodianID.AllowDBNull = false
            Me.columnCustodianID.MaxLength = 25
            Me.columnCustodianCode.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCompanyAssetsRow() As CompanyAssetsRow
            Return CType(Me.NewRow,CompanyAssetsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CompanyAssetsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CompanyAssetsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CompanyAssetsRowChangedEvent) Is Nothing) Then
                RaiseEvent CompanyAssetsRowChanged(Me, New CompanyAssetsRowChangeEvent(CType(e.Row,CompanyAssetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CompanyAssetsRowChangingEvent) Is Nothing) Then
                RaiseEvent CompanyAssetsRowChanging(Me, New CompanyAssetsRowChangeEvent(CType(e.Row,CompanyAssetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CompanyAssetsRowDeletedEvent) Is Nothing) Then
                RaiseEvent CompanyAssetsRowDeleted(Me, New CompanyAssetsRowChangeEvent(CType(e.Row,CompanyAssetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CompanyAssetsRowDeletingEvent) Is Nothing) Then
                RaiseEvent CompanyAssetsRowDeleting(Me, New CompanyAssetsRowChangeEvent(CType(e.Row,CompanyAssetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCompanyAssetsRow(ByVal row As CompanyAssetsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CompanyAssetsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssetByCatDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMainCat As Global.System.Data.DataColumn
        
        Private columnInvest_OB As Global.System.Data.DataColumn
        
        Private columnInvest_Add As Global.System.Data.DataColumn
        
        Private columnInvest_Ded As Global.System.Data.DataColumn
        
        Private columnInvest_CB As Global.System.Data.DataColumn
        
        Private columnDepr_OB As Global.System.Data.DataColumn
        
        Private columnDepr_Add As Global.System.Data.DataColumn
        
        Private columnDepr_Ded As Global.System.Data.DataColumn
        
        Private columnDepr_CB As Global.System.Data.DataColumn
        
        Private columnNetValue As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssetByCat"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MainCatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMainCat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Invest_OBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvest_OB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Invest_AddColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvest_Add
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Invest_DedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvest_Ded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Invest_CBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvest_CB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Depr_OBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepr_OB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Depr_AddColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepr_Add
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Depr_DedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepr_Ded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Depr_CBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepr_CB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NetValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNetValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssetByCatRow
            Get
                Return CType(Me.Rows(index),AssetByCatRow)
            End Get
        End Property
        
        Public Event AssetByCatRowChanging As AssetByCatRowChangeEventHandler
        
        Public Event AssetByCatRowChanged As AssetByCatRowChangeEventHandler
        
        Public Event AssetByCatRowDeleting As AssetByCatRowChangeEventHandler
        
        Public Event AssetByCatRowDeleted As AssetByCatRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssetByCatRow(ByVal row As AssetByCatRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssetByCatRow(ByVal MainCat As String, ByVal Invest_OB As Double, ByVal Invest_Add As Double, ByVal Invest_Ded As Double, ByVal Invest_CB As Double, ByVal Depr_OB As Double, ByVal Depr_Add As Double, ByVal Depr_Ded As Double, ByVal Depr_CB As Double, ByVal NetValue As Double) As AssetByCatRow
            Dim rowAssetByCatRow As AssetByCatRow = CType(Me.NewRow,AssetByCatRow)
            Dim columnValuesArray() As Object = New Object() {MainCat, Invest_OB, Invest_Add, Invest_Ded, Invest_CB, Depr_OB, Depr_Add, Depr_Ded, Depr_CB, NetValue}
            rowAssetByCatRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAssetByCatRow)
            Return rowAssetByCatRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AssetByCatDataTable = CType(MyBase.Clone,AssetByCatDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AssetByCatDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMainCat = MyBase.Columns("MainCat")
            Me.columnInvest_OB = MyBase.Columns("Invest_OB")
            Me.columnInvest_Add = MyBase.Columns("Invest_Add")
            Me.columnInvest_Ded = MyBase.Columns("Invest_Ded")
            Me.columnInvest_CB = MyBase.Columns("Invest_CB")
            Me.columnDepr_OB = MyBase.Columns("Depr_OB")
            Me.columnDepr_Add = MyBase.Columns("Depr_Add")
            Me.columnDepr_Ded = MyBase.Columns("Depr_Ded")
            Me.columnDepr_CB = MyBase.Columns("Depr_CB")
            Me.columnNetValue = MyBase.Columns("NetValue")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMainCat = New Global.System.Data.DataColumn("MainCat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMainCat)
            Me.columnInvest_OB = New Global.System.Data.DataColumn("Invest_OB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvest_OB)
            Me.columnInvest_Add = New Global.System.Data.DataColumn("Invest_Add", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvest_Add)
            Me.columnInvest_Ded = New Global.System.Data.DataColumn("Invest_Ded", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvest_Ded)
            Me.columnInvest_CB = New Global.System.Data.DataColumn("Invest_CB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvest_CB)
            Me.columnDepr_OB = New Global.System.Data.DataColumn("Depr_OB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepr_OB)
            Me.columnDepr_Add = New Global.System.Data.DataColumn("Depr_Add", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepr_Add)
            Me.columnDepr_Ded = New Global.System.Data.DataColumn("Depr_Ded", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepr_Ded)
            Me.columnDepr_CB = New Global.System.Data.DataColumn("Depr_CB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepr_CB)
            Me.columnNetValue = New Global.System.Data.DataColumn("NetValue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNetValue)
            Me.columnMainCat.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssetByCatRow() As AssetByCatRow
            Return CType(Me.NewRow,AssetByCatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AssetByCatRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AssetByCatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssetByCatRowChangedEvent) Is Nothing) Then
                RaiseEvent AssetByCatRowChanged(Me, New AssetByCatRowChangeEvent(CType(e.Row,AssetByCatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssetByCatRowChangingEvent) Is Nothing) Then
                RaiseEvent AssetByCatRowChanging(Me, New AssetByCatRowChangeEvent(CType(e.Row,AssetByCatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssetByCatRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssetByCatRowDeleted(Me, New AssetByCatRowChangeEvent(CType(e.Row,AssetByCatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssetByCatRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssetByCatRowDeleting(Me, New AssetByCatRowChangeEvent(CType(e.Row,AssetByCatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssetByCatRow(ByVal row As AssetByCatRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssetByCatDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SupplierDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSuppID As Global.System.Data.DataColumn
        
        Private columnSuppName As Global.System.Data.DataColumn
        
        Private columnSuppCell As Global.System.Data.DataColumn
        
        Private columnSuppFax As Global.System.Data.DataColumn
        
        Private columnSuppPhone As Global.System.Data.DataColumn
        
        Private columnSuppEmail As Global.System.Data.DataColumn
        
        Private columnIsDeleted As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Supplier"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppCellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppCell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppFaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SupplierRow
            Get
                Return CType(Me.Rows(index),SupplierRow)
            End Get
        End Property
        
        Public Event SupplierRowChanging As SupplierRowChangeEventHandler
        
        Public Event SupplierRowChanged As SupplierRowChangeEventHandler
        
        Public Event SupplierRowDeleting As SupplierRowChangeEventHandler
        
        Public Event SupplierRowDeleted As SupplierRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSupplierRow(ByVal row As SupplierRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSupplierRow(ByVal SuppID As String, ByVal SuppName As String, ByVal SuppCell As String, ByVal SuppFax As String, ByVal SuppPhone As String, ByVal SuppEmail As String, ByVal IsDeleted As Boolean) As SupplierRow
            Dim rowSupplierRow As SupplierRow = CType(Me.NewRow,SupplierRow)
            Dim columnValuesArray() As Object = New Object() {SuppID, SuppName, SuppCell, SuppFax, SuppPhone, SuppEmail, IsDeleted}
            rowSupplierRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSupplierRow)
            Return rowSupplierRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySuppID(ByVal SuppID As String) As SupplierRow
            Return CType(Me.Rows.Find(New Object() {SuppID}),SupplierRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SupplierDataTable = CType(MyBase.Clone,SupplierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SupplierDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSuppID = MyBase.Columns("SuppID")
            Me.columnSuppName = MyBase.Columns("SuppName")
            Me.columnSuppCell = MyBase.Columns("SuppCell")
            Me.columnSuppFax = MyBase.Columns("SuppFax")
            Me.columnSuppPhone = MyBase.Columns("SuppPhone")
            Me.columnSuppEmail = MyBase.Columns("SuppEmail")
            Me.columnIsDeleted = MyBase.Columns("IsDeleted")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSuppID = New Global.System.Data.DataColumn("SuppID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppID)
            Me.columnSuppName = New Global.System.Data.DataColumn("SuppName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppName)
            Me.columnSuppCell = New Global.System.Data.DataColumn("SuppCell", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppCell)
            Me.columnSuppFax = New Global.System.Data.DataColumn("SuppFax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppFax)
            Me.columnSuppPhone = New Global.System.Data.DataColumn("SuppPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppPhone)
            Me.columnSuppEmail = New Global.System.Data.DataColumn("SuppEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppEmail)
            Me.columnIsDeleted = New Global.System.Data.DataColumn("IsDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDeleted)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSuppID}, true))
            Me.columnSuppID.AllowDBNull = false
            Me.columnSuppID.Unique = true
            Me.columnSuppID.MaxLength = 25
            Me.columnSuppName.MaxLength = 100
            Me.columnSuppCell.MaxLength = 50
            Me.columnSuppFax.MaxLength = 50
            Me.columnSuppPhone.MaxLength = 50
            Me.columnSuppEmail.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSupplierRow() As SupplierRow
            Return CType(Me.NewRow,SupplierRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SupplierRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SupplierRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SupplierRowChangedEvent) Is Nothing) Then
                RaiseEvent SupplierRowChanged(Me, New SupplierRowChangeEvent(CType(e.Row,SupplierRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SupplierRowChangingEvent) Is Nothing) Then
                RaiseEvent SupplierRowChanging(Me, New SupplierRowChangeEvent(CType(e.Row,SupplierRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SupplierRowDeletedEvent) Is Nothing) Then
                RaiseEvent SupplierRowDeleted(Me, New SupplierRowChangeEvent(CType(e.Row,SupplierRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SupplierRowDeletingEvent) Is Nothing) Then
                RaiseEvent SupplierRowDeleting(Me, New SupplierRowChangeEvent(CType(e.Row,SupplierRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSupplierRow(ByVal row As SupplierRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SupplierDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Depreciation_MethodDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDepCode As Global.System.Data.DataColumn
        
        Private columnDepDesc As Global.System.Data.DataColumn
        
        Private columnIsDeleted As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Depreciation_Method"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Depreciation_MethodRow
            Get
                Return CType(Me.Rows(index),Depreciation_MethodRow)
            End Get
        End Property
        
        Public Event Depreciation_MethodRowChanging As Depreciation_MethodRowChangeEventHandler
        
        Public Event Depreciation_MethodRowChanged As Depreciation_MethodRowChangeEventHandler
        
        Public Event Depreciation_MethodRowDeleting As Depreciation_MethodRowChangeEventHandler
        
        Public Event Depreciation_MethodRowDeleted As Depreciation_MethodRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDepreciation_MethodRow(ByVal row As Depreciation_MethodRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDepreciation_MethodRow(ByVal DepCode As Integer, ByVal DepDesc As String, ByVal IsDeleted As Boolean) As Depreciation_MethodRow
            Dim rowDepreciation_MethodRow As Depreciation_MethodRow = CType(Me.NewRow,Depreciation_MethodRow)
            Dim columnValuesArray() As Object = New Object() {DepCode, DepDesc, IsDeleted}
            rowDepreciation_MethodRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDepreciation_MethodRow)
            Return rowDepreciation_MethodRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDepCode(ByVal DepCode As Integer) As Depreciation_MethodRow
            Return CType(Me.Rows.Find(New Object() {DepCode}),Depreciation_MethodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Depreciation_MethodDataTable = CType(MyBase.Clone,Depreciation_MethodDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Depreciation_MethodDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDepCode = MyBase.Columns("DepCode")
            Me.columnDepDesc = MyBase.Columns("DepDesc")
            Me.columnIsDeleted = MyBase.Columns("IsDeleted")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDepCode = New Global.System.Data.DataColumn("DepCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepCode)
            Me.columnDepDesc = New Global.System.Data.DataColumn("DepDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepDesc)
            Me.columnIsDeleted = New Global.System.Data.DataColumn("IsDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDeleted)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDepCode}, true))
            Me.columnDepCode.AllowDBNull = false
            Me.columnDepCode.Unique = true
            Me.columnDepDesc.MaxLength = 50
            Me.columnIsDeleted.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDepreciation_MethodRow() As Depreciation_MethodRow
            Return CType(Me.NewRow,Depreciation_MethodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Depreciation_MethodRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Depreciation_MethodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Depreciation_MethodRowChangedEvent) Is Nothing) Then
                RaiseEvent Depreciation_MethodRowChanged(Me, New Depreciation_MethodRowChangeEvent(CType(e.Row,Depreciation_MethodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Depreciation_MethodRowChangingEvent) Is Nothing) Then
                RaiseEvent Depreciation_MethodRowChanging(Me, New Depreciation_MethodRowChangeEvent(CType(e.Row,Depreciation_MethodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Depreciation_MethodRowDeletedEvent) Is Nothing) Then
                RaiseEvent Depreciation_MethodRowDeleted(Me, New Depreciation_MethodRowChangeEvent(CType(e.Row,Depreciation_MethodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Depreciation_MethodRowDeletingEvent) Is Nothing) Then
                RaiseEvent Depreciation_MethodRowDeleting(Me, New Depreciation_MethodRowChangeEvent(CType(e.Row,Depreciation_MethodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDepreciation_MethodRow(ByVal row As Depreciation_MethodRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Depreciation_MethodDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Disposal_MethodDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDispCode As Global.System.Data.DataColumn
        
        Private columnDispDesc As Global.System.Data.DataColumn
        
        Private columnIsDeleted As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Disposal_Method"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DispCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDispCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DispDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDispDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Disposal_MethodRow
            Get
                Return CType(Me.Rows(index),Disposal_MethodRow)
            End Get
        End Property
        
        Public Event Disposal_MethodRowChanging As Disposal_MethodRowChangeEventHandler
        
        Public Event Disposal_MethodRowChanged As Disposal_MethodRowChangeEventHandler
        
        Public Event Disposal_MethodRowDeleting As Disposal_MethodRowChangeEventHandler
        
        Public Event Disposal_MethodRowDeleted As Disposal_MethodRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDisposal_MethodRow(ByVal row As Disposal_MethodRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDisposal_MethodRow(ByVal DispCode As Integer, ByVal DispDesc As String, ByVal IsDeleted As Boolean) As Disposal_MethodRow
            Dim rowDisposal_MethodRow As Disposal_MethodRow = CType(Me.NewRow,Disposal_MethodRow)
            Dim columnValuesArray() As Object = New Object() {DispCode, DispDesc, IsDeleted}
            rowDisposal_MethodRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDisposal_MethodRow)
            Return rowDisposal_MethodRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDispCode(ByVal DispCode As Integer) As Disposal_MethodRow
            Return CType(Me.Rows.Find(New Object() {DispCode}),Disposal_MethodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Disposal_MethodDataTable = CType(MyBase.Clone,Disposal_MethodDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Disposal_MethodDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDispCode = MyBase.Columns("DispCode")
            Me.columnDispDesc = MyBase.Columns("DispDesc")
            Me.columnIsDeleted = MyBase.Columns("IsDeleted")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDispCode = New Global.System.Data.DataColumn("DispCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDispCode)
            Me.columnDispDesc = New Global.System.Data.DataColumn("DispDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDispDesc)
            Me.columnIsDeleted = New Global.System.Data.DataColumn("IsDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDeleted)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDispCode}, true))
            Me.columnDispCode.AllowDBNull = false
            Me.columnDispCode.Unique = true
            Me.columnDispDesc.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDisposal_MethodRow() As Disposal_MethodRow
            Return CType(Me.NewRow,Disposal_MethodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Disposal_MethodRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Disposal_MethodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Disposal_MethodRowChangedEvent) Is Nothing) Then
                RaiseEvent Disposal_MethodRowChanged(Me, New Disposal_MethodRowChangeEvent(CType(e.Row,Disposal_MethodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Disposal_MethodRowChangingEvent) Is Nothing) Then
                RaiseEvent Disposal_MethodRowChanging(Me, New Disposal_MethodRowChangeEvent(CType(e.Row,Disposal_MethodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Disposal_MethodRowDeletedEvent) Is Nothing) Then
                RaiseEvent Disposal_MethodRowDeleted(Me, New Disposal_MethodRowChangeEvent(CType(e.Row,Disposal_MethodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Disposal_MethodRowDeletingEvent) Is Nothing) Then
                RaiseEvent Disposal_MethodRowDeleting(Me, New Disposal_MethodRowChangeEvent(CType(e.Row,Disposal_MethodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDisposal_MethodRow(ByVal row As Disposal_MethodRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Disposal_MethodDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Ast_INV_ScheduleDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnInvSchCode As Global.System.Data.DataColumn
        
        Private columnInvDesc As Global.System.Data.DataColumn
        
        Private columnInvStartDate As Global.System.Data.DataColumn
        
        Private columnInvEndDate As Global.System.Data.DataColumn
        
        Private columnIsDeleted As Global.System.Data.DataColumn
        
        Private columnClosed As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Ast_INV_Schedule"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvSchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvSchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvStartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvEndDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvEndDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClosedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClosed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ast_INV_ScheduleRow
            Get
                Return CType(Me.Rows(index),Ast_INV_ScheduleRow)
            End Get
        End Property
        
        Public Event Ast_INV_ScheduleRowChanging As Ast_INV_ScheduleRowChangeEventHandler
        
        Public Event Ast_INV_ScheduleRowChanged As Ast_INV_ScheduleRowChangeEventHandler
        
        Public Event Ast_INV_ScheduleRowDeleting As Ast_INV_ScheduleRowChangeEventHandler
        
        Public Event Ast_INV_ScheduleRowDeleted As Ast_INV_ScheduleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAst_INV_ScheduleRow(ByVal row As Ast_INV_ScheduleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAst_INV_ScheduleRow(ByVal InvSchCode As Long, ByVal InvDesc As String, ByVal InvStartDate As Date, ByVal InvEndDate As Date, ByVal IsDeleted As Boolean, ByVal Closed As Boolean) As Ast_INV_ScheduleRow
            Dim rowAst_INV_ScheduleRow As Ast_INV_ScheduleRow = CType(Me.NewRow,Ast_INV_ScheduleRow)
            Dim columnValuesArray() As Object = New Object() {InvSchCode, InvDesc, InvStartDate, InvEndDate, IsDeleted, Closed}
            rowAst_INV_ScheduleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAst_INV_ScheduleRow)
            Return rowAst_INV_ScheduleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByInvSchCode(ByVal InvSchCode As Long) As Ast_INV_ScheduleRow
            Return CType(Me.Rows.Find(New Object() {InvSchCode}),Ast_INV_ScheduleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Ast_INV_ScheduleDataTable = CType(MyBase.Clone,Ast_INV_ScheduleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Ast_INV_ScheduleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnInvSchCode = MyBase.Columns("InvSchCode")
            Me.columnInvDesc = MyBase.Columns("InvDesc")
            Me.columnInvStartDate = MyBase.Columns("InvStartDate")
            Me.columnInvEndDate = MyBase.Columns("InvEndDate")
            Me.columnIsDeleted = MyBase.Columns("IsDeleted")
            Me.columnClosed = MyBase.Columns("Closed")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnInvSchCode = New Global.System.Data.DataColumn("InvSchCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvSchCode)
            Me.columnInvDesc = New Global.System.Data.DataColumn("InvDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvDesc)
            Me.columnInvStartDate = New Global.System.Data.DataColumn("InvStartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvStartDate)
            Me.columnInvEndDate = New Global.System.Data.DataColumn("InvEndDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvEndDate)
            Me.columnIsDeleted = New Global.System.Data.DataColumn("IsDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDeleted)
            Me.columnClosed = New Global.System.Data.DataColumn("Closed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClosed)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnInvSchCode}, true))
            Me.columnInvSchCode.AllowDBNull = false
            Me.columnInvSchCode.Unique = true
            Me.columnInvDesc.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAst_INV_ScheduleRow() As Ast_INV_ScheduleRow
            Return CType(Me.NewRow,Ast_INV_ScheduleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Ast_INV_ScheduleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Ast_INV_ScheduleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ast_INV_ScheduleRowChangedEvent) Is Nothing) Then
                RaiseEvent Ast_INV_ScheduleRowChanged(Me, New Ast_INV_ScheduleRowChangeEvent(CType(e.Row,Ast_INV_ScheduleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ast_INV_ScheduleRowChangingEvent) Is Nothing) Then
                RaiseEvent Ast_INV_ScheduleRowChanging(Me, New Ast_INV_ScheduleRowChangeEvent(CType(e.Row,Ast_INV_ScheduleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ast_INV_ScheduleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ast_INV_ScheduleRowDeleted(Me, New Ast_INV_ScheduleRowChangeEvent(CType(e.Row,Ast_INV_ScheduleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ast_INV_ScheduleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ast_INV_ScheduleRowDeleting(Me, New Ast_INV_ScheduleRowChangeEvent(CType(e.Row,Ast_INV_ScheduleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAst_INV_ScheduleRow(ByVal row As Ast_INV_ScheduleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Ast_INV_ScheduleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class InsurerDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnInsCode As Global.System.Data.DataColumn
        
        Private columnInsName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Insurer"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As InsurerRow
            Get
                Return CType(Me.Rows(index),InsurerRow)
            End Get
        End Property
        
        Public Event InsurerRowChanging As InsurerRowChangeEventHandler
        
        Public Event InsurerRowChanged As InsurerRowChangeEventHandler
        
        Public Event InsurerRowDeleting As InsurerRowChangeEventHandler
        
        Public Event InsurerRowDeleted As InsurerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddInsurerRow(ByVal row As InsurerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddInsurerRow(ByVal InsCode As Integer, ByVal InsName As String) As InsurerRow
            Dim rowInsurerRow As InsurerRow = CType(Me.NewRow,InsurerRow)
            Dim columnValuesArray() As Object = New Object() {InsCode, InsName}
            rowInsurerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowInsurerRow)
            Return rowInsurerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByInsCode(ByVal InsCode As Integer) As InsurerRow
            Return CType(Me.Rows.Find(New Object() {InsCode}),InsurerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As InsurerDataTable = CType(MyBase.Clone,InsurerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New InsurerDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnInsCode = MyBase.Columns("InsCode")
            Me.columnInsName = MyBase.Columns("InsName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnInsCode = New Global.System.Data.DataColumn("InsCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsCode)
            Me.columnInsName = New Global.System.Data.DataColumn("InsName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnInsCode}, true))
            Me.columnInsCode.AllowDBNull = false
            Me.columnInsCode.Unique = true
            Me.columnInsName.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewInsurerRow() As InsurerRow
            Return CType(Me.NewRow,InsurerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New InsurerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(InsurerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InsurerRowChangedEvent) Is Nothing) Then
                RaiseEvent InsurerRowChanged(Me, New InsurerRowChangeEvent(CType(e.Row,InsurerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InsurerRowChangingEvent) Is Nothing) Then
                RaiseEvent InsurerRowChanging(Me, New InsurerRowChangeEvent(CType(e.Row,InsurerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InsurerRowDeletedEvent) Is Nothing) Then
                RaiseEvent InsurerRowDeleted(Me, New InsurerRowChangeEvent(CType(e.Row,InsurerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InsurerRowDeletingEvent) Is Nothing) Then
                RaiseEvent InsurerRowDeleting(Me, New InsurerRowChangeEvent(CType(e.Row,InsurerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveInsurerRow(ByVal row As InsurerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "InsurerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Report_AssetbySubCategoryDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMainCat As Global.System.Data.DataColumn
        
        Private columnSubCat As Global.System.Data.DataColumn
        
        Private columnCat As Global.System.Data.DataColumn
        
        Private columnInvest_OB As Global.System.Data.DataColumn
        
        Private columnInvest_Add As Global.System.Data.DataColumn
        
        Private columnInvest_Ded As Global.System.Data.DataColumn
        
        Private columnInvest_CB As Global.System.Data.DataColumn
        
        Private columnDepr_OB As Global.System.Data.DataColumn
        
        Private columnDepr_Add As Global.System.Data.DataColumn
        
        Private columnDepr_Ded As Global.System.Data.DataColumn
        
        Private columnDepr_CB As Global.System.Data.DataColumn
        
        Private columnNetValue As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Report_AssetbySubCategory"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MainCatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMainCat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubCatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubCat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Invest_OBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvest_OB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Invest_AddColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvest_Add
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Invest_DedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvest_Ded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Invest_CBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvest_CB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Depr_OBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepr_OB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Depr_AddColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepr_Add
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Depr_DedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepr_Ded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Depr_CBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepr_CB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NetValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNetValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Report_AssetbySubCategoryRow
            Get
                Return CType(Me.Rows(index),Report_AssetbySubCategoryRow)
            End Get
        End Property
        
        Public Event Report_AssetbySubCategoryRowChanging As Report_AssetbySubCategoryRowChangeEventHandler
        
        Public Event Report_AssetbySubCategoryRowChanged As Report_AssetbySubCategoryRowChangeEventHandler
        
        Public Event Report_AssetbySubCategoryRowDeleting As Report_AssetbySubCategoryRowChangeEventHandler
        
        Public Event Report_AssetbySubCategoryRowDeleted As Report_AssetbySubCategoryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReport_AssetbySubCategoryRow(ByVal row As Report_AssetbySubCategoryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReport_AssetbySubCategoryRow(ByVal MainCat As String, ByVal SubCat As String, ByVal Cat As String, ByVal Invest_OB As Double, ByVal Invest_Add As Double, ByVal Invest_Ded As Double, ByVal Invest_CB As Double, ByVal Depr_OB As Double, ByVal Depr_Add As Double, ByVal Depr_Ded As Double, ByVal Depr_CB As Double, ByVal NetValue As Double) As Report_AssetbySubCategoryRow
            Dim rowReport_AssetbySubCategoryRow As Report_AssetbySubCategoryRow = CType(Me.NewRow,Report_AssetbySubCategoryRow)
            Dim columnValuesArray() As Object = New Object() {MainCat, SubCat, Cat, Invest_OB, Invest_Add, Invest_Ded, Invest_CB, Depr_OB, Depr_Add, Depr_Ded, Depr_CB, NetValue}
            rowReport_AssetbySubCategoryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReport_AssetbySubCategoryRow)
            Return rowReport_AssetbySubCategoryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Report_AssetbySubCategoryDataTable = CType(MyBase.Clone,Report_AssetbySubCategoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Report_AssetbySubCategoryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMainCat = MyBase.Columns("MainCat")
            Me.columnSubCat = MyBase.Columns("SubCat")
            Me.columnCat = MyBase.Columns("Cat")
            Me.columnInvest_OB = MyBase.Columns("Invest_OB")
            Me.columnInvest_Add = MyBase.Columns("Invest_Add")
            Me.columnInvest_Ded = MyBase.Columns("Invest_Ded")
            Me.columnInvest_CB = MyBase.Columns("Invest_CB")
            Me.columnDepr_OB = MyBase.Columns("Depr_OB")
            Me.columnDepr_Add = MyBase.Columns("Depr_Add")
            Me.columnDepr_Ded = MyBase.Columns("Depr_Ded")
            Me.columnDepr_CB = MyBase.Columns("Depr_CB")
            Me.columnNetValue = MyBase.Columns("NetValue")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMainCat = New Global.System.Data.DataColumn("MainCat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMainCat)
            Me.columnSubCat = New Global.System.Data.DataColumn("SubCat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubCat)
            Me.columnCat = New Global.System.Data.DataColumn("Cat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCat)
            Me.columnInvest_OB = New Global.System.Data.DataColumn("Invest_OB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvest_OB)
            Me.columnInvest_Add = New Global.System.Data.DataColumn("Invest_Add", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvest_Add)
            Me.columnInvest_Ded = New Global.System.Data.DataColumn("Invest_Ded", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvest_Ded)
            Me.columnInvest_CB = New Global.System.Data.DataColumn("Invest_CB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvest_CB)
            Me.columnDepr_OB = New Global.System.Data.DataColumn("Depr_OB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepr_OB)
            Me.columnDepr_Add = New Global.System.Data.DataColumn("Depr_Add", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepr_Add)
            Me.columnDepr_Ded = New Global.System.Data.DataColumn("Depr_Ded", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepr_Ded)
            Me.columnDepr_CB = New Global.System.Data.DataColumn("Depr_CB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepr_CB)
            Me.columnNetValue = New Global.System.Data.DataColumn("NetValue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNetValue)
            Me.columnMainCat.MaxLength = 50
            Me.columnSubCat.MaxLength = 50
            Me.columnCat.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReport_AssetbySubCategoryRow() As Report_AssetbySubCategoryRow
            Return CType(Me.NewRow,Report_AssetbySubCategoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Report_AssetbySubCategoryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Report_AssetbySubCategoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Report_AssetbySubCategoryRowChangedEvent) Is Nothing) Then
                RaiseEvent Report_AssetbySubCategoryRowChanged(Me, New Report_AssetbySubCategoryRowChangeEvent(CType(e.Row,Report_AssetbySubCategoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Report_AssetbySubCategoryRowChangingEvent) Is Nothing) Then
                RaiseEvent Report_AssetbySubCategoryRowChanging(Me, New Report_AssetbySubCategoryRowChangeEvent(CType(e.Row,Report_AssetbySubCategoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Report_AssetbySubCategoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent Report_AssetbySubCategoryRowDeleted(Me, New Report_AssetbySubCategoryRowChangeEvent(CType(e.Row,Report_AssetbySubCategoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Report_AssetbySubCategoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent Report_AssetbySubCategoryRowDeleting(Me, New Report_AssetbySubCategoryRowChangeEvent(CType(e.Row,Report_AssetbySubCategoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReport_AssetbySubCategoryRow(ByVal row As Report_AssetbySubCategoryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Report_AssetbySubCategoryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BrandDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAstBrandID As Global.System.Data.DataColumn
        
        Private columnAstBrandName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Brand"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstBrandIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstBrandID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstBrandNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstBrandName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BrandRow
            Get
                Return CType(Me.Rows(index),BrandRow)
            End Get
        End Property
        
        Public Event BrandRowChanging As BrandRowChangeEventHandler
        
        Public Event BrandRowChanged As BrandRowChangeEventHandler
        
        Public Event BrandRowDeleting As BrandRowChangeEventHandler
        
        Public Event BrandRowDeleted As BrandRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBrandRow(ByVal row As BrandRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBrandRow(ByVal AstBrandID As Integer, ByVal AstBrandName As String) As BrandRow
            Dim rowBrandRow As BrandRow = CType(Me.NewRow,BrandRow)
            Dim columnValuesArray() As Object = New Object() {AstBrandID, AstBrandName}
            rowBrandRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBrandRow)
            Return rowBrandRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAstBrandID(ByVal AstBrandID As Integer) As BrandRow
            Return CType(Me.Rows.Find(New Object() {AstBrandID}),BrandRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BrandDataTable = CType(MyBase.Clone,BrandDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BrandDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAstBrandID = MyBase.Columns("AstBrandID")
            Me.columnAstBrandName = MyBase.Columns("AstBrandName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAstBrandID = New Global.System.Data.DataColumn("AstBrandID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstBrandID)
            Me.columnAstBrandName = New Global.System.Data.DataColumn("AstBrandName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstBrandName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAstBrandID}, true))
            Me.columnAstBrandID.AllowDBNull = false
            Me.columnAstBrandID.Unique = true
            Me.columnAstBrandName.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBrandRow() As BrandRow
            Return CType(Me.NewRow,BrandRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BrandRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BrandRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BrandRowChangedEvent) Is Nothing) Then
                RaiseEvent BrandRowChanged(Me, New BrandRowChangeEvent(CType(e.Row,BrandRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BrandRowChangingEvent) Is Nothing) Then
                RaiseEvent BrandRowChanging(Me, New BrandRowChangeEvent(CType(e.Row,BrandRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BrandRowDeletedEvent) Is Nothing) Then
                RaiseEvent BrandRowDeleted(Me, New BrandRowChangeEvent(CType(e.Row,BrandRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BrandRowDeletingEvent) Is Nothing) Then
                RaiseEvent BrandRowDeleting(Me, New BrandRowChangeEvent(CType(e.Row,BrandRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBrandRow(ByVal row As BrandRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BrandDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssetsItemsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnitemcode As Global.System.Data.DataColumn
        
        Private columnAstBrandID As Global.System.Data.DataColumn
        
        Private columnAstCatID As Global.System.Data.DataColumn
        
        Private columnPOItmId As Global.System.Data.DataColumn
        
        Private columnAstDesc As Global.System.Data.DataColumn
        
        Private columnAstModel As Global.System.Data.DataColumn
        
        Private columnAstQTY As Global.System.Data.DataColumn
        
        Private columnIsDeleted As Global.System.Data.DataColumn
        
        Private columnAstBrandName As Global.System.Data.DataColumn
        
        Private columnAstCatDesc As Global.System.Data.DataColumn
        
        Private columnCatFullPath As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssetsItems"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstBrandIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstBrandID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POItmIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOItmId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstBrandNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstBrandName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCatFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssetsItemsRow
            Get
                Return CType(Me.Rows(index),AssetsItemsRow)
            End Get
        End Property
        
        Public Event AssetsItemsRowChanging As AssetsItemsRowChangeEventHandler
        
        Public Event AssetsItemsRowChanged As AssetsItemsRowChangeEventHandler
        
        Public Event AssetsItemsRowDeleting As AssetsItemsRowChangeEventHandler
        
        Public Event AssetsItemsRowDeleted As AssetsItemsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssetsItemsRow(ByVal row As AssetsItemsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssetsItemsRow(ByVal itemcode As Integer, ByVal AstBrandID As Integer, ByVal AstCatID As String, ByVal POItmId As String, ByVal AstDesc As String, ByVal AstModel As String, ByVal AstQTY As Long, ByVal IsDeleted As Boolean, ByVal AstBrandName As String, ByVal AstCatDesc As String, ByVal CatFullPath As String) As AssetsItemsRow
            Dim rowAssetsItemsRow As AssetsItemsRow = CType(Me.NewRow,AssetsItemsRow)
            Dim columnValuesArray() As Object = New Object() {itemcode, AstBrandID, AstCatID, POItmId, AstDesc, AstModel, AstQTY, IsDeleted, AstBrandName, AstCatDesc, CatFullPath}
            rowAssetsItemsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAssetsItemsRow)
            Return rowAssetsItemsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AssetsItemsDataTable = CType(MyBase.Clone,AssetsItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AssetsItemsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnitemcode = MyBase.Columns("itemcode")
            Me.columnAstBrandID = MyBase.Columns("AstBrandID")
            Me.columnAstCatID = MyBase.Columns("AstCatID")
            Me.columnPOItmId = MyBase.Columns("POItmId")
            Me.columnAstDesc = MyBase.Columns("AstDesc")
            Me.columnAstModel = MyBase.Columns("AstModel")
            Me.columnAstQTY = MyBase.Columns("AstQTY")
            Me.columnIsDeleted = MyBase.Columns("IsDeleted")
            Me.columnAstBrandName = MyBase.Columns("AstBrandName")
            Me.columnAstCatDesc = MyBase.Columns("AstCatDesc")
            Me.columnCatFullPath = MyBase.Columns("CatFullPath")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnitemcode = New Global.System.Data.DataColumn("itemcode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemcode)
            Me.columnAstBrandID = New Global.System.Data.DataColumn("AstBrandID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstBrandID)
            Me.columnAstCatID = New Global.System.Data.DataColumn("AstCatID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatID)
            Me.columnPOItmId = New Global.System.Data.DataColumn("POItmId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOItmId)
            Me.columnAstDesc = New Global.System.Data.DataColumn("AstDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc)
            Me.columnAstModel = New Global.System.Data.DataColumn("AstModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstModel)
            Me.columnAstQTY = New Global.System.Data.DataColumn("AstQTY", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstQTY)
            Me.columnIsDeleted = New Global.System.Data.DataColumn("IsDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDeleted)
            Me.columnAstBrandName = New Global.System.Data.DataColumn("AstBrandName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstBrandName)
            Me.columnAstCatDesc = New Global.System.Data.DataColumn("AstCatDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatDesc)
            Me.columnCatFullPath = New Global.System.Data.DataColumn("CatFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCatFullPath)
            Me.columnitemcode.ReadOnly = true
            Me.columnAstCatID.MaxLength = 25
            Me.columnPOItmId.MaxLength = 25
            Me.columnAstDesc.MaxLength = 100
            Me.columnAstModel.MaxLength = 50
            Me.columnAstBrandName.MaxLength = 100
            Me.columnAstCatDesc.MaxLength = 100
            Me.columnCatFullPath.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssetsItemsRow() As AssetsItemsRow
            Return CType(Me.NewRow,AssetsItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AssetsItemsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AssetsItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssetsItemsRowChangedEvent) Is Nothing) Then
                RaiseEvent AssetsItemsRowChanged(Me, New AssetsItemsRowChangeEvent(CType(e.Row,AssetsItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssetsItemsRowChangingEvent) Is Nothing) Then
                RaiseEvent AssetsItemsRowChanging(Me, New AssetsItemsRowChangeEvent(CType(e.Row,AssetsItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssetsItemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssetsItemsRowDeleted(Me, New AssetsItemsRowChangeEvent(CType(e.Row,AssetsItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssetsItemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssetsItemsRowDeleting(Me, New AssetsItemsRowChangeEvent(CType(e.Row,AssetsItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssetsItemsRow(ByVal row As AssetsItemsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssetsItemsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssetBooksDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSelection As Global.System.Data.DataColumn
        
        Private columnBookID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnDepDesc As Global.System.Data.DataColumn
        
        Private columnDepCode As Global.System.Data.DataColumn
        
        Private columnCompanyID As Global.System.Data.DataColumn
        
        Private columnCompanyName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssetBooks"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BookIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBookID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssetBooksRow
            Get
                Return CType(Me.Rows(index),AssetBooksRow)
            End Get
        End Property
        
        Public Event AssetBooksRowChanging As AssetBooksRowChangeEventHandler
        
        Public Event AssetBooksRowChanged As AssetBooksRowChangeEventHandler
        
        Public Event AssetBooksRowDeleting As AssetBooksRowChangeEventHandler
        
        Public Event AssetBooksRowDeleted As AssetBooksRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssetBooksRow(ByVal row As AssetBooksRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssetBooksRow(ByVal Selection As String, ByVal BookID As Integer, ByVal Description As String, ByVal DepDesc As String, ByVal DepCode As Integer, ByVal CompanyID As Integer, ByVal CompanyName As String) As AssetBooksRow
            Dim rowAssetBooksRow As AssetBooksRow = CType(Me.NewRow,AssetBooksRow)
            Dim columnValuesArray() As Object = New Object() {Selection, BookID, Description, DepDesc, DepCode, CompanyID, CompanyName}
            rowAssetBooksRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAssetBooksRow)
            Return rowAssetBooksRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByBookIDDepCode(ByVal BookID As Integer, ByVal DepCode As Integer) As AssetBooksRow
            Return CType(Me.Rows.Find(New Object() {BookID, DepCode}),AssetBooksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AssetBooksDataTable = CType(MyBase.Clone,AssetBooksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AssetBooksDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSelection = MyBase.Columns("Selection")
            Me.columnBookID = MyBase.Columns("BookID")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnDepDesc = MyBase.Columns("DepDesc")
            Me.columnDepCode = MyBase.Columns("DepCode")
            Me.columnCompanyID = MyBase.Columns("CompanyID")
            Me.columnCompanyName = MyBase.Columns("CompanyName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSelection = New Global.System.Data.DataColumn("Selection", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelection)
            Me.columnBookID = New Global.System.Data.DataColumn("BookID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBookID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnDepDesc = New Global.System.Data.DataColumn("DepDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepDesc)
            Me.columnDepCode = New Global.System.Data.DataColumn("DepCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepCode)
            Me.columnCompanyID = New Global.System.Data.DataColumn("CompanyID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyID)
            Me.columnCompanyName = New Global.System.Data.DataColumn("CompanyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnBookID, Me.columnDepCode}, true))
            Me.columnSelection.ReadOnly = true
            Me.columnBookID.AllowDBNull = false
            Me.columnDescription.MaxLength = 200
            Me.columnDepDesc.MaxLength = 50
            Me.columnDepCode.AllowDBNull = false
            Me.columnCompanyName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssetBooksRow() As AssetBooksRow
            Return CType(Me.NewRow,AssetBooksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AssetBooksRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AssetBooksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssetBooksRowChangedEvent) Is Nothing) Then
                RaiseEvent AssetBooksRowChanged(Me, New AssetBooksRowChangeEvent(CType(e.Row,AssetBooksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssetBooksRowChangingEvent) Is Nothing) Then
                RaiseEvent AssetBooksRowChanging(Me, New AssetBooksRowChangeEvent(CType(e.Row,AssetBooksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssetBooksRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssetBooksRowDeleted(Me, New AssetBooksRowChangeEvent(CType(e.Row,AssetBooksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssetBooksRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssetBooksRowDeleting(Me, New AssetBooksRowChangeEvent(CType(e.Row,AssetBooksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssetBooksRow(ByVal row As AssetBooksRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssetBooksDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AddressDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAddressID As Global.System.Data.DataColumn
        
        Private columnAddressDesc As Global.System.Data.DataColumn
        
        Private columnIsDeleted As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Address"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AddressRow
            Get
                Return CType(Me.Rows(index),AddressRow)
            End Get
        End Property
        
        Public Event AddressRowChanging As AddressRowChangeEventHandler
        
        Public Event AddressRowChanged As AddressRowChangeEventHandler
        
        Public Event AddressRowDeleting As AddressRowChangeEventHandler
        
        Public Event AddressRowDeleted As AddressRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAddressRow(ByVal row As AddressRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAddressRow(ByVal AddressID As Long, ByVal AddressDesc As String, ByVal IsDeleted As Boolean) As AddressRow
            Dim rowAddressRow As AddressRow = CType(Me.NewRow,AddressRow)
            Dim columnValuesArray() As Object = New Object() {AddressID, AddressDesc, IsDeleted}
            rowAddressRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAddressRow)
            Return rowAddressRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAddressID(ByVal AddressID As Long) As AddressRow
            Return CType(Me.Rows.Find(New Object() {AddressID}),AddressRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AddressDataTable = CType(MyBase.Clone,AddressDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AddressDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAddressID = MyBase.Columns("AddressID")
            Me.columnAddressDesc = MyBase.Columns("AddressDesc")
            Me.columnIsDeleted = MyBase.Columns("IsDeleted")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAddressID = New Global.System.Data.DataColumn("AddressID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressID)
            Me.columnAddressDesc = New Global.System.Data.DataColumn("AddressDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressDesc)
            Me.columnIsDeleted = New Global.System.Data.DataColumn("IsDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDeleted)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAddressID}, true))
            Me.columnAddressID.AllowDBNull = false
            Me.columnAddressID.Unique = true
            Me.columnAddressDesc.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAddressRow() As AddressRow
            Return CType(Me.NewRow,AddressRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AddressRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AddressRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AddressRowChangedEvent) Is Nothing) Then
                RaiseEvent AddressRowChanged(Me, New AddressRowChangeEvent(CType(e.Row,AddressRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AddressRowChangingEvent) Is Nothing) Then
                RaiseEvent AddressRowChanging(Me, New AddressRowChangeEvent(CType(e.Row,AddressRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AddressRowDeletedEvent) Is Nothing) Then
                RaiseEvent AddressRowDeleted(Me, New AddressRowChangeEvent(CType(e.Row,AddressRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AddressRowDeletingEvent) Is Nothing) Then
                RaiseEvent AddressRowDeleting(Me, New AddressRowChangeEvent(CType(e.Row,AddressRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAddressRow(ByVal row As AddressRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AddressDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rptStockIssuanceDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnAstID As Global.System.Data.DataColumn
        
        Private columnAstNum As Global.System.Data.DataColumn
        
        Private columnAstDesc As Global.System.Data.DataColumn
        
        Private columnAstModel As Global.System.Data.DataColumn
        
        Private columnSerailNo As Global.System.Data.DataColumn
        
        Private columnAstLocation As Global.System.Data.DataColumn
        
        Private columnAstCategory As Global.System.Data.DataColumn
        
        Private columnAstCustodian As Global.System.Data.DataColumn
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnLocID As Global.System.Data.DataColumn
        
        Private columnCustodianCode As Global.System.Data.DataColumn
        
        Private columnToCustodian As Global.System.Data.DataColumn
        
        Private columnToCustodianID As Global.System.Data.DataColumn
        
        Private columnToLocID As Global.System.Data.DataColumn
        
        Private columnToLocation As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rptStockIssuance"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerailNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerailNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCustodianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCustodian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToCustodianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnToCustodian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToCustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnToCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToLocIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnToLocID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnToLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rptStockIssuanceRow
            Get
                Return CType(Me.Rows(index),rptStockIssuanceRow)
            End Get
        End Property
        
        Public Event rptStockIssuanceRowChanging As rptStockIssuanceRowChangeEventHandler
        
        Public Event rptStockIssuanceRowChanged As rptStockIssuanceRowChangeEventHandler
        
        Public Event rptStockIssuanceRowDeleting As rptStockIssuanceRowChangeEventHandler
        
        Public Event rptStockIssuanceRowDeleted As rptStockIssuanceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddrptStockIssuanceRow(ByVal row As rptStockIssuanceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddrptStockIssuanceRow( _
                    ByVal Barcode As String,  _
                    ByVal AstID As String,  _
                    ByVal AstNum As Long,  _
                    ByVal AstDesc As String,  _
                    ByVal AstModel As String,  _
                    ByVal SerailNo As String,  _
                    ByVal AstLocation As String,  _
                    ByVal AstCategory As String,  _
                    ByVal AstCustodian As String,  _
                    ByVal CustodianID As String,  _
                    ByVal LocID As String,  _
                    ByVal CustodianCode As String,  _
                    ByVal ToCustodian As String,  _
                    ByVal ToCustodianID As String,  _
                    ByVal ToLocID As String,  _
                    ByVal ToLocation As String) As rptStockIssuanceRow
            Dim rowrptStockIssuanceRow As rptStockIssuanceRow = CType(Me.NewRow,rptStockIssuanceRow)
            Dim columnValuesArray() As Object = New Object() {Barcode, AstID, AstNum, AstDesc, AstModel, SerailNo, AstLocation, AstCategory, AstCustodian, CustodianID, LocID, CustodianCode, ToCustodian, ToCustodianID, ToLocID, ToLocation}
            rowrptStockIssuanceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowrptStockIssuanceRow)
            Return rowrptStockIssuanceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As rptStockIssuanceDataTable = CType(MyBase.Clone,rptStockIssuanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New rptStockIssuanceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnAstID = MyBase.Columns("AstID")
            Me.columnAstNum = MyBase.Columns("AstNum")
            Me.columnAstDesc = MyBase.Columns("AstDesc")
            Me.columnAstModel = MyBase.Columns("AstModel")
            Me.columnSerailNo = MyBase.Columns("SerailNo")
            Me.columnAstLocation = MyBase.Columns("AstLocation")
            Me.columnAstCategory = MyBase.Columns("AstCategory")
            Me.columnAstCustodian = MyBase.Columns("AstCustodian")
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnLocID = MyBase.Columns("LocID")
            Me.columnCustodianCode = MyBase.Columns("CustodianCode")
            Me.columnToCustodian = MyBase.Columns("ToCustodian")
            Me.columnToCustodianID = MyBase.Columns("ToCustodianID")
            Me.columnToLocID = MyBase.Columns("ToLocID")
            Me.columnToLocation = MyBase.Columns("ToLocation")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnAstID = New Global.System.Data.DataColumn("AstID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstID)
            Me.columnAstNum = New Global.System.Data.DataColumn("AstNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstNum)
            Me.columnAstDesc = New Global.System.Data.DataColumn("AstDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc)
            Me.columnAstModel = New Global.System.Data.DataColumn("AstModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstModel)
            Me.columnSerailNo = New Global.System.Data.DataColumn("SerailNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerailNo)
            Me.columnAstLocation = New Global.System.Data.DataColumn("AstLocation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstLocation)
            Me.columnAstCategory = New Global.System.Data.DataColumn("AstCategory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCategory)
            Me.columnAstCustodian = New Global.System.Data.DataColumn("AstCustodian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCustodian)
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnLocID = New Global.System.Data.DataColumn("LocID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocID)
            Me.columnCustodianCode = New Global.System.Data.DataColumn("CustodianCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianCode)
            Me.columnToCustodian = New Global.System.Data.DataColumn("ToCustodian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToCustodian)
            Me.columnToCustodianID = New Global.System.Data.DataColumn("ToCustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToCustodianID)
            Me.columnToLocID = New Global.System.Data.DataColumn("ToLocID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToLocID)
            Me.columnToLocation = New Global.System.Data.DataColumn("ToLocation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToLocation)
            Me.columnBarcode.MaxLength = 50
            Me.columnAstID.AllowDBNull = false
            Me.columnAstID.MaxLength = 25
            Me.columnAstNum.AllowDBNull = false
            Me.columnAstDesc.MaxLength = 200
            Me.columnAstModel.MaxLength = 50
            Me.columnSerailNo.MaxLength = 50
            Me.columnAstLocation.MaxLength = 1073741823
            Me.columnAstCategory.MaxLength = 1073741823
            Me.columnAstCustodian.MaxLength = 100
            Me.columnCustodianID.MaxLength = 25
            Me.columnLocID.MaxLength = 255
            Me.columnCustodianCode.MaxLength = 255
            Me.columnToCustodian.MaxLength = 100
            Me.columnToCustodianID.MaxLength = 25
            Me.columnToLocID.MaxLength = 255
            Me.columnToLocation.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewrptStockIssuanceRow() As rptStockIssuanceRow
            Return CType(Me.NewRow,rptStockIssuanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New rptStockIssuanceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(rptStockIssuanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rptStockIssuanceRowChangedEvent) Is Nothing) Then
                RaiseEvent rptStockIssuanceRowChanged(Me, New rptStockIssuanceRowChangeEvent(CType(e.Row,rptStockIssuanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rptStockIssuanceRowChangingEvent) Is Nothing) Then
                RaiseEvent rptStockIssuanceRowChanging(Me, New rptStockIssuanceRowChangeEvent(CType(e.Row,rptStockIssuanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rptStockIssuanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent rptStockIssuanceRowDeleted(Me, New rptStockIssuanceRowChangeEvent(CType(e.Row,rptStockIssuanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rptStockIssuanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent rptStockIssuanceRowDeleting(Me, New rptStockIssuanceRowChangeEvent(CType(e.Row,rptStockIssuanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoverptStockIssuanceRow(ByVal row As rptStockIssuanceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rptStockIssuanceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LocationLabelDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLocID As Global.System.Data.DataColumn
        
        Private columnLocBarcode As Global.System.Data.DataColumn
        
        Private columnLocDesc As Global.System.Data.DataColumn
        
        Private columnCode As Global.System.Data.DataColumn
        
        Private columnCompleteCode As Global.System.Data.DataColumn
        
        Private columnCompleteDesc As Global.System.Data.DataColumn
        
        Private columnCompanyID As Global.System.Data.DataColumn
        
        Private columnCompanyCode As Global.System.Data.DataColumn
        
        Private columnCompanyName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LocationLabel"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocBarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompleteCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompleteCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompleteDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompleteDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LocationLabelRow
            Get
                Return CType(Me.Rows(index),LocationLabelRow)
            End Get
        End Property
        
        Public Event LocationLabelRowChanging As LocationLabelRowChangeEventHandler
        
        Public Event LocationLabelRowChanged As LocationLabelRowChangeEventHandler
        
        Public Event LocationLabelRowDeleting As LocationLabelRowChangeEventHandler
        
        Public Event LocationLabelRowDeleted As LocationLabelRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLocationLabelRow(ByVal row As LocationLabelRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLocationLabelRow(ByVal LocID As String, ByVal LocBarcode As String, ByVal LocDesc As String, ByVal Code As String, ByVal CompleteCode As String, ByVal CompleteDesc As String, ByVal CompanyID As Integer, ByVal CompanyCode As String, ByVal CompanyName As String) As LocationLabelRow
            Dim rowLocationLabelRow As LocationLabelRow = CType(Me.NewRow,LocationLabelRow)
            Dim columnValuesArray() As Object = New Object() {LocID, LocBarcode, LocDesc, Code, CompleteCode, CompleteDesc, CompanyID, CompanyCode, CompanyName}
            rowLocationLabelRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLocationLabelRow)
            Return rowLocationLabelRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLocID(ByVal LocID As String) As LocationLabelRow
            Return CType(Me.Rows.Find(New Object() {LocID}),LocationLabelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LocationLabelDataTable = CType(MyBase.Clone,LocationLabelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LocationLabelDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLocID = MyBase.Columns("LocID")
            Me.columnLocBarcode = MyBase.Columns("LocBarcode")
            Me.columnLocDesc = MyBase.Columns("LocDesc")
            Me.columnCode = MyBase.Columns("Code")
            Me.columnCompleteCode = MyBase.Columns("CompleteCode")
            Me.columnCompleteDesc = MyBase.Columns("CompleteDesc")
            Me.columnCompanyID = MyBase.Columns("CompanyID")
            Me.columnCompanyCode = MyBase.Columns("CompanyCode")
            Me.columnCompanyName = MyBase.Columns("CompanyName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLocID = New Global.System.Data.DataColumn("LocID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocID)
            Me.columnLocBarcode = New Global.System.Data.DataColumn("LocBarcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocBarcode)
            Me.columnLocDesc = New Global.System.Data.DataColumn("LocDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocDesc)
            Me.columnCode = New Global.System.Data.DataColumn("Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCode)
            Me.columnCompleteCode = New Global.System.Data.DataColumn("CompleteCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompleteCode)
            Me.columnCompleteDesc = New Global.System.Data.DataColumn("CompleteDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompleteDesc)
            Me.columnCompanyID = New Global.System.Data.DataColumn("CompanyID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyID)
            Me.columnCompanyCode = New Global.System.Data.DataColumn("CompanyCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyCode)
            Me.columnCompanyName = New Global.System.Data.DataColumn("CompanyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLocID}, true))
            Me.columnLocID.AllowDBNull = false
            Me.columnLocID.Unique = true
            Me.columnLocID.MaxLength = 255
            Me.columnLocBarcode.ReadOnly = true
            Me.columnLocBarcode.MaxLength = 258
            Me.columnLocDesc.MaxLength = 200
            Me.columnCode.MaxLength = 100
            Me.columnCompleteCode.MaxLength = 255
            Me.columnCompleteDesc.MaxLength = 1073741823
            Me.columnCompanyCode.MaxLength = 50
            Me.columnCompanyName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLocationLabelRow() As LocationLabelRow
            Return CType(Me.NewRow,LocationLabelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LocationLabelRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LocationLabelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LocationLabelRowChangedEvent) Is Nothing) Then
                RaiseEvent LocationLabelRowChanged(Me, New LocationLabelRowChangeEvent(CType(e.Row,LocationLabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LocationLabelRowChangingEvent) Is Nothing) Then
                RaiseEvent LocationLabelRowChanging(Me, New LocationLabelRowChangeEvent(CType(e.Row,LocationLabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LocationLabelRowDeletedEvent) Is Nothing) Then
                RaiseEvent LocationLabelRowDeleted(Me, New LocationLabelRowChangeEvent(CType(e.Row,LocationLabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LocationLabelRowDeletingEvent) Is Nothing) Then
                RaiseEvent LocationLabelRowDeleting(Me, New LocationLabelRowChangeEvent(CType(e.Row,LocationLabelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLocationLabelRow(ByVal row As LocationLabelRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LocationLabelDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rpt_AssetsLogDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAstID As Global.System.Data.DataColumn
        
        Private columnAstNum As Global.System.Data.DataColumn
        
        Private columnRefNo As Global.System.Data.DataColumn
        
        Private columnCompCode As Global.System.Data.DataColumn
        
        Private columnCustodianName As Global.System.Data.DataColumn
        
        Private columnAstCatDesc As Global.System.Data.DataColumn
        
        Private columnPurDate As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnBaseCost As Global.System.Data.DataColumn
        
        Private columnTax As Global.System.Data.DataColumn
        
        Private columnDiscount As Global.System.Data.DataColumn
        
        Private columntot As Global.System.Data.DataColumn
        
        Private columnInvNumber As Global.System.Data.DataColumn
        
        Private columnSuppName As Global.System.Data.DataColumn
        
        Private columnInsName As Global.System.Data.DataColumn
        
        Private columnLocID As Global.System.Data.DataColumn
        
        Private columnAstBrandName As Global.System.Data.DataColumn
        
        Private columnSrvDate As Global.System.Data.DataColumn
        
        Private columnAstModel As Global.System.Data.DataColumn
        
        Private columnDispDate As Global.System.Data.DataColumn
        
        Private columnDisposed As Global.System.Data.DataColumn
        
        Private columnBarCode As Global.System.Data.DataColumn
        
        Private columnSerailNo As Global.System.Data.DataColumn
        
        Private columnRefCode As Global.System.Data.DataColumn
        
        Private columnPlate As Global.System.Data.DataColumn
        
        Private columnPoerp As Global.System.Data.DataColumn
        
        Private columnCapex As Global.System.Data.DataColumn
        
        Private columnGrn As Global.System.Data.DataColumn
        
        Private columnGLCode As Global.System.Data.DataColumn
        
        Private columnAstCatID As Global.System.Data.DataColumn
        
        Private columnCatFullPath As Global.System.Data.DataColumn
        
        Private columnLocationFullPath As Global.System.Data.DataColumn
        
        Private columnAstDesc1 As Global.System.Data.DataColumn
        
        Private columnAstDesc2 As Global.System.Data.DataColumn
        
        Private columnItemDesc As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnCompanyCode As Global.System.Data.DataColumn
        
        Private columnCompanyName As Global.System.Data.DataColumn
        
        Private columnCustodianID As Global.System.Data.DataColumn
        
        Private columnCustodianCode As Global.System.Data.DataColumn
        
        Private columnActionType As Global.System.Data.DataColumn
        
        Private columnActionDate As Global.System.Data.DataColumn
        
        Private columnActionUser As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rpt_AssetsLog"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuppNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuppName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstBrandNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstBrandName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrvDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrvDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DispDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDispDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisposedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisposed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerailNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerailNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PoerpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoerp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstCatIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstCatID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCatFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationFullPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationFullPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AstDesc2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAstDesc2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustodianCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustodianCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActionTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActionType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActionUserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActionUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rpt_AssetsLogRow
            Get
                Return CType(Me.Rows(index),rpt_AssetsLogRow)
            End Get
        End Property
        
        Public Event rpt_AssetsLogRowChanging As rpt_AssetsLogRowChangeEventHandler
        
        Public Event rpt_AssetsLogRowChanged As rpt_AssetsLogRowChangeEventHandler
        
        Public Event rpt_AssetsLogRowDeleting As rpt_AssetsLogRowChangeEventHandler
        
        Public Event rpt_AssetsLogRowDeleted As rpt_AssetsLogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addrpt_AssetsLogRow(ByVal row As rpt_AssetsLogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addrpt_AssetsLogRow( _
                    ByVal AstID As String,  _
                    ByVal AstNum As Long,  _
                    ByVal RefNo As String,  _
                    ByVal CompCode As String,  _
                    ByVal CustodianName As String,  _
                    ByVal AstCatDesc As String,  _
                    ByVal PurDate As Date,  _
                    ByVal Description As String,  _
                    ByVal BaseCost As Double,  _
                    ByVal Tax As Double,  _
                    ByVal Discount As Long,  _
                    ByVal tot As Double,  _
                    ByVal InvNumber As String,  _
                    ByVal SuppName As String,  _
                    ByVal InsName As String,  _
                    ByVal LocID As String,  _
                    ByVal AstBrandName As String,  _
                    ByVal SrvDate As Date,  _
                    ByVal AstModel As String,  _
                    ByVal DispDate As Date,  _
                    ByVal Disposed As Boolean,  _
                    ByVal BarCode As String,  _
                    ByVal SerailNo As String,  _
                    ByVal RefCode As String,  _
                    ByVal Plate As String,  _
                    ByVal Poerp As String,  _
                    ByVal Capex As String,  _
                    ByVal Grn As String,  _
                    ByVal GLCode As Long,  _
                    ByVal AstCatID As String,  _
                    ByVal CatFullPath As String,  _
                    ByVal LocationFullPath As String,  _
                    ByVal AstDesc1 As String,  _
                    ByVal AstDesc2 As String,  _
                    ByVal ItemDesc As String,  _
                    ByVal ItemCode As String,  _
                    ByVal CompanyCode As String,  _
                    ByVal CompanyName As String,  _
                    ByVal CustodianID As String,  _
                    ByVal CustodianCode As String,  _
                    ByVal ActionType As String,  _
                    ByVal ActionDate As Date,  _
                    ByVal ActionUser As String) As rpt_AssetsLogRow
            Dim rowrpt_AssetsLogRow As rpt_AssetsLogRow = CType(Me.NewRow,rpt_AssetsLogRow)
            Dim columnValuesArray() As Object = New Object() {AstID, AstNum, RefNo, CompCode, CustodianName, AstCatDesc, PurDate, Description, BaseCost, Tax, Discount, tot, InvNumber, SuppName, InsName, LocID, AstBrandName, SrvDate, AstModel, DispDate, Disposed, BarCode, SerailNo, RefCode, Plate, Poerp, Capex, Grn, GLCode, AstCatID, CatFullPath, LocationFullPath, AstDesc1, AstDesc2, ItemDesc, ItemCode, CompanyCode, CompanyName, CustodianID, CustodianCode, ActionType, ActionDate, ActionUser}
            rowrpt_AssetsLogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowrpt_AssetsLogRow)
            Return rowrpt_AssetsLogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As rpt_AssetsLogDataTable = CType(MyBase.Clone,rpt_AssetsLogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New rpt_AssetsLogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAstID = MyBase.Columns("AstID")
            Me.columnAstNum = MyBase.Columns("AstNum")
            Me.columnRefNo = MyBase.Columns("RefNo")
            Me.columnCompCode = MyBase.Columns("CompCode")
            Me.columnCustodianName = MyBase.Columns("CustodianName")
            Me.columnAstCatDesc = MyBase.Columns("AstCatDesc")
            Me.columnPurDate = MyBase.Columns("PurDate")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnBaseCost = MyBase.Columns("BaseCost")
            Me.columnTax = MyBase.Columns("Tax")
            Me.columnDiscount = MyBase.Columns("Discount")
            Me.columntot = MyBase.Columns("tot")
            Me.columnInvNumber = MyBase.Columns("InvNumber")
            Me.columnSuppName = MyBase.Columns("SuppName")
            Me.columnInsName = MyBase.Columns("InsName")
            Me.columnLocID = MyBase.Columns("LocID")
            Me.columnAstBrandName = MyBase.Columns("AstBrandName")
            Me.columnSrvDate = MyBase.Columns("SrvDate")
            Me.columnAstModel = MyBase.Columns("AstModel")
            Me.columnDispDate = MyBase.Columns("DispDate")
            Me.columnDisposed = MyBase.Columns("Disposed")
            Me.columnBarCode = MyBase.Columns("BarCode")
            Me.columnSerailNo = MyBase.Columns("SerailNo")
            Me.columnRefCode = MyBase.Columns("RefCode")
            Me.columnPlate = MyBase.Columns("Plate")
            Me.columnPoerp = MyBase.Columns("Poerp")
            Me.columnCapex = MyBase.Columns("Capex")
            Me.columnGrn = MyBase.Columns("Grn")
            Me.columnGLCode = MyBase.Columns("GLCode")
            Me.columnAstCatID = MyBase.Columns("AstCatID")
            Me.columnCatFullPath = MyBase.Columns("CatFullPath")
            Me.columnLocationFullPath = MyBase.Columns("LocationFullPath")
            Me.columnAstDesc1 = MyBase.Columns("AstDesc1")
            Me.columnAstDesc2 = MyBase.Columns("AstDesc2")
            Me.columnItemDesc = MyBase.Columns("ItemDesc")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnCompanyCode = MyBase.Columns("CompanyCode")
            Me.columnCompanyName = MyBase.Columns("CompanyName")
            Me.columnCustodianID = MyBase.Columns("CustodianID")
            Me.columnCustodianCode = MyBase.Columns("CustodianCode")
            Me.columnActionType = MyBase.Columns("ActionType")
            Me.columnActionDate = MyBase.Columns("ActionDate")
            Me.columnActionUser = MyBase.Columns("ActionUser")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAstID = New Global.System.Data.DataColumn("AstID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstID)
            Me.columnAstNum = New Global.System.Data.DataColumn("AstNum", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstNum)
            Me.columnRefNo = New Global.System.Data.DataColumn("RefNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefNo)
            Me.columnCompCode = New Global.System.Data.DataColumn("CompCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompCode)
            Me.columnCustodianName = New Global.System.Data.DataColumn("CustodianName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianName)
            Me.columnAstCatDesc = New Global.System.Data.DataColumn("AstCatDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatDesc)
            Me.columnPurDate = New Global.System.Data.DataColumn("PurDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurDate)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnBaseCost = New Global.System.Data.DataColumn("BaseCost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseCost)
            Me.columnTax = New Global.System.Data.DataColumn("Tax", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax)
            Me.columnDiscount = New Global.System.Data.DataColumn("Discount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscount)
            Me.columntot = New Global.System.Data.DataColumn("tot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntot)
            Me.columnInvNumber = New Global.System.Data.DataColumn("InvNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvNumber)
            Me.columnSuppName = New Global.System.Data.DataColumn("SuppName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuppName)
            Me.columnInsName = New Global.System.Data.DataColumn("InsName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsName)
            Me.columnLocID = New Global.System.Data.DataColumn("LocID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocID)
            Me.columnAstBrandName = New Global.System.Data.DataColumn("AstBrandName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstBrandName)
            Me.columnSrvDate = New Global.System.Data.DataColumn("SrvDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrvDate)
            Me.columnAstModel = New Global.System.Data.DataColumn("AstModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstModel)
            Me.columnDispDate = New Global.System.Data.DataColumn("DispDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDispDate)
            Me.columnDisposed = New Global.System.Data.DataColumn("Disposed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisposed)
            Me.columnBarCode = New Global.System.Data.DataColumn("BarCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarCode)
            Me.columnSerailNo = New Global.System.Data.DataColumn("SerailNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerailNo)
            Me.columnRefCode = New Global.System.Data.DataColumn("RefCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefCode)
            Me.columnPlate = New Global.System.Data.DataColumn("Plate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlate)
            Me.columnPoerp = New Global.System.Data.DataColumn("Poerp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoerp)
            Me.columnCapex = New Global.System.Data.DataColumn("Capex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapex)
            Me.columnGrn = New Global.System.Data.DataColumn("Grn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrn)
            Me.columnGLCode = New Global.System.Data.DataColumn("GLCode", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLCode)
            Me.columnAstCatID = New Global.System.Data.DataColumn("AstCatID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstCatID)
            Me.columnCatFullPath = New Global.System.Data.DataColumn("CatFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCatFullPath)
            Me.columnLocationFullPath = New Global.System.Data.DataColumn("LocationFullPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationFullPath)
            Me.columnAstDesc1 = New Global.System.Data.DataColumn("AstDesc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc1)
            Me.columnAstDesc2 = New Global.System.Data.DataColumn("AstDesc2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAstDesc2)
            Me.columnItemDesc = New Global.System.Data.DataColumn("ItemDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDesc)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnCompanyCode = New Global.System.Data.DataColumn("CompanyCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyCode)
            Me.columnCompanyName = New Global.System.Data.DataColumn("CompanyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyName)
            Me.columnCustodianID = New Global.System.Data.DataColumn("CustodianID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianID)
            Me.columnCustodianCode = New Global.System.Data.DataColumn("CustodianCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustodianCode)
            Me.columnActionType = New Global.System.Data.DataColumn("ActionType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActionType)
            Me.columnActionDate = New Global.System.Data.DataColumn("ActionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActionDate)
            Me.columnActionUser = New Global.System.Data.DataColumn("ActionUser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActionUser)
            Me.columnAstID.AllowDBNull = false
            Me.columnAstID.MaxLength = 25
            Me.columnAstNum.AllowDBNull = false
            Me.columnRefNo.MaxLength = 50
            Me.columnCompCode.MaxLength = 255
            Me.columnCustodianName.MaxLength = 100
            Me.columnAstCatDesc.MaxLength = 200
            Me.columnDescription.MaxLength = 200
            Me.columntot.ReadOnly = true
            Me.columnInvNumber.MaxLength = 25
            Me.columnSuppName.MaxLength = 100
            Me.columnInsName.MaxLength = 25
            Me.columnLocID.MaxLength = 255
            Me.columnAstBrandName.MaxLength = 100
            Me.columnAstModel.MaxLength = 50
            Me.columnBarCode.MaxLength = 50
            Me.columnSerailNo.MaxLength = 50
            Me.columnRefCode.MaxLength = 50
            Me.columnPlate.MaxLength = 50
            Me.columnPoerp.MaxLength = 50
            Me.columnCapex.MaxLength = 50
            Me.columnGrn.MaxLength = 50
            Me.columnAstCatID.MaxLength = 25
            Me.columnCatFullPath.MaxLength = 1073741823
            Me.columnLocationFullPath.MaxLength = 1073741823
            Me.columnAstDesc1.MaxLength = 200
            Me.columnAstDesc2.MaxLength = 200
            Me.columnItemDesc.MaxLength = 200
            Me.columnItemCode.AllowDBNull = false
            Me.columnItemCode.MaxLength = 25
            Me.columnCompanyCode.MaxLength = 50
            Me.columnCompanyName.MaxLength = 50
            Me.columnCustodianID.AllowDBNull = false
            Me.columnCustodianID.MaxLength = 25
            Me.columnCustodianCode.MaxLength = 255
            Me.columnActionType.MaxLength = 50
            Me.columnActionUser.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newrpt_AssetsLogRow() As rpt_AssetsLogRow
            Return CType(Me.NewRow,rpt_AssetsLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New rpt_AssetsLogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(rpt_AssetsLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rpt_AssetsLogRowChangedEvent) Is Nothing) Then
                RaiseEvent rpt_AssetsLogRowChanged(Me, New rpt_AssetsLogRowChangeEvent(CType(e.Row,rpt_AssetsLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rpt_AssetsLogRowChangingEvent) Is Nothing) Then
                RaiseEvent rpt_AssetsLogRowChanging(Me, New rpt_AssetsLogRowChangeEvent(CType(e.Row,rpt_AssetsLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rpt_AssetsLogRowDeletedEvent) Is Nothing) Then
                RaiseEvent rpt_AssetsLogRowDeleted(Me, New rpt_AssetsLogRowChangeEvent(CType(e.Row,rpt_AssetsLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rpt_AssetsLogRowDeletingEvent) Is Nothing) Then
                RaiseEvent rpt_AssetsLogRowDeleting(Me, New rpt_AssetsLogRowChangeEvent(CType(e.Row,rpt_AssetsLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removerpt_AssetsLogRow(ByVal row As rpt_AssetsLogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rpt_AssetsLogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CostCenterAuditStatusDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCostID As Global.System.Data.DataColumn
        
        Private columnCostNumber As Global.System.Data.DataColumn
        
        Private columnCostName As Global.System.Data.DataColumn
        
        Private columnTotalCount As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CostCenterAuditStatus"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CostCenterAuditStatusRow
            Get
                Return CType(Me.Rows(index),CostCenterAuditStatusRow)
            End Get
        End Property
        
        Public Event CostCenterAuditStatusRowChanging As CostCenterAuditStatusRowChangeEventHandler
        
        Public Event CostCenterAuditStatusRowChanged As CostCenterAuditStatusRowChangeEventHandler
        
        Public Event CostCenterAuditStatusRowDeleting As CostCenterAuditStatusRowChangeEventHandler
        
        Public Event CostCenterAuditStatusRowDeleted As CostCenterAuditStatusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCostCenterAuditStatusRow(ByVal row As CostCenterAuditStatusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCostCenterAuditStatusRow(ByVal CostID As String, ByVal CostNumber As String, ByVal CostName As String, ByVal TotalCount As Integer, ByVal Status As String) As CostCenterAuditStatusRow
            Dim rowCostCenterAuditStatusRow As CostCenterAuditStatusRow = CType(Me.NewRow,CostCenterAuditStatusRow)
            Dim columnValuesArray() As Object = New Object() {CostID, CostNumber, CostName, TotalCount, Status}
            rowCostCenterAuditStatusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCostCenterAuditStatusRow)
            Return rowCostCenterAuditStatusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCostIDStatus(ByVal CostID As String, ByVal Status As String) As CostCenterAuditStatusRow
            Return CType(Me.Rows.Find(New Object() {CostID, Status}),CostCenterAuditStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CostCenterAuditStatusDataTable = CType(MyBase.Clone,CostCenterAuditStatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CostCenterAuditStatusDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCostID = MyBase.Columns("CostID")
            Me.columnCostNumber = MyBase.Columns("CostNumber")
            Me.columnCostName = MyBase.Columns("CostName")
            Me.columnTotalCount = MyBase.Columns("TotalCount")
            Me.columnStatus = MyBase.Columns("Status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCostID = New Global.System.Data.DataColumn("CostID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostID)
            Me.columnCostNumber = New Global.System.Data.DataColumn("CostNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostNumber)
            Me.columnCostName = New Global.System.Data.DataColumn("CostName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostName)
            Me.columnTotalCount = New Global.System.Data.DataColumn("TotalCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalCount)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCostID, Me.columnStatus}, true))
            Me.columnCostID.AllowDBNull = false
            Me.columnCostID.MaxLength = 50
            Me.columnCostNumber.MaxLength = 50
            Me.columnCostName.MaxLength = 50
            Me.columnTotalCount.ReadOnly = true
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.ReadOnly = true
            Me.columnStatus.MaxLength = 11
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCostCenterAuditStatusRow() As CostCenterAuditStatusRow
            Return CType(Me.NewRow,CostCenterAuditStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CostCenterAuditStatusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CostCenterAuditStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CostCenterAuditStatusRowChangedEvent) Is Nothing) Then
                RaiseEvent CostCenterAuditStatusRowChanged(Me, New CostCenterAuditStatusRowChangeEvent(CType(e.Row,CostCenterAuditStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CostCenterAuditStatusRowChangingEvent) Is Nothing) Then
                RaiseEvent CostCenterAuditStatusRowChanging(Me, New CostCenterAuditStatusRowChangeEvent(CType(e.Row,CostCenterAuditStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CostCenterAuditStatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent CostCenterAuditStatusRowDeleted(Me, New CostCenterAuditStatusRowChangeEvent(CType(e.Row,CostCenterAuditStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CostCenterAuditStatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent CostCenterAuditStatusRowDeleting(Me, New CostCenterAuditStatusRowChangeEvent(CType(e.Row,CostCenterAuditStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCostCenterAuditStatusRow(ByVal row As CostCenterAuditStatusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ZulAssetsBEDataSet = New ZulAssetsBEDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CostCenterAuditStatusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DesignationRow
        Inherits Global.System.Data.DataRow
        
        Private tableDesignation As DesignationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDesignation = CType(Me.Table,DesignationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DesignationID() As Integer
            Get
                Return CType(Me(Me.tableDesignation.DesignationIDColumn),Integer)
            End Get
            Set
                Me(Me.tableDesignation.DesignationIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableDesignation.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Designation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDesignation.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableDesignation.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableDesignation.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssetDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableAssetDetail As AssetDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssetDetail = CType(Me.Table,AssetDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstNum() As Long
            Get
                Return CType(Me(Me.tableAssetDetail.AstNumColumn),Long)
            End Get
            Set
                Me(Me.tableAssetDetail.AstNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemcode() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.itemcodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'itemcode' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.itemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.AstDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.AstDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstID() As String
            Get
                Return CType(Me(Me.tableAssetDetail.AstIDColumn),String)
            End Get
            Set
                Me(Me.tableAssetDetail.AstIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.LocDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocDesc' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.LocDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.CustodianNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianName' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.CustodianNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.LocIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocID' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.LocIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.AstCatIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatID' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.AstCatIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.CustodianIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianID' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstBrandName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.AstBrandNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstBrandName' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.AstBrandNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.CompanyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyName' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.CompanyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.CompanyIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyID' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.CompanyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstModel() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.AstModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstModel' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.AstModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.InsNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InsName' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.InsNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.AstCatDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatDesc' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.AstCatDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.SuppNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppName' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.SuppNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransRemarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.TransRemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransRemarks' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.TransRemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseCost() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.BaseCostColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseCost' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.BaseCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.TaxColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.TaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SrvDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.SrvDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SrvDate' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.SrvDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.RefNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefNo' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.RefNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.PurDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurDate' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.PurDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Assetdetailsdesc1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.Assetdetailsdesc1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Assetdetailsdesc1' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.Assetdetailsdesc1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Assetdetailsdesc2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.Assetdetailsdesc2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Assetdetailsdesc2' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.Assetdetailsdesc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerailNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.SerailNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerailNo' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.SerailNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetDetail.CustodianCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianCode' in table 'AssetDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetDetail.CustodianCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsitemcodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.itemcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetitemcodeNull()
            Me(Me.tableAssetDetail.itemcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.AstDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDescNull()
            Me(Me.tableAssetDetail.AstDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.LocDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocDescNull()
            Me(Me.tableAssetDetail.LocDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.CustodianNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianNameNull()
            Me(Me.tableAssetDetail.CustodianNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.LocIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocIDNull()
            Me(Me.tableAssetDetail.LocIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.AstCatIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatIDNull()
            Me(Me.tableAssetDetail.AstCatIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.CustodianIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianIDNull()
            Me(Me.tableAssetDetail.CustodianIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstBrandNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.AstBrandNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstBrandNameNull()
            Me(Me.tableAssetDetail.AstBrandNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.CompanyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyNameNull()
            Me(Me.tableAssetDetail.CompanyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.CompanyIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyIDNull()
            Me(Me.tableAssetDetail.CompanyIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstModelNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.AstModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstModelNull()
            Me(Me.tableAssetDetail.AstModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.InsNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsNameNull()
            Me(Me.tableAssetDetail.InsNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.AstCatDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatDescNull()
            Me(Me.tableAssetDetail.AstCatDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.SuppNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppNameNull()
            Me(Me.tableAssetDetail.SuppNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransRemarksNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.TransRemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransRemarksNull()
            Me(Me.tableAssetDetail.TransRemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseCostNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.BaseCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseCostNull()
            Me(Me.tableAssetDetail.BaseCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.TaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxNull()
            Me(Me.tableAssetDetail.TaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrvDateNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.SrvDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrvDateNull()
            Me(Me.tableAssetDetail.SrvDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefNoNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.RefNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefNoNull()
            Me(Me.tableAssetDetail.RefNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurDateNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.PurDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurDateNull()
            Me(Me.tableAssetDetail.PurDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetdetailsdesc1Null() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.Assetdetailsdesc1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetdetailsdesc1Null()
            Me(Me.tableAssetDetail.Assetdetailsdesc1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetdetailsdesc2Null() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.Assetdetailsdesc2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetdetailsdesc2Null()
            Me(Me.tableAssetDetail.Assetdetailsdesc2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerailNoNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.SerailNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerailNoNull()
            Me(Me.tableAssetDetail.SerailNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetDetail.CustodianCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianCodeNull()
            Me(Me.tableAssetDetail.CustodianCodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CustodianRow
        Inherits Global.System.Data.DataRow
        
        Private tableCustodian As CustodianDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustodian = CType(Me.Table,CustodianDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Return CType(Me(Me.tableCustodian.CustodianIDColumn),String)
            End Get
            Set
                Me(Me.tableCustodian.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustodian.CustodianNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianName' in table 'Custodian' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustodian.CustodianNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DesignationID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCustodian.DesignationIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DesignationID' in table 'Custodian' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustodian.DesignationIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustodian.CustodianPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianPhone' in table 'Custodian' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustodian.CustodianPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustodian.CustodianEmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianEmail' in table 'Custodian' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustodian.CustodianEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustodian.CustodianFaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianFax' in table 'Custodian' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustodian.CustodianFaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianCell() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustodian.CustodianCellColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianCell' in table 'Custodian' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustodian.CustodianCellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustodian.CustodianAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianAddress' in table 'Custodian' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustodian.CustodianAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCustodian.IsDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsDeleted' in table 'Custodian' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustodian.IsDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeptId() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustodian.DeptIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeptId' in table 'Custodian' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustodian.DeptIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustodian.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Custodian' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustodian.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianNameNull() As Boolean
            Return Me.IsNull(Me.tableCustodian.CustodianNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianNameNull()
            Me(Me.tableCustodian.CustodianNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesignationIDNull() As Boolean
            Return Me.IsNull(Me.tableCustodian.DesignationIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesignationIDNull()
            Me(Me.tableCustodian.DesignationIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianPhoneNull() As Boolean
            Return Me.IsNull(Me.tableCustodian.CustodianPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianPhoneNull()
            Me(Me.tableCustodian.CustodianPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianEmailNull() As Boolean
            Return Me.IsNull(Me.tableCustodian.CustodianEmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianEmailNull()
            Me(Me.tableCustodian.CustodianEmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianFaxNull() As Boolean
            Return Me.IsNull(Me.tableCustodian.CustodianFaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianFaxNull()
            Me(Me.tableCustodian.CustodianFaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianCellNull() As Boolean
            Return Me.IsNull(Me.tableCustodian.CustodianCellColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianCellNull()
            Me(Me.tableCustodian.CustodianCellColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianAddressNull() As Boolean
            Return Me.IsNull(Me.tableCustodian.CustodianAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianAddressNull()
            Me(Me.tableCustodian.CustodianAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsDeletedNull() As Boolean
            Return Me.IsNull(Me.tableCustodian.IsDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsDeletedNull()
            Me(Me.tableCustodian.IsDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeptIdNull() As Boolean
            Return Me.IsNull(Me.tableCustodian.DeptIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeptIdNull()
            Me(Me.tableCustodian.DeptIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableCustodian.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableCustodian.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssetsLabelRow
        Inherits Global.System.Data.DataRow
        
        Private tableAssetsLabel As AssetsLabelDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssetsLabel = CType(Me.Table,AssetsLabelDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstNum() As Long
            Get
                Return CType(Me(Me.tableAssetsLabel.AstNumColumn),Long)
            End Get
            Set
                Me(Me.tableAssetsLabel.AstNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemcode() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.itemcodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'itemcode' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.itemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.AstDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.AstDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstID() As String
            Get
                Return CType(Me(Me.tableAssetsLabel.AstIDColumn),String)
            End Get
            Set
                Me(Me.tableAssetsLabel.AstIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.LocDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocDesc' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.LocDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.CustodianNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianName' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.CustodianNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.LocIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocID' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.LocIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.AstCatIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatID' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.AstCatIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.CustodianIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianID' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstBrandName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.AstBrandNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstBrandName' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.AstBrandNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.CompanyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyName' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.CompanyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BarCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.BarCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BarCode' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.BarCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Refno() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.RefnoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Refno' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.RefnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.CompanyIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyID' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.CompanyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Purdate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.PurdateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Purdate' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.PurdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstModel() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.AstModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstModel' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.AstModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.InsNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InsName' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.InsNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.AstCatDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatDesc' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.AstCatDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.SuppNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppName' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.SuppNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransRemarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.TransRemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransRemarks' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.TransRemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseCost() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.BaseCostColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseCost' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.BaseCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.TaxColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.TaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SrvDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.SrvDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SrvDate' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.SrvDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.InsIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InsID' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.InsIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.InvNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvNumber' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.InvNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstBrandID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.AstBrandIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstBrandID' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.AstBrandIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.POCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POCode' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.POCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.SuppIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppID' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.SuppIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Disposed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.DisposedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Disposed' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.DisposedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Discount() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.DiscountColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Discount' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.DiscountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.Barcode1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode1' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.Barcode1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerailNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.SerailNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerailNo' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.SerailNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.RefCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefCode' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.RefCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plate() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.PlateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plate' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.PlateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Poerp() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.PoerpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Poerp' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.PoerpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capex() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.CapexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Capex' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.CapexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grn() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.GrnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grn' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.GrnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoPiece() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.NoPieceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoPiece' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.NoPieceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.GLCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLCode' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.GLCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.PONumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PONumber' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.PONumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabelCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.LabelCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabelCount' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.LabelCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Assetdetailsdesc1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.Assetdetailsdesc1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Assetdetailsdesc1' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.Assetdetailsdesc1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Assetdetailsdesc2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.Assetdetailsdesc2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Assetdetailsdesc2' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.Assetdetailsdesc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CatFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.CatFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CatFullPath' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.CatFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.LocationFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationFullPath' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.LocationFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.LocationCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationCode' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.LocationCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationCompCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsLabel.LocationCompCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationCompCode' in table 'AssetsLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsLabel.LocationCompCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsitemcodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.itemcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetitemcodeNull()
            Me(Me.tableAssetsLabel.itemcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.AstDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDescNull()
            Me(Me.tableAssetsLabel.AstDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.LocDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocDescNull()
            Me(Me.tableAssetsLabel.LocDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.CustodianNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianNameNull()
            Me(Me.tableAssetsLabel.CustodianNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.LocIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocIDNull()
            Me(Me.tableAssetsLabel.LocIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.AstCatIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatIDNull()
            Me(Me.tableAssetsLabel.AstCatIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.CustodianIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianIDNull()
            Me(Me.tableAssetsLabel.CustodianIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstBrandNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.AstBrandNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstBrandNameNull()
            Me(Me.tableAssetsLabel.AstBrandNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.CompanyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyNameNull()
            Me(Me.tableAssetsLabel.CompanyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.BarCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarCodeNull()
            Me(Me.tableAssetsLabel.BarCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefnoNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.RefnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefnoNull()
            Me(Me.tableAssetsLabel.RefnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.CompanyIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyIDNull()
            Me(Me.tableAssetsLabel.CompanyIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurdateNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.PurdateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurdateNull()
            Me(Me.tableAssetsLabel.PurdateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstModelNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.AstModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstModelNull()
            Me(Me.tableAssetsLabel.AstModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.InsNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsNameNull()
            Me(Me.tableAssetsLabel.InsNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.AstCatDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatDescNull()
            Me(Me.tableAssetsLabel.AstCatDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.SuppNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppNameNull()
            Me(Me.tableAssetsLabel.SuppNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransRemarksNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.TransRemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransRemarksNull()
            Me(Me.tableAssetsLabel.TransRemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseCostNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.BaseCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseCostNull()
            Me(Me.tableAssetsLabel.BaseCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.TaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxNull()
            Me(Me.tableAssetsLabel.TaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrvDateNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.SrvDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrvDateNull()
            Me(Me.tableAssetsLabel.SrvDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.InsIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsIDNull()
            Me(Me.tableAssetsLabel.InsIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvNumberNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.InvNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvNumberNull()
            Me(Me.tableAssetsLabel.InvNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstBrandIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.AstBrandIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstBrandIDNull()
            Me(Me.tableAssetsLabel.AstBrandIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.POCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOCodeNull()
            Me(Me.tableAssetsLabel.POCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.SuppIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppIDNull()
            Me(Me.tableAssetsLabel.SuppIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisposedNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.DisposedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisposedNull()
            Me(Me.tableAssetsLabel.DisposedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.DiscountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscountNull()
            Me(Me.tableAssetsLabel.DiscountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcode1Null() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.Barcode1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcode1Null()
            Me(Me.tableAssetsLabel.Barcode1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerailNoNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.SerailNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerailNoNull()
            Me(Me.tableAssetsLabel.SerailNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.RefCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefCodeNull()
            Me(Me.tableAssetsLabel.RefCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlateNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.PlateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlateNull()
            Me(Me.tableAssetsLabel.PlateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPoerpNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.PoerpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPoerpNull()
            Me(Me.tableAssetsLabel.PoerpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCapexNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.CapexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCapexNull()
            Me(Me.tableAssetsLabel.CapexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrnNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.GrnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrnNull()
            Me(Me.tableAssetsLabel.GrnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoPieceNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.NoPieceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoPieceNull()
            Me(Me.tableAssetsLabel.NoPieceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.GLCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLCodeNull()
            Me(Me.tableAssetsLabel.GLCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPONumberNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.PONumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPONumberNull()
            Me(Me.tableAssetsLabel.PONumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabelCountNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.LabelCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabelCountNull()
            Me(Me.tableAssetsLabel.LabelCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetdetailsdesc1Null() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.Assetdetailsdesc1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetdetailsdesc1Null()
            Me(Me.tableAssetsLabel.Assetdetailsdesc1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetdetailsdesc2Null() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.Assetdetailsdesc2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetdetailsdesc2Null()
            Me(Me.tableAssetsLabel.Assetdetailsdesc2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatFullPathNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.CatFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatFullPathNull()
            Me(Me.tableAssetsLabel.CatFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationFullPathNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.LocationFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationFullPathNull()
            Me(Me.tableAssetsLabel.LocationFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableAssetsLabel.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.LocationCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationCodeNull()
            Me(Me.tableAssetsLabel.LocationCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationCompCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetsLabel.LocationCompCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationCompCodeNull()
            Me(Me.tableAssetsLabel.LocationCompCodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssetRegRow
        Inherits Global.System.Data.DataRow
        
        Private tableAssetReg As AssetRegDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssetReg = CType(Me.Table,AssetRegDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.CustodianNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianName' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.CustodianNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.AstNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstNum' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.AstNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.AstIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstID' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.AstIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.PurDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurDate' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.PurDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OracleRef() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.OracleRefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OracleRef' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.OracleRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompRef() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.CompRefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompRef' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.CompRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCat1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.AstCat1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCat1' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.AstCat1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCat2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.AstCat2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCat2' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.AstCat2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCat3() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.AstCat3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCat3' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.AstCat3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.CustodianIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianID' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cost() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.CostColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cost' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.CostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCDepart() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.CCDepartColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CCDepart' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.CCDepartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCSection() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.CCSectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CCSection' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.CCSectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCLocation() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetReg.CCLocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CCLocation' in table 'AssetReg' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetReg.CCLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetReg.CustodianNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianNameNull()
            Me(Me.tableAssetReg.CustodianNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstNumNull() As Boolean
            Return Me.IsNull(Me.tableAssetReg.AstNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstNumNull()
            Me(Me.tableAssetReg.AstNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetReg.AstIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstIDNull()
            Me(Me.tableAssetReg.AstIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurDateNull() As Boolean
            Return Me.IsNull(Me.tableAssetReg.PurDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurDateNull()
            Me(Me.tableAssetReg.PurDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOracleRefNull() As Boolean
            Return Me.IsNull(Me.tableAssetReg.OracleRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOracleRefNull()
            Me(Me.tableAssetReg.OracleRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompRefNull() As Boolean
            Return Me.IsNull(Me.tableAssetReg.CompRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompRefNull()
            Me(Me.tableAssetReg.CompRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCat1Null() As Boolean
            Return Me.IsNull(Me.tableAssetReg.AstCat1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCat1Null()
            Me(Me.tableAssetReg.AstCat1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCat2Null() As Boolean
            Return Me.IsNull(Me.tableAssetReg.AstCat2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCat2Null()
            Me(Me.tableAssetReg.AstCat2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCat3Null() As Boolean
            Return Me.IsNull(Me.tableAssetReg.AstCat3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCat3Null()
            Me(Me.tableAssetReg.AstCat3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetReg.CustodianIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianIDNull()
            Me(Me.tableAssetReg.CustodianIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostNull() As Boolean
            Return Me.IsNull(Me.tableAssetReg.CostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostNull()
            Me(Me.tableAssetReg.CostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCCDepartNull() As Boolean
            Return Me.IsNull(Me.tableAssetReg.CCDepartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCCDepartNull()
            Me(Me.tableAssetReg.CCDepartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCCSectionNull() As Boolean
            Return Me.IsNull(Me.tableAssetReg.CCSectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCCSectionNull()
            Me(Me.tableAssetReg.CCSectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCCLocationNull() As Boolean
            Return Me.IsNull(Me.tableAssetReg.CCLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCCLocationNull()
            Me(Me.tableAssetReg.CCLocationColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DepBooksRow
        Inherits Global.System.Data.DataRow
        
        Private tableDepBooks As DepBooksDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDepBooks = CType(Me.Table,DepBooksDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstID() As String
            Get
                Return CType(Me(Me.tableDepBooks.AstIDColumn),String)
            End Get
            Set
                Me(Me.tableDepBooks.AstIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstNum() As Long
            Get
                Return CType(Me(Me.tableDepBooks.AstNumColumn),Long)
            End Get
            Set
                Me(Me.tableDepBooks.AstNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.RefNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefNo' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.RefNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.CompCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompCode' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.CompCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.AstCatDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatDesc' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.AstCatDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.CustodianNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianName' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.CustodianNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.AstDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.AstDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tot() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.totColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.totColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property salvageYear() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.salvageYearColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'salvageYear' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.salvageYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property acc() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.accColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'acc' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.accColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentBV() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.CurrentBVColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrentBV' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.CurrentBVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.AstDesc2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc2' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.AstDesc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.LocationFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationFullPath' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.LocationFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CatFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.CatFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CatFullPath' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.CatFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalvageMonth() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.SalvageMonthColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SalvageMonth' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.SalvageMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndOfServiceDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.EndOfServiceDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndOfServiceDate' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.EndOfServiceDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Return CType(Me(Me.tableDepBooks.CustodianIDColumn),String)
            End Get
            Set
                Me(Me.tableDepBooks.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.CustodianCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianCode' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.CustodianCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.ItemDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDesc' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.ItemDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Return CType(Me(Me.tableDepBooks.ItemCodeColumn),String)
            End Get
            Set
                Me(Me.tableDepBooks.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.PurDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurDate' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.PurDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepPercentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.DepPercentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepPercentage' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.DepPercentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstBrandName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.AstBrandNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstBrandName' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.AstBrandNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.CompanyCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyCode' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.CompanyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.CompanyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyName' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.CompanyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SrvDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.SrvDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SrvDate' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.SrvDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Loc1() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.Loc1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Loc1' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.Loc1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Loc2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.Loc2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Loc2' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.Loc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Loc3() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.Loc3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Loc3' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.Loc3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Loc4() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.Loc4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Loc4' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.Loc4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Loc5() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.Loc5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Loc5' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.Loc5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cat1() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.Cat1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cat1' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.Cat1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cat2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.Cat2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cat2' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.Cat2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cat3() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepBooks.Cat3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cat3' in table 'DepBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepBooks.Cat3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefNoNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.RefNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefNoNull()
            Me(Me.tableDepBooks.RefNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompCodeNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.CompCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompCodeNull()
            Me(Me.tableDepBooks.CompCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatDescNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.AstCatDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatDescNull()
            Me(Me.tableDepBooks.AstCatDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianNameNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.CustodianNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianNameNull()
            Me(Me.tableDepBooks.CustodianNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDescNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.AstDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDescNull()
            Me(Me.tableDepBooks.AstDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.totColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotNull()
            Me(Me.tableDepBooks.totColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssalvageYearNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.salvageYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsalvageYearNull()
            Me(Me.tableDepBooks.salvageYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsaccNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.accColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetaccNull()
            Me(Me.tableDepBooks.accColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrentBVNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.CurrentBVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrentBVNull()
            Me(Me.tableDepBooks.CurrentBVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc2Null() As Boolean
            Return Me.IsNull(Me.tableDepBooks.AstDesc2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc2Null()
            Me(Me.tableDepBooks.AstDesc2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationFullPathNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.LocationFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationFullPathNull()
            Me(Me.tableDepBooks.LocationFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatFullPathNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.CatFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatFullPathNull()
            Me(Me.tableDepBooks.CatFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalvageMonthNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.SalvageMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalvageMonthNull()
            Me(Me.tableDepBooks.SalvageMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndOfServiceDateNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.EndOfServiceDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndOfServiceDateNull()
            Me(Me.tableDepBooks.EndOfServiceDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianCodeNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.CustodianCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianCodeNull()
            Me(Me.tableDepBooks.CustodianCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDescNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.ItemDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDescNull()
            Me(Me.tableDepBooks.ItemDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurDateNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.PurDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurDateNull()
            Me(Me.tableDepBooks.PurDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepPercentageNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.DepPercentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepPercentageNull()
            Me(Me.tableDepBooks.DepPercentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstBrandNameNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.AstBrandNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstBrandNameNull()
            Me(Me.tableDepBooks.AstBrandNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyCodeNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.CompanyCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyCodeNull()
            Me(Me.tableDepBooks.CompanyCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyNameNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.CompanyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyNameNull()
            Me(Me.tableDepBooks.CompanyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrvDateNull() As Boolean
            Return Me.IsNull(Me.tableDepBooks.SrvDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrvDateNull()
            Me(Me.tableDepBooks.SrvDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoc1Null() As Boolean
            Return Me.IsNull(Me.tableDepBooks.Loc1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoc1Null()
            Me(Me.tableDepBooks.Loc1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoc2Null() As Boolean
            Return Me.IsNull(Me.tableDepBooks.Loc2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoc2Null()
            Me(Me.tableDepBooks.Loc2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoc3Null() As Boolean
            Return Me.IsNull(Me.tableDepBooks.Loc3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoc3Null()
            Me(Me.tableDepBooks.Loc3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoc4Null() As Boolean
            Return Me.IsNull(Me.tableDepBooks.Loc4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoc4Null()
            Me(Me.tableDepBooks.Loc4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoc5Null() As Boolean
            Return Me.IsNull(Me.tableDepBooks.Loc5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoc5Null()
            Me(Me.tableDepBooks.Loc5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCat1Null() As Boolean
            Return Me.IsNull(Me.tableDepBooks.Cat1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCat1Null()
            Me(Me.tableDepBooks.Cat1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCat2Null() As Boolean
            Return Me.IsNull(Me.tableDepBooks.Cat2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCat2Null()
            Me(Me.tableDepBooks.Cat2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCat3Null() As Boolean
            Return Me.IsNull(Me.tableDepBooks.Cat3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCat3Null()
            Me(Me.tableDepBooks.Cat3Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssetTagRow
        Inherits Global.System.Data.DataRow
        
        Private tableAssetTag As AssetTagDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssetTag = CType(Me.Table,AssetTagDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstID() As String
            Get
                Return CType(Me(Me.tableAssetTag.AstIDColumn),String)
            End Get
            Set
                Me(Me.tableAssetTag.AstIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstNum() As Long
            Get
                Return CType(Me(Me.tableAssetTag.AstNumColumn),Long)
            End Get
            Set
                Me(Me.tableAssetTag.AstNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.RefNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefNo' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.RefNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.CompCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompCode' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.CompCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.CustodianNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianName' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.CustodianNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.AstCatDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatDesc' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.AstCatDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.PurDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurDate' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.PurDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseCost() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.BaseCostColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseCost' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.BaseCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.TaxColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.TaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Discount() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.DiscountColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Discount' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.DiscountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tot() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.totColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.totColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.InvNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvNumber' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.InvNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.SuppNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppName' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.SuppNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.InsNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InsName' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.InsNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.LocIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocID' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.LocIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstBrandName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.AstBrandNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstBrandName' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.AstBrandNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SrvDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.SrvDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SrvDate' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.SrvDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstModel() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.AstModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstModel' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.AstModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DispDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.DispDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DispDate' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.DispDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Disposed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.DisposedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Disposed' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.DisposedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BarCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.BarCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BarCode' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.BarCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerailNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.SerailNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerailNo' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.SerailNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.RefCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefCode' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.RefCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plate() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.PlateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plate' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.PlateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Poerp() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.PoerpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Poerp' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.PoerpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capex() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.CapexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Capex' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.CapexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grn() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.GrnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grn' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.GrnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.GLCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLCode' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.GLCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.AstCatIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatID' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.AstCatIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CatFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.CatFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CatFullPath' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.CatFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.LocationFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationFullPath' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.LocationFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Return CType(Me(Me.tableAssetTag.CustodianIDColumn),String)
            End Get
            Set
                Me(Me.tableAssetTag.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.CustodianCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianCode' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.CustodianCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.AstDesc1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc1' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.AstDesc1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.AstDesc2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc2' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.AstDesc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetTag.ItemDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDesc' in table 'AssetTag' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetTag.ItemDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Return CType(Me(Me.tableAssetTag.ItemCodeColumn),String)
            End Get
            Set
                Me(Me.tableAssetTag.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefNoNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.RefNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefNoNull()
            Me(Me.tableAssetTag.RefNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.CompCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompCodeNull()
            Me(Me.tableAssetTag.CompCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.CustodianNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianNameNull()
            Me(Me.tableAssetTag.CustodianNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.AstCatDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatDescNull()
            Me(Me.tableAssetTag.AstCatDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurDateNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.PurDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurDateNull()
            Me(Me.tableAssetTag.PurDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableAssetTag.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseCostNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.BaseCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseCostNull()
            Me(Me.tableAssetTag.BaseCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.TaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxNull()
            Me(Me.tableAssetTag.TaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.DiscountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscountNull()
            Me(Me.tableAssetTag.DiscountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.totColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotNull()
            Me(Me.tableAssetTag.totColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvNumberNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.InvNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvNumberNull()
            Me(Me.tableAssetTag.InvNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.SuppNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppNameNull()
            Me(Me.tableAssetTag.SuppNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.InsNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsNameNull()
            Me(Me.tableAssetTag.InsNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.LocIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocIDNull()
            Me(Me.tableAssetTag.LocIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstBrandNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.AstBrandNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstBrandNameNull()
            Me(Me.tableAssetTag.AstBrandNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrvDateNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.SrvDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrvDateNull()
            Me(Me.tableAssetTag.SrvDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstModelNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.AstModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstModelNull()
            Me(Me.tableAssetTag.AstModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDispDateNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.DispDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDispDateNull()
            Me(Me.tableAssetTag.DispDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisposedNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.DisposedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisposedNull()
            Me(Me.tableAssetTag.DisposedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.BarCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarCodeNull()
            Me(Me.tableAssetTag.BarCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerailNoNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.SerailNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerailNoNull()
            Me(Me.tableAssetTag.SerailNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.RefCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefCodeNull()
            Me(Me.tableAssetTag.RefCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlateNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.PlateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlateNull()
            Me(Me.tableAssetTag.PlateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPoerpNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.PoerpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPoerpNull()
            Me(Me.tableAssetTag.PoerpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCapexNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.CapexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCapexNull()
            Me(Me.tableAssetTag.CapexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrnNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.GrnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrnNull()
            Me(Me.tableAssetTag.GrnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.GLCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLCodeNull()
            Me(Me.tableAssetTag.GLCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.AstCatIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatIDNull()
            Me(Me.tableAssetTag.AstCatIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatFullPathNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.CatFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatFullPathNull()
            Me(Me.tableAssetTag.CatFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationFullPathNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.LocationFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationFullPathNull()
            Me(Me.tableAssetTag.LocationFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.CustodianCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianCodeNull()
            Me(Me.tableAssetTag.CustodianCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc1Null() As Boolean
            Return Me.IsNull(Me.tableAssetTag.AstDesc1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc1Null()
            Me(Me.tableAssetTag.AstDesc1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc2Null() As Boolean
            Return Me.IsNull(Me.tableAssetTag.AstDesc2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc2Null()
            Me(Me.tableAssetTag.AstDesc2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetTag.ItemDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDescNull()
            Me(Me.tableAssetTag.ItemDescColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssetLedgerRow
        Inherits Global.System.Data.DataRow
        
        Private tableAssetLedger As AssetLedgerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssetLedger = CType(Me.Table,AssetLedgerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstID() As String
            Get
                Return CType(Me(Me.tableAssetLedger.AstIDColumn),String)
            End Get
            Set
                Me(Me.tableAssetLedger.AstIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstNum() As Long
            Get
                Return CType(Me(Me.tableAssetLedger.AstNumColumn),Long)
            End Get
            Set
                Me(Me.tableAssetLedger.AstNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.RefNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefNo' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.RefNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.CompCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompCode' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.CompCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.CustodianNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianName' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.CustodianNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.AstCatDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatDesc' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.AstCatDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.PurDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurDate' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.PurDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseCost() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.BaseCostColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseCost' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.BaseCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.TaxColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.TaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Discount() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.DiscountColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Discount' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.DiscountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tot() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.totColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.totColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.InvNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvNumber' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.InvNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.SuppNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppName' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.SuppNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.InsNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InsName' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.InsNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Return CType(Me(Me.tableAssetLedger.CustodianIDColumn),String)
            End Get
            Set
                Me(Me.tableAssetLedger.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.CustodianCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianCode' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.CustodianCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.AstDesc1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc1' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.AstDesc1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.AstDesc2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc2' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.AstDesc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetLedger.ItemDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDesc' in table 'AssetLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetLedger.ItemDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Return CType(Me(Me.tableAssetLedger.ItemCodeColumn),String)
            End Get
            Set
                Me(Me.tableAssetLedger.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefNoNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.RefNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefNoNull()
            Me(Me.tableAssetLedger.RefNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.CompCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompCodeNull()
            Me(Me.tableAssetLedger.CompCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.CustodianNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianNameNull()
            Me(Me.tableAssetLedger.CustodianNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.AstCatDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatDescNull()
            Me(Me.tableAssetLedger.AstCatDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurDateNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.PurDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurDateNull()
            Me(Me.tableAssetLedger.PurDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseCostNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.BaseCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseCostNull()
            Me(Me.tableAssetLedger.BaseCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.TaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxNull()
            Me(Me.tableAssetLedger.TaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.DiscountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscountNull()
            Me(Me.tableAssetLedger.DiscountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.totColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotNull()
            Me(Me.tableAssetLedger.totColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvNumberNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.InvNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvNumberNull()
            Me(Me.tableAssetLedger.InvNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.SuppNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppNameNull()
            Me(Me.tableAssetLedger.SuppNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.InsNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsNameNull()
            Me(Me.tableAssetLedger.InsNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableAssetLedger.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianCodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.CustodianCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianCodeNull()
            Me(Me.tableAssetLedger.CustodianCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc1Null() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.AstDesc1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc1Null()
            Me(Me.tableAssetLedger.AstDesc1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc2Null() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.AstDesc2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc2Null()
            Me(Me.tableAssetLedger.AstDesc2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetLedger.ItemDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDescNull()
            Me(Me.tableAssetLedger.ItemDescColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DisposedAssetsRow
        Inherits Global.System.Data.DataRow
        
        Private tableDisposedAssets As DisposedAssetsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDisposedAssets = CType(Me.Table,DisposedAssetsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstNum() As Long
            Get
                Return CType(Me(Me.tableDisposedAssets.AstNumColumn),Long)
            End Get
            Set
                Me(Me.tableDisposedAssets.AstNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DispDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.DispDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DispDate' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.DispDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DispDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.DispDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DispDesc' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.DispDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransRemarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.TransRemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransRemarks' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.TransRemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sel_Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.Sel_PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sel_Price' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.Sel_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sel_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.Sel_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sel_Date' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.Sel_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstID() As String
            Get
                Return CType(Me(Me.tableDisposedAssets.AstIDColumn),String)
            End Get
            Set
                Me(Me.tableDisposedAssets.AstIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSold() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.IsSoldColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsSold' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.IsSoldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SoldTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.SoldToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SoldTo' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.SoldToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.RefNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefNo' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.RefNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.CompCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompCode' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.CompCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.CustodianNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianName' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.CustodianNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.AstCatDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatDesc' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.AstCatDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.PurDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurDate' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.PurDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseCost() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.BaseCostColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseCost' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.BaseCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.TaxColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.TaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Discount() As Long
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.DiscountColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Discount' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.DiscountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tot() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.totColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.totColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.InvNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvNumber' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.InvNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.SuppNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppName' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.SuppNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.InsNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InsName' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.InsNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.LocIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocID' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.LocIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstBrandName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.AstBrandNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstBrandName' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.AstBrandNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SrvDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.SrvDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SrvDate' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.SrvDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstModel() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.AstModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstModel' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.AstModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Disposed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.DisposedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Disposed' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.DisposedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BarCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.BarCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BarCode' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.BarCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerailNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.SerailNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerailNo' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.SerailNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.RefCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefCode' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.RefCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plate() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.PlateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plate' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.PlateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Poerp() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.PoerpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Poerp' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.PoerpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capex() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.CapexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Capex' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.CapexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grn() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.GrnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grn' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.GrnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.GLCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLCode' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.GLCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.AstCatIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatID' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.AstCatIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CatFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.CatFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CatFullPath' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.CatFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.LocationFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationFullPath' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.LocationFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Return CType(Me(Me.tableDisposedAssets.CustodianIDColumn),String)
            End Get
            Set
                Me(Me.tableDisposedAssets.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.CustodianCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianCode' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.CustodianCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc1() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.AstDesc1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc1' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.AstDesc1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.AstDesc2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc2' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.AstDesc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.ItemDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDesc' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.ItemDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Return CType(Me(Me.tableDisposedAssets.ItemCodeColumn),String)
            End Get
            Set
                Me(Me.tableDisposedAssets.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisposalComments() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposedAssets.DisposalCommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DisposalComments' in table 'DisposedAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposedAssets.DisposalCommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDispDateNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.DispDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDispDateNull()
            Me(Me.tableDisposedAssets.DispDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDispDescNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.DispDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDispDescNull()
            Me(Me.tableDisposedAssets.DispDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransRemarksNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.TransRemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransRemarksNull()
            Me(Me.tableDisposedAssets.TransRemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSel_PriceNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.Sel_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSel_PriceNull()
            Me(Me.tableDisposedAssets.Sel_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSel_DateNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.Sel_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSel_DateNull()
            Me(Me.tableDisposedAssets.Sel_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsSoldNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.IsSoldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsSoldNull()
            Me(Me.tableDisposedAssets.IsSoldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSoldToNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.SoldToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSoldToNull()
            Me(Me.tableDisposedAssets.SoldToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefNoNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.RefNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefNoNull()
            Me(Me.tableDisposedAssets.RefNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompCodeNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.CompCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompCodeNull()
            Me(Me.tableDisposedAssets.CompCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianNameNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.CustodianNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianNameNull()
            Me(Me.tableDisposedAssets.CustodianNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatDescNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.AstCatDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatDescNull()
            Me(Me.tableDisposedAssets.AstCatDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurDateNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.PurDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurDateNull()
            Me(Me.tableDisposedAssets.PurDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableDisposedAssets.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseCostNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.BaseCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseCostNull()
            Me(Me.tableDisposedAssets.BaseCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.TaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxNull()
            Me(Me.tableDisposedAssets.TaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.DiscountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscountNull()
            Me(Me.tableDisposedAssets.DiscountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.totColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotNull()
            Me(Me.tableDisposedAssets.totColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvNumberNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.InvNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvNumberNull()
            Me(Me.tableDisposedAssets.InvNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppNameNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.SuppNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppNameNull()
            Me(Me.tableDisposedAssets.SuppNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsNameNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.InsNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsNameNull()
            Me(Me.tableDisposedAssets.InsNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocIDNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.LocIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocIDNull()
            Me(Me.tableDisposedAssets.LocIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstBrandNameNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.AstBrandNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstBrandNameNull()
            Me(Me.tableDisposedAssets.AstBrandNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrvDateNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.SrvDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrvDateNull()
            Me(Me.tableDisposedAssets.SrvDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstModelNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.AstModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstModelNull()
            Me(Me.tableDisposedAssets.AstModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisposedNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.DisposedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisposedNull()
            Me(Me.tableDisposedAssets.DisposedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarCodeNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.BarCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarCodeNull()
            Me(Me.tableDisposedAssets.BarCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerailNoNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.SerailNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerailNoNull()
            Me(Me.tableDisposedAssets.SerailNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefCodeNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.RefCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefCodeNull()
            Me(Me.tableDisposedAssets.RefCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlateNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.PlateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlateNull()
            Me(Me.tableDisposedAssets.PlateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPoerpNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.PoerpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPoerpNull()
            Me(Me.tableDisposedAssets.PoerpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCapexNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.CapexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCapexNull()
            Me(Me.tableDisposedAssets.CapexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrnNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.GrnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrnNull()
            Me(Me.tableDisposedAssets.GrnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLCodeNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.GLCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLCodeNull()
            Me(Me.tableDisposedAssets.GLCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatIDNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.AstCatIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatIDNull()
            Me(Me.tableDisposedAssets.AstCatIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatFullPathNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.CatFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatFullPathNull()
            Me(Me.tableDisposedAssets.CatFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationFullPathNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.LocationFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationFullPathNull()
            Me(Me.tableDisposedAssets.LocationFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianCodeNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.CustodianCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianCodeNull()
            Me(Me.tableDisposedAssets.CustodianCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc1Null() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.AstDesc1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc1Null()
            Me(Me.tableDisposedAssets.AstDesc1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc2Null() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.AstDesc2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc2Null()
            Me(Me.tableDisposedAssets.AstDesc2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDescNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.ItemDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDescNull()
            Me(Me.tableDisposedAssets.ItemDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisposalCommentsNull() As Boolean
            Return Me.IsNull(Me.tableDisposedAssets.DisposalCommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisposalCommentsNull()
            Me(Me.tableDisposedAssets.DisposalCommentsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AuditSatusRow
        Inherits Global.System.Data.DataRow
        
        Private tableAuditSatus As AuditSatusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAuditSatus = CType(Me.Table,AuditSatusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvSchCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.InvSchCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvSchCode' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.InvSchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstID() As String
            Get
                Return CType(Me(Me.tableAuditSatus.AstIDColumn),String)
            End Get
            Set
                Me(Me.tableAuditSatus.AstIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstNum() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.AstNumColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstNum' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.AstNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewLoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.NewLocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NewLoc' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.NewLocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.StatusColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.StatusDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatusDesc' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.StatusDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HisDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.HisDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HisDate' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.HisDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstModel() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.AstModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstModel' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.AstModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerailNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.SerailNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerailNo' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.SerailNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.AstCatIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatID' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.AstCatIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CatFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.CatFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CatFullPath' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.CatFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrevLoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.PrevLocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrevLoc' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.PrevLocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.CustodianIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianID' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.CustodianNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianName' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.CustodianNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.AstDesc1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc1' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.AstDesc1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.AstDesc2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc2' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.AstDesc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.ItemDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDesc' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.ItemDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.CustodianCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianCode' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.CustodianCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableAuditSatus.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'AuditSatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAuditSatus.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvSchCodeNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.InvSchCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvSchCodeNull()
            Me(Me.tableAuditSatus.InvSchCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstNumNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.AstNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstNumNull()
            Me(Me.tableAuditSatus.AstNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNewLocNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.NewLocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNewLocNull()
            Me(Me.tableAuditSatus.NewLocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableAuditSatus.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusDescNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.StatusDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusDescNull()
            Me(Me.tableAuditSatus.StatusDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHisDateNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.HisDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHisDateNull()
            Me(Me.tableAuditSatus.HisDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableAuditSatus.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstModelNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.AstModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstModelNull()
            Me(Me.tableAuditSatus.AstModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerailNoNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.SerailNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerailNoNull()
            Me(Me.tableAuditSatus.SerailNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatIDNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.AstCatIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatIDNull()
            Me(Me.tableAuditSatus.AstCatIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatFullPathNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.CatFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatFullPathNull()
            Me(Me.tableAuditSatus.CatFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrevLocNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.PrevLocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrevLocNull()
            Me(Me.tableAuditSatus.PrevLocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianIDNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.CustodianIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianIDNull()
            Me(Me.tableAuditSatus.CustodianIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianNameNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.CustodianNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianNameNull()
            Me(Me.tableAuditSatus.CustodianNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc1Null() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.AstDesc1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc1Null()
            Me(Me.tableAuditSatus.AstDesc1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc2Null() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.AstDesc2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc2Null()
            Me(Me.tableAuditSatus.AstDesc2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDescNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.ItemDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDescNull()
            Me(Me.tableAuditSatus.ItemDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableAuditSatus.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianCodeNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.CustodianCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianCodeNull()
            Me(Me.tableAuditSatus.CustodianCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableAuditSatus.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableAuditSatus.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ItemsInventoryRow
        Inherits Global.System.Data.DataRow
        
        Private tableItemsInventory As ItemsInventoryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableItemsInventory = CType(Me.Table,ItemsInventoryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Itemcode() As String
            Get
                Return CType(Me(Me.tableItemsInventory.ItemcodeColumn),String)
            End Get
            Set
                Me(Me.tableItemsInventory.ItemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableItemsInventory.AstDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc' in table 'ItemsInventory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsInventory.AstDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property total() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableItemsInventory.totalColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'total' in table 'ItemsInventory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableItemsInventory.totalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDescNull() As Boolean
            Return Me.IsNull(Me.tableItemsInventory.AstDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDescNull()
            Me(Me.tableItemsInventory.AstDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalNull() As Boolean
            Return Me.IsNull(Me.tableItemsInventory.totalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalNull()
            Me(Me.tableItemsInventory.totalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CompanyAssetsRow
        Inherits Global.System.Data.DataRow
        
        Private tableCompanyAssets As CompanyAssetsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCompanyAssets = CType(Me.Table,CompanyAssetsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstID() As String
            Get
                Return CType(Me(Me.tableCompanyAssets.AstIDColumn),String)
            End Get
            Set
                Me(Me.tableCompanyAssets.AstIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.PurDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurDate' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.PurDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CustodianNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianName' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CustodianNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstNum() As Long
            Get
                Return CType(Me(Me.tableCompanyAssets.AstNumColumn),Long)
            End Get
            Set
                Me(Me.tableCompanyAssets.AstNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.RefNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefNo' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.RefNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.AstCatDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatDesc' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.AstCatDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseCost() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.BaseCostColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseCost' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.BaseCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.TaxColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.TaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Discount() As Long
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.DiscountColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Discount' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.DiscountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tot() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.totColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.totColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.InvNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvNumber' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.InvNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.SuppNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppName' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.SuppNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.InsNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InsName' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.InsNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CompCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompCode' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CompCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocID() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.LocIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocID' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.LocIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocCompletePath() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.LocCompletePathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocCompletePath' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.LocCompletePathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstBrandName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.AstBrandNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstBrandName' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.AstBrandNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SrvDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.SrvDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SrvDate' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.SrvDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstModel() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.AstModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstModel' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.AstModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DispDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.DispDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DispDate' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.DispDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Disposed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.DisposedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Disposed' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.DisposedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BarCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.BarCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BarCode' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.BarCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerailNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.SerailNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerailNo' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.SerailNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.RefCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefCode' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.RefCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plate() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.PlateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plate' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.PlateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Poerp() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.PoerpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Poerp' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.PoerpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capex() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CapexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Capex' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CapexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grn() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.GrnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grn' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.GrnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.GLCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLCode' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.GLCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatID() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.AstCatIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatID' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.AstCatIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CatFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CatFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CatFullPath' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CatFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.LocationFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationFullPath' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.LocationFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.AstDesc1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc1' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.AstDesc1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.AstDesc2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc2' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.AstDesc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.ItemDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDesc' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.ItemDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Return CType(Me(Me.tableCompanyAssets.ItemCodeColumn),String)
            End Get
            Set
                Me(Me.tableCompanyAssets.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CompanyCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyCode' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CompanyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CompanyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyName' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CompanyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Return CType(Me(Me.tableCompanyAssets.CustodianIDColumn),String)
            End Get
            Set
                Me(Me.tableCompanyAssets.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssets.CustodianCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianCode' in table 'CompanyAssets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssets.CustodianCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurDateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.PurDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurDateNull()
            Me(Me.tableCompanyAssets.PurDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianNameNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CustodianNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianNameNull()
            Me(Me.tableCompanyAssets.CustodianNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefNoNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.RefNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefNoNull()
            Me(Me.tableCompanyAssets.RefNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatDescNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.AstCatDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatDescNull()
            Me(Me.tableCompanyAssets.AstCatDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableCompanyAssets.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseCostNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.BaseCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseCostNull()
            Me(Me.tableCompanyAssets.BaseCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.TaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxNull()
            Me(Me.tableCompanyAssets.TaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.DiscountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscountNull()
            Me(Me.tableCompanyAssets.DiscountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.totColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotNull()
            Me(Me.tableCompanyAssets.totColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvNumberNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.InvNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvNumberNull()
            Me(Me.tableCompanyAssets.InvNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppNameNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.SuppNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppNameNull()
            Me(Me.tableCompanyAssets.SuppNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsNameNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.InsNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsNameNull()
            Me(Me.tableCompanyAssets.InsNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompCodeNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CompCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompCodeNull()
            Me(Me.tableCompanyAssets.CompCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocIDNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.LocIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocIDNull()
            Me(Me.tableCompanyAssets.LocIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocCompletePathNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.LocCompletePathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocCompletePathNull()
            Me(Me.tableCompanyAssets.LocCompletePathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstBrandNameNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.AstBrandNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstBrandNameNull()
            Me(Me.tableCompanyAssets.AstBrandNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrvDateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.SrvDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrvDateNull()
            Me(Me.tableCompanyAssets.SrvDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstModelNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.AstModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstModelNull()
            Me(Me.tableCompanyAssets.AstModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDispDateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.DispDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDispDateNull()
            Me(Me.tableCompanyAssets.DispDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisposedNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.DisposedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisposedNull()
            Me(Me.tableCompanyAssets.DisposedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarCodeNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.BarCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarCodeNull()
            Me(Me.tableCompanyAssets.BarCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerailNoNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.SerailNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerailNoNull()
            Me(Me.tableCompanyAssets.SerailNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefCodeNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.RefCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefCodeNull()
            Me(Me.tableCompanyAssets.RefCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.PlateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlateNull()
            Me(Me.tableCompanyAssets.PlateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPoerpNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.PoerpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPoerpNull()
            Me(Me.tableCompanyAssets.PoerpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCapexNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CapexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCapexNull()
            Me(Me.tableCompanyAssets.CapexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrnNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.GrnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrnNull()
            Me(Me.tableCompanyAssets.GrnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLCodeNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.GLCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLCodeNull()
            Me(Me.tableCompanyAssets.GLCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatIDNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.AstCatIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatIDNull()
            Me(Me.tableCompanyAssets.AstCatIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatFullPathNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CatFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatFullPathNull()
            Me(Me.tableCompanyAssets.CatFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationFullPathNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.LocationFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationFullPathNull()
            Me(Me.tableCompanyAssets.LocationFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc1Null() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.AstDesc1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc1Null()
            Me(Me.tableCompanyAssets.AstDesc1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc2Null() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.AstDesc2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc2Null()
            Me(Me.tableCompanyAssets.AstDesc2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDescNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.ItemDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDescNull()
            Me(Me.tableCompanyAssets.ItemDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyCodeNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CompanyCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyCodeNull()
            Me(Me.tableCompanyAssets.CompanyCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyNameNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CompanyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyNameNull()
            Me(Me.tableCompanyAssets.CompanyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianCodeNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssets.CustodianCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianCodeNull()
            Me(Me.tableCompanyAssets.CustodianCodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssetByCatRow
        Inherits Global.System.Data.DataRow
        
        Private tableAssetByCat As AssetByCatDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssetByCat = CType(Me.Table,AssetByCatDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MainCat() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetByCat.MainCatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MainCat' in table 'AssetByCat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetByCat.MainCatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invest_OB() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetByCat.Invest_OBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Invest_OB' in table 'AssetByCat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetByCat.Invest_OBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invest_Add() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetByCat.Invest_AddColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Invest_Add' in table 'AssetByCat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetByCat.Invest_AddColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invest_Ded() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetByCat.Invest_DedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Invest_Ded' in table 'AssetByCat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetByCat.Invest_DedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invest_CB() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetByCat.Invest_CBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Invest_CB' in table 'AssetByCat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetByCat.Invest_CBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depr_OB() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetByCat.Depr_OBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depr_OB' in table 'AssetByCat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetByCat.Depr_OBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depr_Add() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetByCat.Depr_AddColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depr_Add' in table 'AssetByCat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetByCat.Depr_AddColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depr_Ded() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetByCat.Depr_DedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depr_Ded' in table 'AssetByCat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetByCat.Depr_DedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depr_CB() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetByCat.Depr_CBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depr_CB' in table 'AssetByCat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetByCat.Depr_CBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NetValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssetByCat.NetValueColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NetValue' in table 'AssetByCat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetByCat.NetValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMainCatNull() As Boolean
            Return Me.IsNull(Me.tableAssetByCat.MainCatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMainCatNull()
            Me(Me.tableAssetByCat.MainCatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvest_OBNull() As Boolean
            Return Me.IsNull(Me.tableAssetByCat.Invest_OBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvest_OBNull()
            Me(Me.tableAssetByCat.Invest_OBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvest_AddNull() As Boolean
            Return Me.IsNull(Me.tableAssetByCat.Invest_AddColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvest_AddNull()
            Me(Me.tableAssetByCat.Invest_AddColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvest_DedNull() As Boolean
            Return Me.IsNull(Me.tableAssetByCat.Invest_DedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvest_DedNull()
            Me(Me.tableAssetByCat.Invest_DedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvest_CBNull() As Boolean
            Return Me.IsNull(Me.tableAssetByCat.Invest_CBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvest_CBNull()
            Me(Me.tableAssetByCat.Invest_CBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepr_OBNull() As Boolean
            Return Me.IsNull(Me.tableAssetByCat.Depr_OBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepr_OBNull()
            Me(Me.tableAssetByCat.Depr_OBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepr_AddNull() As Boolean
            Return Me.IsNull(Me.tableAssetByCat.Depr_AddColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepr_AddNull()
            Me(Me.tableAssetByCat.Depr_AddColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepr_DedNull() As Boolean
            Return Me.IsNull(Me.tableAssetByCat.Depr_DedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepr_DedNull()
            Me(Me.tableAssetByCat.Depr_DedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepr_CBNull() As Boolean
            Return Me.IsNull(Me.tableAssetByCat.Depr_CBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepr_CBNull()
            Me(Me.tableAssetByCat.Depr_CBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNetValueNull() As Boolean
            Return Me.IsNull(Me.tableAssetByCat.NetValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNetValueNull()
            Me(Me.tableAssetByCat.NetValueColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SupplierRow
        Inherits Global.System.Data.DataRow
        
        Private tableSupplier As SupplierDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSupplier = CType(Me.Table,SupplierDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppID() As String
            Get
                Return CType(Me(Me.tableSupplier.SuppIDColumn),String)
            End Get
            Set
                Me(Me.tableSupplier.SuppIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSupplier.SuppNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppName' in table 'Supplier' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupplier.SuppNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppCell() As String
            Get
                Try 
                    Return CType(Me(Me.tableSupplier.SuppCellColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppCell' in table 'Supplier' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupplier.SuppCellColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableSupplier.SuppFaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppFax' in table 'Supplier' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupplier.SuppFaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableSupplier.SuppPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppPhone' in table 'Supplier' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupplier.SuppPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableSupplier.SuppEmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppEmail' in table 'Supplier' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupplier.SuppEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSupplier.IsDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsDeleted' in table 'Supplier' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupplier.IsDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppNameNull() As Boolean
            Return Me.IsNull(Me.tableSupplier.SuppNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppNameNull()
            Me(Me.tableSupplier.SuppNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppCellNull() As Boolean
            Return Me.IsNull(Me.tableSupplier.SuppCellColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppCellNull()
            Me(Me.tableSupplier.SuppCellColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppFaxNull() As Boolean
            Return Me.IsNull(Me.tableSupplier.SuppFaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppFaxNull()
            Me(Me.tableSupplier.SuppFaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppPhoneNull() As Boolean
            Return Me.IsNull(Me.tableSupplier.SuppPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppPhoneNull()
            Me(Me.tableSupplier.SuppPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppEmailNull() As Boolean
            Return Me.IsNull(Me.tableSupplier.SuppEmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppEmailNull()
            Me(Me.tableSupplier.SuppEmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsDeletedNull() As Boolean
            Return Me.IsNull(Me.tableSupplier.IsDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsDeletedNull()
            Me(Me.tableSupplier.IsDeletedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Depreciation_MethodRow
        Inherits Global.System.Data.DataRow
        
        Private tableDepreciation_Method As Depreciation_MethodDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDepreciation_Method = CType(Me.Table,Depreciation_MethodDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepCode() As Integer
            Get
                Return CType(Me(Me.tableDepreciation_Method.DepCodeColumn),Integer)
            End Get
            Set
                Me(Me.tableDepreciation_Method.DepCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepreciation_Method.DepDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepDesc' in table 'Depreciation_Method' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepreciation_Method.DepDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDeleted() As Boolean
            Get
                Return CType(Me(Me.tableDepreciation_Method.IsDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableDepreciation_Method.IsDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepDescNull() As Boolean
            Return Me.IsNull(Me.tableDepreciation_Method.DepDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepDescNull()
            Me(Me.tableDepreciation_Method.DepDescColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Disposal_MethodRow
        Inherits Global.System.Data.DataRow
        
        Private tableDisposal_Method As Disposal_MethodDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDisposal_Method = CType(Me.Table,Disposal_MethodDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DispCode() As Integer
            Get
                Return CType(Me(Me.tableDisposal_Method.DispCodeColumn),Integer)
            End Get
            Set
                Me(Me.tableDisposal_Method.DispCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DispDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisposal_Method.DispDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DispDesc' in table 'Disposal_Method' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposal_Method.DispDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDisposal_Method.IsDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsDeleted' in table 'Disposal_Method' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisposal_Method.IsDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDispDescNull() As Boolean
            Return Me.IsNull(Me.tableDisposal_Method.DispDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDispDescNull()
            Me(Me.tableDisposal_Method.DispDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsDeletedNull() As Boolean
            Return Me.IsNull(Me.tableDisposal_Method.IsDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsDeletedNull()
            Me(Me.tableDisposal_Method.IsDeletedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Ast_INV_ScheduleRow
        Inherits Global.System.Data.DataRow
        
        Private tableAst_INV_Schedule As Ast_INV_ScheduleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAst_INV_Schedule = CType(Me.Table,Ast_INV_ScheduleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvSchCode() As Long
            Get
                Return CType(Me(Me.tableAst_INV_Schedule.InvSchCodeColumn),Long)
            End Get
            Set
                Me(Me.tableAst_INV_Schedule.InvSchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAst_INV_Schedule.InvDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvDesc' in table 'Ast_INV_Schedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAst_INV_Schedule.InvDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvStartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAst_INV_Schedule.InvStartDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvStartDate' in table 'Ast_INV_Schedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAst_INV_Schedule.InvStartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvEndDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAst_INV_Schedule.InvEndDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvEndDate' in table 'Ast_INV_Schedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAst_INV_Schedule.InvEndDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAst_INV_Schedule.IsDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsDeleted' in table 'Ast_INV_Schedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAst_INV_Schedule.IsDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Closed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAst_INV_Schedule.ClosedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Closed' in table 'Ast_INV_Schedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAst_INV_Schedule.ClosedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvDescNull() As Boolean
            Return Me.IsNull(Me.tableAst_INV_Schedule.InvDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvDescNull()
            Me(Me.tableAst_INV_Schedule.InvDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvStartDateNull() As Boolean
            Return Me.IsNull(Me.tableAst_INV_Schedule.InvStartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvStartDateNull()
            Me(Me.tableAst_INV_Schedule.InvStartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvEndDateNull() As Boolean
            Return Me.IsNull(Me.tableAst_INV_Schedule.InvEndDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvEndDateNull()
            Me(Me.tableAst_INV_Schedule.InvEndDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsDeletedNull() As Boolean
            Return Me.IsNull(Me.tableAst_INV_Schedule.IsDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsDeletedNull()
            Me(Me.tableAst_INV_Schedule.IsDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClosedNull() As Boolean
            Return Me.IsNull(Me.tableAst_INV_Schedule.ClosedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClosedNull()
            Me(Me.tableAst_INV_Schedule.ClosedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class InsurerRow
        Inherits Global.System.Data.DataRow
        
        Private tableInsurer As InsurerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableInsurer = CType(Me.Table,InsurerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsCode() As Integer
            Get
                Return CType(Me(Me.tableInsurer.InsCodeColumn),Integer)
            End Get
            Set
                Me(Me.tableInsurer.InsCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsName() As String
            Get
                Try 
                    Return CType(Me(Me.tableInsurer.InsNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InsName' in table 'Insurer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInsurer.InsNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsNameNull() As Boolean
            Return Me.IsNull(Me.tableInsurer.InsNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsNameNull()
            Me(Me.tableInsurer.InsNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Report_AssetbySubCategoryRow
        Inherits Global.System.Data.DataRow
        
        Private tableReport_AssetbySubCategory As Report_AssetbySubCategoryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReport_AssetbySubCategory = CType(Me.Table,Report_AssetbySubCategoryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MainCat() As String
            Get
                Try 
                    Return CType(Me(Me.tableReport_AssetbySubCategory.MainCatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MainCat' in table 'Report_AssetbySubCategory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReport_AssetbySubCategory.MainCatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubCat() As String
            Get
                Try 
                    Return CType(Me(Me.tableReport_AssetbySubCategory.SubCatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubCat' in table 'Report_AssetbySubCategory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReport_AssetbySubCategory.SubCatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cat() As String
            Get
                Try 
                    Return CType(Me(Me.tableReport_AssetbySubCategory.CatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cat' in table 'Report_AssetbySubCategory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReport_AssetbySubCategory.CatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invest_OB() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReport_AssetbySubCategory.Invest_OBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Invest_OB' in table 'Report_AssetbySubCategory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReport_AssetbySubCategory.Invest_OBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invest_Add() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReport_AssetbySubCategory.Invest_AddColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Invest_Add' in table 'Report_AssetbySubCategory' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableReport_AssetbySubCategory.Invest_AddColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invest_Ded() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReport_AssetbySubCategory.Invest_DedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Invest_Ded' in table 'Report_AssetbySubCategory' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableReport_AssetbySubCategory.Invest_DedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invest_CB() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReport_AssetbySubCategory.Invest_CBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Invest_CB' in table 'Report_AssetbySubCategory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReport_AssetbySubCategory.Invest_CBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depr_OB() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReport_AssetbySubCategory.Depr_OBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depr_OB' in table 'Report_AssetbySubCategory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReport_AssetbySubCategory.Depr_OBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depr_Add() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReport_AssetbySubCategory.Depr_AddColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depr_Add' in table 'Report_AssetbySubCategory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReport_AssetbySubCategory.Depr_AddColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depr_Ded() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReport_AssetbySubCategory.Depr_DedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depr_Ded' in table 'Report_AssetbySubCategory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReport_AssetbySubCategory.Depr_DedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depr_CB() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReport_AssetbySubCategory.Depr_CBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depr_CB' in table 'Report_AssetbySubCategory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReport_AssetbySubCategory.Depr_CBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NetValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReport_AssetbySubCategory.NetValueColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NetValue' in table 'Report_AssetbySubCategory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReport_AssetbySubCategory.NetValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMainCatNull() As Boolean
            Return Me.IsNull(Me.tableReport_AssetbySubCategory.MainCatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMainCatNull()
            Me(Me.tableReport_AssetbySubCategory.MainCatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubCatNull() As Boolean
            Return Me.IsNull(Me.tableReport_AssetbySubCategory.SubCatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubCatNull()
            Me(Me.tableReport_AssetbySubCategory.SubCatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatNull() As Boolean
            Return Me.IsNull(Me.tableReport_AssetbySubCategory.CatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatNull()
            Me(Me.tableReport_AssetbySubCategory.CatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvest_OBNull() As Boolean
            Return Me.IsNull(Me.tableReport_AssetbySubCategory.Invest_OBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvest_OBNull()
            Me(Me.tableReport_AssetbySubCategory.Invest_OBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvest_AddNull() As Boolean
            Return Me.IsNull(Me.tableReport_AssetbySubCategory.Invest_AddColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvest_AddNull()
            Me(Me.tableReport_AssetbySubCategory.Invest_AddColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvest_DedNull() As Boolean
            Return Me.IsNull(Me.tableReport_AssetbySubCategory.Invest_DedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvest_DedNull()
            Me(Me.tableReport_AssetbySubCategory.Invest_DedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvest_CBNull() As Boolean
            Return Me.IsNull(Me.tableReport_AssetbySubCategory.Invest_CBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvest_CBNull()
            Me(Me.tableReport_AssetbySubCategory.Invest_CBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepr_OBNull() As Boolean
            Return Me.IsNull(Me.tableReport_AssetbySubCategory.Depr_OBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepr_OBNull()
            Me(Me.tableReport_AssetbySubCategory.Depr_OBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepr_AddNull() As Boolean
            Return Me.IsNull(Me.tableReport_AssetbySubCategory.Depr_AddColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepr_AddNull()
            Me(Me.tableReport_AssetbySubCategory.Depr_AddColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepr_DedNull() As Boolean
            Return Me.IsNull(Me.tableReport_AssetbySubCategory.Depr_DedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepr_DedNull()
            Me(Me.tableReport_AssetbySubCategory.Depr_DedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepr_CBNull() As Boolean
            Return Me.IsNull(Me.tableReport_AssetbySubCategory.Depr_CBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepr_CBNull()
            Me(Me.tableReport_AssetbySubCategory.Depr_CBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNetValueNull() As Boolean
            Return Me.IsNull(Me.tableReport_AssetbySubCategory.NetValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNetValueNull()
            Me(Me.tableReport_AssetbySubCategory.NetValueColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BrandRow
        Inherits Global.System.Data.DataRow
        
        Private tableBrand As BrandDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBrand = CType(Me.Table,BrandDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstBrandID() As Integer
            Get
                Return CType(Me(Me.tableBrand.AstBrandIDColumn),Integer)
            End Get
            Set
                Me(Me.tableBrand.AstBrandIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstBrandName() As String
            Get
                Try 
                    Return CType(Me(Me.tableBrand.AstBrandNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstBrandName' in table 'Brand' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBrand.AstBrandNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstBrandNameNull() As Boolean
            Return Me.IsNull(Me.tableBrand.AstBrandNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstBrandNameNull()
            Me(Me.tableBrand.AstBrandNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssetsItemsRow
        Inherits Global.System.Data.DataRow
        
        Private tableAssetsItems As AssetsItemsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssetsItems = CType(Me.Table,AssetsItemsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemcode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssetsItems.itemcodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'itemcode' in table 'AssetsItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsItems.itemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstBrandID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssetsItems.AstBrandIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstBrandID' in table 'AssetsItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsItems.AstBrandIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsItems.AstCatIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatID' in table 'AssetsItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsItems.AstCatIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POItmId() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsItems.POItmIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POItmId' in table 'AssetsItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsItems.POItmIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsItems.AstDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc' in table 'AssetsItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsItems.AstDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstModel() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsItems.AstModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstModel' in table 'AssetsItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsItems.AstModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstQTY() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAssetsItems.AstQTYColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstQTY' in table 'AssetsItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsItems.AstQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAssetsItems.IsDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsDeleted' in table 'AssetsItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsItems.IsDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstBrandName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsItems.AstBrandNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstBrandName' in table 'AssetsItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsItems.AstBrandNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsItems.AstCatDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatDesc' in table 'AssetsItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsItems.AstCatDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CatFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetsItems.CatFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CatFullPath' in table 'AssetsItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetsItems.CatFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsitemcodeNull() As Boolean
            Return Me.IsNull(Me.tableAssetsItems.itemcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetitemcodeNull()
            Me(Me.tableAssetsItems.itemcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstBrandIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetsItems.AstBrandIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstBrandIDNull()
            Me(Me.tableAssetsItems.AstBrandIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetsItems.AstCatIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatIDNull()
            Me(Me.tableAssetsItems.AstCatIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOItmIdNull() As Boolean
            Return Me.IsNull(Me.tableAssetsItems.POItmIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOItmIdNull()
            Me(Me.tableAssetsItems.POItmIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetsItems.AstDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDescNull()
            Me(Me.tableAssetsItems.AstDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstModelNull() As Boolean
            Return Me.IsNull(Me.tableAssetsItems.AstModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstModelNull()
            Me(Me.tableAssetsItems.AstModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstQTYNull() As Boolean
            Return Me.IsNull(Me.tableAssetsItems.AstQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstQTYNull()
            Me(Me.tableAssetsItems.AstQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsDeletedNull() As Boolean
            Return Me.IsNull(Me.tableAssetsItems.IsDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsDeletedNull()
            Me(Me.tableAssetsItems.IsDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstBrandNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetsItems.AstBrandNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstBrandNameNull()
            Me(Me.tableAssetsItems.AstBrandNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetsItems.AstCatDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatDescNull()
            Me(Me.tableAssetsItems.AstCatDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatFullPathNull() As Boolean
            Return Me.IsNull(Me.tableAssetsItems.CatFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatFullPathNull()
            Me(Me.tableAssetsItems.CatFullPathColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssetBooksRow
        Inherits Global.System.Data.DataRow
        
        Private tableAssetBooks As AssetBooksDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssetBooks = CType(Me.Table,AssetBooksDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Selection() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetBooks.SelectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Selection' in table 'AssetBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetBooks.SelectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BookID() As Integer
            Get
                Return CType(Me(Me.tableAssetBooks.BookIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAssetBooks.BookIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetBooks.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'AssetBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetBooks.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetBooks.DepDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepDesc' in table 'AssetBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetBooks.DepDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepCode() As Integer
            Get
                Return CType(Me(Me.tableAssetBooks.DepCodeColumn),Integer)
            End Get
            Set
                Me(Me.tableAssetBooks.DepCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssetBooks.CompanyIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyID' in table 'AssetBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetBooks.CompanyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetBooks.CompanyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyName' in table 'AssetBooks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetBooks.CompanyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelectionNull() As Boolean
            Return Me.IsNull(Me.tableAssetBooks.SelectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelectionNull()
            Me(Me.tableAssetBooks.SelectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableAssetBooks.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableAssetBooks.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepDescNull() As Boolean
            Return Me.IsNull(Me.tableAssetBooks.DepDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepDescNull()
            Me(Me.tableAssetBooks.DepDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyIDNull() As Boolean
            Return Me.IsNull(Me.tableAssetBooks.CompanyIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyIDNull()
            Me(Me.tableAssetBooks.CompanyIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetBooks.CompanyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyNameNull()
            Me(Me.tableAssetBooks.CompanyNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AddressRow
        Inherits Global.System.Data.DataRow
        
        Private tableAddress As AddressDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAddress = CType(Me.Table,AddressDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressID() As Long
            Get
                Return CType(Me(Me.tableAddress.AddressIDColumn),Long)
            End Get
            Set
                Me(Me.tableAddress.AddressIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAddress.AddressDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressDesc' in table 'Address' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddress.AddressDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAddress.IsDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsDeleted' in table 'Address' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddress.IsDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressDescNull() As Boolean
            Return Me.IsNull(Me.tableAddress.AddressDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressDescNull()
            Me(Me.tableAddress.AddressDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsDeletedNull() As Boolean
            Return Me.IsNull(Me.tableAddress.IsDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsDeletedNull()
            Me(Me.tableAddress.IsDeletedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rptStockIssuanceRow
        Inherits Global.System.Data.DataRow
        
        Private tablerptStockIssuance As rptStockIssuanceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerptStockIssuance = CType(Me.Table,rptStockIssuanceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstID() As String
            Get
                Return CType(Me(Me.tablerptStockIssuance.AstIDColumn),String)
            End Get
            Set
                Me(Me.tablerptStockIssuance.AstIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstNum() As Long
            Get
                Return CType(Me(Me.tablerptStockIssuance.AstNumColumn),Long)
            End Get
            Set
                Me(Me.tablerptStockIssuance.AstNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.AstDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.AstDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstModel() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.AstModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstModel' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.AstModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerailNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.SerailNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerailNo' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.SerailNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstLocation() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.AstLocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstLocation' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.AstLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCategory() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.AstCategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCategory' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.AstCategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCustodian() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.AstCustodianColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCustodian' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.AstCustodianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.CustodianIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianID' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocID() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.LocIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocID' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.LocIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.CustodianCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianCode' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.CustodianCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ToCustodian() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.ToCustodianColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ToCustodian' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.ToCustodianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ToCustodianID() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.ToCustodianIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ToCustodianID' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.ToCustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ToLocID() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.ToLocIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ToLocID' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.ToLocIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ToLocation() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptStockIssuance.ToLocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ToLocation' in table 'rptStockIssuance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptStockIssuance.ToLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tablerptStockIssuance.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDescNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.AstDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDescNull()
            Me(Me.tablerptStockIssuance.AstDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstModelNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.AstModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstModelNull()
            Me(Me.tablerptStockIssuance.AstModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerailNoNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.SerailNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerailNoNull()
            Me(Me.tablerptStockIssuance.SerailNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstLocationNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.AstLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstLocationNull()
            Me(Me.tablerptStockIssuance.AstLocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCategoryNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.AstCategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCategoryNull()
            Me(Me.tablerptStockIssuance.AstCategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCustodianNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.AstCustodianColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCustodianNull()
            Me(Me.tablerptStockIssuance.AstCustodianColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianIDNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.CustodianIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianIDNull()
            Me(Me.tablerptStockIssuance.CustodianIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocIDNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.LocIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocIDNull()
            Me(Me.tablerptStockIssuance.LocIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianCodeNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.CustodianCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianCodeNull()
            Me(Me.tablerptStockIssuance.CustodianCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsToCustodianNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.ToCustodianColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetToCustodianNull()
            Me(Me.tablerptStockIssuance.ToCustodianColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsToCustodianIDNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.ToCustodianIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetToCustodianIDNull()
            Me(Me.tablerptStockIssuance.ToCustodianIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsToLocIDNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.ToLocIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetToLocIDNull()
            Me(Me.tablerptStockIssuance.ToLocIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsToLocationNull() As Boolean
            Return Me.IsNull(Me.tablerptStockIssuance.ToLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetToLocationNull()
            Me(Me.tablerptStockIssuance.ToLocationColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LocationLabelRow
        Inherits Global.System.Data.DataRow
        
        Private tableLocationLabel As LocationLabelDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLocationLabel = CType(Me.Table,LocationLabelDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocID() As String
            Get
                Return CType(Me(Me.tableLocationLabel.LocIDColumn),String)
            End Get
            Set
                Me(Me.tableLocationLabel.LocIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocBarcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableLocationLabel.LocBarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocBarcode' in table 'LocationLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLocationLabel.LocBarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableLocationLabel.LocDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocDesc' in table 'LocationLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLocationLabel.LocDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableLocationLabel.CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Code' in table 'LocationLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLocationLabel.CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompleteCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableLocationLabel.CompleteCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompleteCode' in table 'LocationLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLocationLabel.CompleteCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompleteDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableLocationLabel.CompleteDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompleteDesc' in table 'LocationLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLocationLabel.CompleteDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLocationLabel.CompanyIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyID' in table 'LocationLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLocationLabel.CompanyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableLocationLabel.CompanyCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyCode' in table 'LocationLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLocationLabel.CompanyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableLocationLabel.CompanyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyName' in table 'LocationLabel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLocationLabel.CompanyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableLocationLabel.LocBarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocBarcodeNull()
            Me(Me.tableLocationLabel.LocBarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocDescNull() As Boolean
            Return Me.IsNull(Me.tableLocationLabel.LocDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocDescNull()
            Me(Me.tableLocationLabel.LocDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeNull() As Boolean
            Return Me.IsNull(Me.tableLocationLabel.CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeNull()
            Me(Me.tableLocationLabel.CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompleteCodeNull() As Boolean
            Return Me.IsNull(Me.tableLocationLabel.CompleteCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompleteCodeNull()
            Me(Me.tableLocationLabel.CompleteCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompleteDescNull() As Boolean
            Return Me.IsNull(Me.tableLocationLabel.CompleteDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompleteDescNull()
            Me(Me.tableLocationLabel.CompleteDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyIDNull() As Boolean
            Return Me.IsNull(Me.tableLocationLabel.CompanyIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyIDNull()
            Me(Me.tableLocationLabel.CompanyIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyCodeNull() As Boolean
            Return Me.IsNull(Me.tableLocationLabel.CompanyCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyCodeNull()
            Me(Me.tableLocationLabel.CompanyCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyNameNull() As Boolean
            Return Me.IsNull(Me.tableLocationLabel.CompanyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyNameNull()
            Me(Me.tableLocationLabel.CompanyNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rpt_AssetsLogRow
        Inherits Global.System.Data.DataRow
        
        Private tablerpt_AssetsLog As rpt_AssetsLogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerpt_AssetsLog = CType(Me.Table,rpt_AssetsLogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstID() As String
            Get
                Return CType(Me(Me.tablerpt_AssetsLog.AstIDColumn),String)
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.AstIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstNum() As Long
            Get
                Return CType(Me(Me.tablerpt_AssetsLog.AstNumColumn),Long)
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.AstNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.RefNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefNo' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.RefNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.CompCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompCode' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.CompCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianName() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.CustodianNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianName' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.CustodianNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.AstCatDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatDesc' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.AstCatDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.PurDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurDate' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.PurDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseCost() As Double
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.BaseCostColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseCost' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.BaseCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax() As Double
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.TaxColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.TaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Discount() As Long
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.DiscountColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Discount' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.DiscountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.totColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.totColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.InvNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvNumber' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.InvNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuppName() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.SuppNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SuppName' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.SuppNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsName() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.InsNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InsName' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.InsNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocID() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.LocIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocID' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.LocIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstBrandName() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.AstBrandNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstBrandName' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.AstBrandNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SrvDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.SrvDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SrvDate' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.SrvDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstModel() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.AstModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstModel' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.AstModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DispDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.DispDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DispDate' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.DispDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Disposed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.DisposedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Disposed' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.DisposedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BarCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.BarCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BarCode' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.BarCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerailNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.SerailNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerailNo' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.SerailNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.RefCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefCode' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.RefCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plate() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.PlateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plate' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.PlateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Poerp() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.PoerpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Poerp' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.PoerpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capex() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.CapexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Capex' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.CapexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grn() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.GrnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grn' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.GrnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLCode() As Long
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.GLCodeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLCode' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.GLCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstCatID() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.AstCatIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstCatID' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.AstCatIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CatFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.CatFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CatFullPath' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.CatFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationFullPath() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.LocationFullPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationFullPath' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.LocationFullPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc1() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.AstDesc1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc1' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.AstDesc1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AstDesc2() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.AstDesc2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AstDesc2' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.AstDesc2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.ItemDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDesc' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.ItemDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Return CType(Me(Me.tablerpt_AssetsLog.ItemCodeColumn),String)
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.CompanyCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyCode' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.CompanyCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyName() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.CompanyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompanyName' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.CompanyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianID() As String
            Get
                Return CType(Me(Me.tablerpt_AssetsLog.CustodianIDColumn),String)
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.CustodianIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustodianCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.CustodianCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustodianCode' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.CustodianCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActionType() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.ActionTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ActionType' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.ActionTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActionDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.ActionDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ActionDate' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.ActionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActionUser() As String
            Get
                Try 
                    Return CType(Me(Me.tablerpt_AssetsLog.ActionUserColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ActionUser' in table 'rpt_AssetsLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerpt_AssetsLog.ActionUserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefNoNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.RefNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefNoNull()
            Me(Me.tablerpt_AssetsLog.RefNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompCodeNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.CompCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompCodeNull()
            Me(Me.tablerpt_AssetsLog.CompCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianNameNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.CustodianNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianNameNull()
            Me(Me.tablerpt_AssetsLog.CustodianNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatDescNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.AstCatDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatDescNull()
            Me(Me.tablerpt_AssetsLog.AstCatDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurDateNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.PurDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurDateNull()
            Me(Me.tablerpt_AssetsLog.PurDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tablerpt_AssetsLog.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseCostNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.BaseCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseCostNull()
            Me(Me.tablerpt_AssetsLog.BaseCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.TaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxNull()
            Me(Me.tablerpt_AssetsLog.TaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.DiscountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscountNull()
            Me(Me.tablerpt_AssetsLog.DiscountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.totColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotNull()
            Me(Me.tablerpt_AssetsLog.totColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvNumberNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.InvNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvNumberNull()
            Me(Me.tablerpt_AssetsLog.InvNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuppNameNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.SuppNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuppNameNull()
            Me(Me.tablerpt_AssetsLog.SuppNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsNameNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.InsNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsNameNull()
            Me(Me.tablerpt_AssetsLog.InsNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocIDNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.LocIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocIDNull()
            Me(Me.tablerpt_AssetsLog.LocIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstBrandNameNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.AstBrandNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstBrandNameNull()
            Me(Me.tablerpt_AssetsLog.AstBrandNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrvDateNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.SrvDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrvDateNull()
            Me(Me.tablerpt_AssetsLog.SrvDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstModelNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.AstModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstModelNull()
            Me(Me.tablerpt_AssetsLog.AstModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDispDateNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.DispDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDispDateNull()
            Me(Me.tablerpt_AssetsLog.DispDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisposedNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.DisposedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisposedNull()
            Me(Me.tablerpt_AssetsLog.DisposedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarCodeNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.BarCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarCodeNull()
            Me(Me.tablerpt_AssetsLog.BarCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerailNoNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.SerailNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerailNoNull()
            Me(Me.tablerpt_AssetsLog.SerailNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefCodeNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.RefCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefCodeNull()
            Me(Me.tablerpt_AssetsLog.RefCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlateNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.PlateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlateNull()
            Me(Me.tablerpt_AssetsLog.PlateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPoerpNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.PoerpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPoerpNull()
            Me(Me.tablerpt_AssetsLog.PoerpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCapexNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.CapexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCapexNull()
            Me(Me.tablerpt_AssetsLog.CapexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrnNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.GrnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrnNull()
            Me(Me.tablerpt_AssetsLog.GrnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLCodeNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.GLCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLCodeNull()
            Me(Me.tablerpt_AssetsLog.GLCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstCatIDNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.AstCatIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstCatIDNull()
            Me(Me.tablerpt_AssetsLog.AstCatIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatFullPathNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.CatFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatFullPathNull()
            Me(Me.tablerpt_AssetsLog.CatFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationFullPathNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.LocationFullPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationFullPathNull()
            Me(Me.tablerpt_AssetsLog.LocationFullPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc1Null() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.AstDesc1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc1Null()
            Me(Me.tablerpt_AssetsLog.AstDesc1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAstDesc2Null() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.AstDesc2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAstDesc2Null()
            Me(Me.tablerpt_AssetsLog.AstDesc2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDescNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.ItemDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDescNull()
            Me(Me.tablerpt_AssetsLog.ItemDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyCodeNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.CompanyCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyCodeNull()
            Me(Me.tablerpt_AssetsLog.CompanyCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyNameNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.CompanyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyNameNull()
            Me(Me.tablerpt_AssetsLog.CompanyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustodianCodeNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.CustodianCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustodianCodeNull()
            Me(Me.tablerpt_AssetsLog.CustodianCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActionTypeNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.ActionTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActionTypeNull()
            Me(Me.tablerpt_AssetsLog.ActionTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActionDateNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.ActionDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActionDateNull()
            Me(Me.tablerpt_AssetsLog.ActionDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActionUserNull() As Boolean
            Return Me.IsNull(Me.tablerpt_AssetsLog.ActionUserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActionUserNull()
            Me(Me.tablerpt_AssetsLog.ActionUserColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CostCenterAuditStatusRow
        Inherits Global.System.Data.DataRow
        
        Private tableCostCenterAuditStatus As CostCenterAuditStatusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCostCenterAuditStatus = CType(Me.Table,CostCenterAuditStatusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostID() As String
            Get
                Return CType(Me(Me.tableCostCenterAuditStatus.CostIDColumn),String)
            End Get
            Set
                Me(Me.tableCostCenterAuditStatus.CostIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableCostCenterAuditStatus.CostNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostNumber' in table 'CostCenterAuditStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostCenterAuditStatus.CostNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCostCenterAuditStatus.CostNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostName' in table 'CostCenterAuditStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostCenterAuditStatus.CostNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCostCenterAuditStatus.TotalCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalCount' in table 'CostCenterAuditStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostCenterAuditStatus.TotalCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Return CType(Me(Me.tableCostCenterAuditStatus.StatusColumn),String)
            End Get
            Set
                Me(Me.tableCostCenterAuditStatus.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostNumberNull() As Boolean
            Return Me.IsNull(Me.tableCostCenterAuditStatus.CostNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostNumberNull()
            Me(Me.tableCostCenterAuditStatus.CostNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostNameNull() As Boolean
            Return Me.IsNull(Me.tableCostCenterAuditStatus.CostNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostNameNull()
            Me(Me.tableCostCenterAuditStatus.CostNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCountNull() As Boolean
            Return Me.IsNull(Me.tableCostCenterAuditStatus.TotalCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCountNull()
            Me(Me.tableCostCenterAuditStatus.TotalCountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DesignationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DesignationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DesignationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DesignationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssetDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AssetDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssetDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssetDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CustodianRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CustodianRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CustodianRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CustodianRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssetsLabelRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AssetsLabelRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssetsLabelRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssetsLabelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssetRegRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AssetRegRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssetRegRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssetRegRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DepBooksRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DepBooksRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DepBooksRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DepBooksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssetTagRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AssetTagRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssetTagRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssetTagRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssetLedgerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AssetLedgerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssetLedgerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssetLedgerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DisposedAssetsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DisposedAssetsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DisposedAssetsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DisposedAssetsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AuditSatusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AuditSatusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AuditSatusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AuditSatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ItemsInventoryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ItemsInventoryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ItemsInventoryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ItemsInventoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CompanyAssetsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CompanyAssetsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CompanyAssetsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CompanyAssetsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssetByCatRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AssetByCatRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssetByCatRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssetByCatRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SupplierRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SupplierRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SupplierRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SupplierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Depreciation_MethodRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Depreciation_MethodRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Depreciation_MethodRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Depreciation_MethodRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Disposal_MethodRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Disposal_MethodRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Disposal_MethodRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Disposal_MethodRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Ast_INV_ScheduleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Ast_INV_ScheduleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Ast_INV_ScheduleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Ast_INV_ScheduleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class InsurerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As InsurerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As InsurerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As InsurerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Report_AssetbySubCategoryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Report_AssetbySubCategoryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Report_AssetbySubCategoryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Report_AssetbySubCategoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BrandRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BrandRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BrandRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BrandRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssetsItemsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AssetsItemsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssetsItemsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssetsItemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssetBooksRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AssetBooksRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssetBooksRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssetBooksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AddressRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AddressRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AddressRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AddressRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rptStockIssuanceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As rptStockIssuanceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rptStockIssuanceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rptStockIssuanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LocationLabelRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LocationLabelRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LocationLabelRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LocationLabelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rpt_AssetsLogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As rpt_AssetsLogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rpt_AssetsLogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rpt_AssetsLogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CostCenterAuditStatusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CostCenterAuditStatusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CostCenterAuditStatusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CostCenterAuditStatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ZulAssetsBEDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DesignationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Designation"
            tableMapping.ColumnMappings.Add("DesignationID", "DesignationID")
            tableMapping.ColumnMappings.Add("Description", "Description")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     DesignationID, Description"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Designation "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (IsDe"& _ 
                "leted = 0)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.DesignationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.DesignationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.DesignationDataTable = New ZulAssetsBEDataSet.DesignationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssetDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssetDetail"
            tableMapping.ColumnMappings.Add("AstNum", "AstNum")
            tableMapping.ColumnMappings.Add("itemcode", "itemcode")
            tableMapping.ColumnMappings.Add("AstDesc", "AstDesc")
            tableMapping.ColumnMappings.Add("AstID", "AstID")
            tableMapping.ColumnMappings.Add("LocDesc", "LocDesc")
            tableMapping.ColumnMappings.Add("CustodianName", "CustodianName")
            tableMapping.ColumnMappings.Add("LocID", "LocID")
            tableMapping.ColumnMappings.Add("AstCatID", "AstCatID")
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("AstBrandName", "AstBrandName")
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName")
            tableMapping.ColumnMappings.Add("CompanyID", "CompanyID")
            tableMapping.ColumnMappings.Add("AstModel", "AstModel")
            tableMapping.ColumnMappings.Add("InsName", "InsName")
            tableMapping.ColumnMappings.Add("AstCatDesc", "AstCatDesc")
            tableMapping.ColumnMappings.Add("SuppName", "SuppName")
            tableMapping.ColumnMappings.Add("TransRemarks", "TransRemarks")
            tableMapping.ColumnMappings.Add("BaseCost", "BaseCost")
            tableMapping.ColumnMappings.Add("Tax", "Tax")
            tableMapping.ColumnMappings.Add("SrvDate", "SrvDate")
            tableMapping.ColumnMappings.Add("RefNo", "RefNo")
            tableMapping.ColumnMappings.Add("PurDate", "PurDate")
            tableMapping.ColumnMappings.Add("Assetdetailsdesc1", "Assetdetailsdesc1")
            tableMapping.ColumnMappings.Add("Assetdetailsdesc2", "Assetdetailsdesc2")
            tableMapping.ColumnMappings.Add("SerailNo", "SerailNo")
            tableMapping.ColumnMappings.Add("CustodianCode", "CustodianCode")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        AssetDetails.AstNum, CAST(Assets.ItemCode AS bigint) AS itemcode, A"& _ 
                "ssets.AstDesc, AssetDetails.AstID, Location.LocDesc, Custodian.CustodianName, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                         AssetDetails.LocID, Assets.AstCatID, Brand.AstBrandName"& _ 
                ", Companies.CompanyName, AssetDetails.RefNo, AssetDetails.CompanyID, AssetDetail"& _ 
                "s.PurDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AssetDetails.AstModel, Insurer.InsName, Ca"& _ 
                "tegory.AstCatDesc, Supplier.SuppName, AssetDetails.TransRemarks, AssetDetails.Ba"& _ 
                "seCost, AssetDetails.Tax, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AssetDetails.SrvDate, Asset"& _ 
                "Details.AstDesc AS Assetdetailsdesc1, AssetDetails.AstDesc2 AS Assetdetailsdesc2"& _ 
                ", AssetDetails.SerailNo, Custodian.CustodianID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Custo"& _ 
                "dian.CustodianCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Assets INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "AssetDetails LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Location ON AssetDetails."& _ 
                "LocID = Location.LocID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Companies ON As"& _ 
                "setDetails.CompanyID = Companies.CompanyId LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "     Brand ON AssetDetails.AstBrandId = Brand.AstBrandID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                   Custodian ON AssetDetails.CustodianID = Custodian.CustodianID"& _ 
                " LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplier ON AssetDetails.SuppID = Sup"& _ 
                "plier.SuppID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Insurer ON AssetDetails.I"& _ 
                "nsID = Insurer.InsCode ON Assets.ItemCode = AssetDetails.ItemCode LEFT OUTER JOI"& _ 
                "N"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Category ON Assets.AstCatID = Category.AstCatID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.AssetDetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.AssetDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.AssetDetailDataTable = New ZulAssetsBEDataSet.AssetDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CustodianTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Custodian"
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("CustodianName", "CustodianName")
            tableMapping.ColumnMappings.Add("DesignationID", "DesignationID")
            tableMapping.ColumnMappings.Add("CustodianPhone", "CustodianPhone")
            tableMapping.ColumnMappings.Add("CustodianEmail", "CustodianEmail")
            tableMapping.ColumnMappings.Add("CustodianFax", "CustodianFax")
            tableMapping.ColumnMappings.Add("CustodianCell", "CustodianCell")
            tableMapping.ColumnMappings.Add("CustodianAddress", "CustodianAddress")
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted")
            tableMapping.ColumnMappings.Add("DeptId", "DeptId")
            tableMapping.ColumnMappings.Add("Description", "Description")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Custodian.CustodianID, Custodian.CustodianName, Custodian.DesignationI"& _ 
                "D, Custodian.CustodianPhone, Custodian.CustodianEmail, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      C"& _ 
                "ustodian.CustodianFax, Custodian.CustodianCell, Custodian.CustodianAddress, Cust"& _ 
                "odian.IsDeleted, Custodian.DeptId, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Designation.Descripti"& _ 
                "on"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Custodian INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Designation ON Cust"& _ 
                "odian.DesignationID = Designation.DesignationID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Custodian.IsDeleted "& _ 
                "= 0)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.CustodianDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.CustodianDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.CustodianDataTable = New ZulAssetsBEDataSet.CustodianDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssetsLabelTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssetsLabel"
            tableMapping.ColumnMappings.Add("AstNum", "AstNum")
            tableMapping.ColumnMappings.Add("itemcode", "itemcode")
            tableMapping.ColumnMappings.Add("AstDesc", "AstDesc")
            tableMapping.ColumnMappings.Add("AstID", "AstID")
            tableMapping.ColumnMappings.Add("LocDesc", "LocDesc")
            tableMapping.ColumnMappings.Add("CustodianName", "CustodianName")
            tableMapping.ColumnMappings.Add("LocID", "LocID")
            tableMapping.ColumnMappings.Add("AstCatID", "AstCatID")
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("AstBrandName", "AstBrandName")
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName")
            tableMapping.ColumnMappings.Add("BarCode", "BarCode")
            tableMapping.ColumnMappings.Add("Refno", "Refno")
            tableMapping.ColumnMappings.Add("CompanyID", "CompanyID")
            tableMapping.ColumnMappings.Add("Purdate", "Purdate")
            tableMapping.ColumnMappings.Add("AstModel", "AstModel")
            tableMapping.ColumnMappings.Add("InsName", "InsName")
            tableMapping.ColumnMappings.Add("AstCatDesc", "AstCatDesc")
            tableMapping.ColumnMappings.Add("SuppName", "SuppName")
            tableMapping.ColumnMappings.Add("TransRemarks", "TransRemarks")
            tableMapping.ColumnMappings.Add("BaseCost", "BaseCost")
            tableMapping.ColumnMappings.Add("Tax", "Tax")
            tableMapping.ColumnMappings.Add("SrvDate", "SrvDate")
            tableMapping.ColumnMappings.Add("InsID", "InsID")
            tableMapping.ColumnMappings.Add("InvNumber", "InvNumber")
            tableMapping.ColumnMappings.Add("AstBrandID", "AstBrandID")
            tableMapping.ColumnMappings.Add("POCode", "POCode")
            tableMapping.ColumnMappings.Add("SuppID", "SuppID")
            tableMapping.ColumnMappings.Add("Disposed", "Disposed")
            tableMapping.ColumnMappings.Add("Discount", "Discount")
            tableMapping.ColumnMappings.Add("Barcode1", "Barcode1")
            tableMapping.ColumnMappings.Add("SerailNo", "SerailNo")
            tableMapping.ColumnMappings.Add("RefCode", "RefCode")
            tableMapping.ColumnMappings.Add("Plate", "Plate")
            tableMapping.ColumnMappings.Add("Poerp", "Poerp")
            tableMapping.ColumnMappings.Add("Capex", "Capex")
            tableMapping.ColumnMappings.Add("Grn", "Grn")
            tableMapping.ColumnMappings.Add("NoPiece", "NoPiece")
            tableMapping.ColumnMappings.Add("GLCode", "GLCode")
            tableMapping.ColumnMappings.Add("PONumber", "PONumber")
            tableMapping.ColumnMappings.Add("LabelCount", "LabelCount")
            tableMapping.ColumnMappings.Add("Assetdetailsdesc1", "Assetdetailsdesc1")
            tableMapping.ColumnMappings.Add("Assetdetailsdesc2", "Assetdetailsdesc2")
            tableMapping.ColumnMappings.Add("CatFullPath", "CatFullPath")
            tableMapping.ColumnMappings.Add("LocationFullPath", "LocationFullPath")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("LocationCode", "LocationCode")
            tableMapping.ColumnMappings.Add("LocationCompCode", "LocationCompCode")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = " select    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" AstNum,Cast (Assets.ItemCode as bigint) as itemcode,Assets.AstDesc,"& _ 
                "AssetDetails.AstID,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" Location.LocDesc,Custodian.CustodianName,AssetDetails.LocI"& _ 
                "D,Assets.AstCatID,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" AssetDetails.CustodianID,Brand.AstBrandName,Companies.Compa"& _ 
                "nyName,AssetDetails.BarCode,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" AssetDetails.Refno,AssetDetails.CompanyID,AssetDe"& _ 
                "tails.Purdate,AssetDetails.AstModel,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" Insurer.InsName,Category.AstCatDesc,Suppl"& _ 
                "ier.SuppName, AssetDetails.TransRemarks,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" AssetDetails.BaseCost,AssetDetails.Ta"& _ 
                "x,AssetDetails.SrvDate,AssetDetails.InsID,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" AssetDetails.InvNumber,AssetDetails"& _ 
                ".AstBrandID,AssetDetails.POCode,AssetDetails.SuppID,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" AssetDetails.Disposed,Ass"& _ 
                "etDetails.Discount,AssetDetails.Barcode,AssetDetails.SerailNo,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" RefCode,Plate,P"& _ 
                "oerp,Capex,Grn,AssetDetails.NoPiece,AssetDetails.GLCode,AssetDetails.PONumber,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                " AssetDetails.LabelCount ,Assetdetails.AstDesc as Assetdetailsdesc1,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  Assetdet"& _ 
                "ails.AstDesc2  as Assetdetailsdesc2,Category.CatFullPath,Location.LocationFullPa"& _ 
                "th,AssetStatus.Status,Location.Code as LocationCode,Location.CompCode as Locatio"& _ 
                "nCompCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    from Assets       inner join(AssetDetails            "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join"& _ 
                " AssetStatus on AssetDetails.StatusID = AssetStatus.ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    left outer join Loca"& _ 
                "tion on AssetDetails.LocID = Location.LocID         "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    left outer join Compan"& _ 
                "ies on AssetDetails.CompanyID = Companies.CompanyID                "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    left ou"& _ 
                "ter join Brand on AssetDetails.AstBrandID = Brand.AstBrandID            "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    le"& _ 
                "ft outer join Custodian on AssetDetails.CustodianID = custodian.CustodianID    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    left outer join Supplier on AssetDetails.SuppID = Supplier.SuppID"&Global.Microsoft.VisualBasic.ChrW(9)&"         "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    left outer join Insurer on AssetDetails.InsID = Insurer.InsCode )on Assets"& _ 
                ".ItemCode = AssetDetails.ItemCode  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    left outer join Category on Assets.AstC"& _ 
                "atID = Category.AstCatID   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    where AssetDetails.IsDeleted = 0 "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      order "& _ 
                "by AstID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.AssetsLabelDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.AssetsLabelDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.AssetsLabelDataTable = New ZulAssetsBEDataSet.AssetsLabelDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssetRegTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssetReg"
            tableMapping.ColumnMappings.Add("CustodianName", "CustodianName")
            tableMapping.ColumnMappings.Add("AstNum", "AstNum")
            tableMapping.ColumnMappings.Add("AstID", "AstID")
            tableMapping.ColumnMappings.Add("PurDate", "PurDate")
            tableMapping.ColumnMappings.Add("OracleRef", "OracleRef")
            tableMapping.ColumnMappings.Add("CompRef", "CompRef")
            tableMapping.ColumnMappings.Add("AstCat1", "AstCat1")
            tableMapping.ColumnMappings.Add("AstCat2", "AstCat2")
            tableMapping.ColumnMappings.Add("AstCat3", "AstCat3")
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("Cost", "Cost")
            tableMapping.ColumnMappings.Add("CCDepart", "CCDepart")
            tableMapping.ColumnMappings.Add("CCSection", "CCSection")
            tableMapping.ColumnMappings.Add("CCLocation", "CCLocation")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT AstNum, AstID, PurDate, OracleRef, CompRef, AstCat1, AstCat2, AstCat3, CC1"& _ 
                " as CCDepart, CC2 as CCSection, CC3 as CCLocation, CustodianID, CustodianName, C"& _ 
                "ost FROM "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Report_CompanyAssets"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.AssetRegDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.AssetRegDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.AssetRegDataTable = New ZulAssetsBEDataSet.AssetRegDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DepBooksTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DepBooks"
            tableMapping.ColumnMappings.Add("AstID", "AstID")
            tableMapping.ColumnMappings.Add("AstNum", "AstNum")
            tableMapping.ColumnMappings.Add("RefNo", "RefNo")
            tableMapping.ColumnMappings.Add("CompCode", "CompCode")
            tableMapping.ColumnMappings.Add("AstCatDesc", "AstCatDesc")
            tableMapping.ColumnMappings.Add("CustodianName", "CustodianName")
            tableMapping.ColumnMappings.Add("AstDesc", "AstDesc")
            tableMapping.ColumnMappings.Add("tot", "tot")
            tableMapping.ColumnMappings.Add("salvageYear", "salvageYear")
            tableMapping.ColumnMappings.Add("acc", "acc")
            tableMapping.ColumnMappings.Add("CurrentBV", "CurrentBV")
            tableMapping.ColumnMappings.Add("AstDesc2", "AstDesc2")
            tableMapping.ColumnMappings.Add("LocationFullPath", "LocationFullPath")
            tableMapping.ColumnMappings.Add("CatFullPath", "CatFullPath")
            tableMapping.ColumnMappings.Add("SalvageMonth", "SalvageMonth")
            tableMapping.ColumnMappings.Add("EndOfServiceDate", "EndOfServiceDate")
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("CustodianCode", "CustodianCode")
            tableMapping.ColumnMappings.Add("ItemDesc", "ItemDesc")
            tableMapping.ColumnMappings.Add("ItemCode", "ItemCode")
            tableMapping.ColumnMappings.Add("PurDate", "PurDate")
            tableMapping.ColumnMappings.Add("DepPercentage", "DepPercentage")
            tableMapping.ColumnMappings.Add("AstBrandName", "AstBrandName")
            tableMapping.ColumnMappings.Add("CompanyCode", "CompanyCode")
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName")
            tableMapping.ColumnMappings.Add("SrvDate", "SrvDate")
            tableMapping.ColumnMappings.Add("Loc1", "Loc1")
            tableMapping.ColumnMappings.Add("Loc2", "Loc2")
            tableMapping.ColumnMappings.Add("Loc3", "Loc3")
            tableMapping.ColumnMappings.Add("Loc4", "Loc4")
            tableMapping.ColumnMappings.Add("Loc5", "Loc5")
            tableMapping.ColumnMappings.Add("Cat1", "Cat1")
            tableMapping.ColumnMappings.Add("Cat2", "Cat2")
            tableMapping.ColumnMappings.Add("Cat3", "Cat3")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT AssetDetails.AstID,AstNum,RefNo,Location.CompCode,Location.LocationFullPat"& _ 
                "h,Category.CatFullPath,Category.AstCatDesc,Custodian.CustodianName,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AssetDetail"& _ 
                "s.AstDesc,AssetDetails.AstDesc2,BaseCost+Tax  as tot,DATEADD(year,salvageyear,DA"& _ 
                "TEADD(month,SalvageMonth,SrvDate)) as EndOfServiceDate,salvageYear,SalvageMonth,"& _ 
                "SrvDate ,AssetDetails.PurDate,100/IsNULL(nullif(((salvageyear * 12 + SalvageMont"& _ 
                "h)/12),0),1) as DepPercentage"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&", (BaseCost+Tax) - CurrentBV as acc, CurrentBV, C"& _ 
                "ustodian.CustodianID, Custodian.CustodianCode, Assets.AstDesc AS ItemDesc, Asset"& _ 
                "s.ItemCode  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",brand.AstBrandName,CompanyCode,CompanyName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",'' as Loc1,'' as Loc"& _ 
                "2,'' as Loc3,'' as Loc4,'' as Loc5,'' as Cat1,'' as Cat2,'' as Cat3"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM AssetD"& _ 
                "etails"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join (Assets left outer join Category on Category.AstCatID = Asset"& _ 
                "s.AstCatID)on "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Assets.ItemCode = AssetDetails.ItemCode "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join Custodian o"& _ 
                "n Custodian.CustodianID = AssetDetails.CustodianID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join AstBooks on Asset"& _ 
                "Details.AstID= Astbooks.AstID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join Location on Location.LocId = AssetDeta"& _ 
                "ils.LocId "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join brand on brand.AstBrandID = AssetDetails.AstBrandID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inne"& _ 
                "r join Companies on Companies.CompanyId = AssetDetails.CompanyId"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where AssetDet"& _ 
                "ails.IsDeleted = 0 "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.DepBooksDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.DepBooksDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.DepBooksDataTable = New ZulAssetsBEDataSet.DepBooksDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssetTagTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssetTag"
            tableMapping.ColumnMappings.Add("AstID", "AstID")
            tableMapping.ColumnMappings.Add("AstNum", "AstNum")
            tableMapping.ColumnMappings.Add("RefNo", "RefNo")
            tableMapping.ColumnMappings.Add("CompCode", "CompCode")
            tableMapping.ColumnMappings.Add("CustodianName", "CustodianName")
            tableMapping.ColumnMappings.Add("AstCatDesc", "AstCatDesc")
            tableMapping.ColumnMappings.Add("PurDate", "PurDate")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("BaseCost", "BaseCost")
            tableMapping.ColumnMappings.Add("Tax", "Tax")
            tableMapping.ColumnMappings.Add("Discount", "Discount")
            tableMapping.ColumnMappings.Add("tot", "tot")
            tableMapping.ColumnMappings.Add("InvNumber", "InvNumber")
            tableMapping.ColumnMappings.Add("SuppName", "SuppName")
            tableMapping.ColumnMappings.Add("InsName", "InsName")
            tableMapping.ColumnMappings.Add("LocID", "LocID")
            tableMapping.ColumnMappings.Add("AstBrandName", "AstBrandName")
            tableMapping.ColumnMappings.Add("SrvDate", "SrvDate")
            tableMapping.ColumnMappings.Add("AstModel", "AstModel")
            tableMapping.ColumnMappings.Add("DispDate", "DispDate")
            tableMapping.ColumnMappings.Add("Disposed", "Disposed")
            tableMapping.ColumnMappings.Add("BarCode", "BarCode")
            tableMapping.ColumnMappings.Add("SerailNo", "SerailNo")
            tableMapping.ColumnMappings.Add("RefCode", "RefCode")
            tableMapping.ColumnMappings.Add("Plate", "Plate")
            tableMapping.ColumnMappings.Add("Poerp", "Poerp")
            tableMapping.ColumnMappings.Add("Capex", "Capex")
            tableMapping.ColumnMappings.Add("Grn", "Grn")
            tableMapping.ColumnMappings.Add("GLCode", "GLCode")
            tableMapping.ColumnMappings.Add("AstCatID", "AstCatID")
            tableMapping.ColumnMappings.Add("CatFullPath", "CatFullPath")
            tableMapping.ColumnMappings.Add("LocationFullPath", "LocationFullPath")
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("CustodianCode", "CustodianCode")
            tableMapping.ColumnMappings.Add("AstDesc1", "AstDesc1")
            tableMapping.ColumnMappings.Add("AstDesc2", "AstDesc2")
            tableMapping.ColumnMappings.Add("ItemDesc", "ItemDesc")
            tableMapping.ColumnMappings.Add("ItemCode", "ItemCode")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     AssetDetails.AstID, AssetDetails.AstNum, AssetDetails.RefNo, Location."& _ 
                "CompCode, Custodian.CustodianName, Category.AstCatDesc, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "AssetDetails.PurDate, AssetDetails.AstDesc AS Description, AssetDetails.BaseCost"& _ 
                ", AssetDetails.Tax, AssetDetails.Discount, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AssetDetails."& _ 
                "BaseCost + AssetDetails.Tax - AssetDetails.Discount AS tot, AssetDetails.InvNumb"& _ 
                "er, Supplier.SuppName, Insurer.InsName, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Location.LocID, "& _ 
                "Brand.AstBrandName, AssetDetails.SrvDate, AssetDetails.AstModel, AssetDetails.Di"& _ 
                "spDate, AssetDetails.Disposed, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AssetDetails.BarCode, Ass"& _ 
                "etDetails.SerailNo, AssetDetails.RefCode, AssetDetails.Plate, AssetDetails.Poerp"& _ 
                ", AssetDetails.Capex, AssetDetails.Grn, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AssetDetails.GLC"& _ 
                "ode, Category.AstCatID, Category.CatFullPath, Location.LocationFullPath, AssetDe"& _ 
                "tails.AstDesc AS AstDesc1, AssetDetails.AstDesc2, Assets.AstDesc AS ItemDesc, As"& _ 
                "sets.ItemCode, Custodian.CustodianID, Custodian.CustodianCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Asse"& _ 
                "tDetails INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Assets LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "         Category ON Category.AstCatID = Assets.AstCatID ON Assets.ItemCode = As"& _ 
                "setDetails.ItemCode INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Custodian ON Custodian.Cus"& _ 
                "todianID = AssetDetails.CustodianID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Brand ON A"& _ 
                "ssetDetails.AstBrandId = Brand.AstBrandID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                " Location ON Location.LocID = AssetDetails.LocID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        Supplier ON Supplier.SuppID = AssetDetails.SuppID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                 Insurer ON Insurer.InsCode = AssetDetails.InsID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Ass"& _ 
                "etDetails.IsDeleted = 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY AssetDetails.AstNum"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.AssetTagDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.AssetTagDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.AssetTagDataTable = New ZulAssetsBEDataSet.AssetTagDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssetLedgerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssetLedger"
            tableMapping.ColumnMappings.Add("AstID", "AstID")
            tableMapping.ColumnMappings.Add("AstNum", "AstNum")
            tableMapping.ColumnMappings.Add("RefNo", "RefNo")
            tableMapping.ColumnMappings.Add("CompCode", "CompCode")
            tableMapping.ColumnMappings.Add("CustodianName", "CustodianName")
            tableMapping.ColumnMappings.Add("AstCatDesc", "AstCatDesc")
            tableMapping.ColumnMappings.Add("PurDate", "PurDate")
            tableMapping.ColumnMappings.Add("BaseCost", "BaseCost")
            tableMapping.ColumnMappings.Add("Tax", "Tax")
            tableMapping.ColumnMappings.Add("Discount", "Discount")
            tableMapping.ColumnMappings.Add("tot", "tot")
            tableMapping.ColumnMappings.Add("InvNumber", "InvNumber")
            tableMapping.ColumnMappings.Add("SuppName", "SuppName")
            tableMapping.ColumnMappings.Add("InsName", "InsName")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("CustodianCode", "CustodianCode")
            tableMapping.ColumnMappings.Add("AstDesc1", "AstDesc1")
            tableMapping.ColumnMappings.Add("AstDesc2", "AstDesc2")
            tableMapping.ColumnMappings.Add("ItemDesc", "ItemDesc")
            tableMapping.ColumnMappings.Add("ItemCode", "ItemCode")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "  SELECT AstID,AstNum,RefNo,Location.CompCode,CustodianName,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          Category."& _ 
                "AstCatDesc,PurDate,AssetDetails.AstDesc as Description ,BaseCost,Tax,Discount,Ba"& _ 
                "seCost+Tax-Discount as tot ,AssetDetails.InvNumber,Supplier.SuppName,Insurer.Ins"& _ 
                "Name, AssetDetails.AstDesc AS AstDesc1, AssetDetails.AstDesc2, Assets.AstDesc AS"& _ 
                " ItemDesc, Assets.ItemCode, Custodian.CustodianID, Custodian.CustodianCode FROM "& _ 
                "AssetDetails"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      inner join (Assets left outer join Category on Category.AstC"& _ 
                "atID = Assets.AstCatID)on Assets.ItemCode = AssetDetails.ItemCode "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        inne"& _ 
                "r join Custodian on Custodian.CustodianID = AssetDetails.CustodianID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "left outer join Location on Location.LocId = AssetDetails.LocId "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "&Global.Microsoft.VisualBasic.ChrW(9)&"  left oute"& _ 
                "r join Supplier on Supplier.SuppID = AssetDetails.SuppID "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "&Global.Microsoft.VisualBasic.ChrW(9)&"  left outer join I"& _ 
                "nsurer on Insurer.InsCode = AssetDetails.InsID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.AssetLedgerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.AssetLedgerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.AssetLedgerDataTable = New ZulAssetsBEDataSet.AssetLedgerDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DisposedAssetsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DisposedAssets"
            tableMapping.ColumnMappings.Add("AstNum", "AstNum")
            tableMapping.ColumnMappings.Add("DispDate", "DispDate")
            tableMapping.ColumnMappings.Add("DispDesc", "DispDesc")
            tableMapping.ColumnMappings.Add("TransRemarks", "TransRemarks")
            tableMapping.ColumnMappings.Add("Sel_Price", "Sel_Price")
            tableMapping.ColumnMappings.Add("Sel_Date", "Sel_Date")
            tableMapping.ColumnMappings.Add("AstID", "AstID")
            tableMapping.ColumnMappings.Add("IsSold", "IsSold")
            tableMapping.ColumnMappings.Add("SoldTo", "SoldTo")
            tableMapping.ColumnMappings.Add("RefNo", "RefNo")
            tableMapping.ColumnMappings.Add("CompCode", "CompCode")
            tableMapping.ColumnMappings.Add("CustodianName", "CustodianName")
            tableMapping.ColumnMappings.Add("AstCatDesc", "AstCatDesc")
            tableMapping.ColumnMappings.Add("PurDate", "PurDate")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("BaseCost", "BaseCost")
            tableMapping.ColumnMappings.Add("Tax", "Tax")
            tableMapping.ColumnMappings.Add("Discount", "Discount")
            tableMapping.ColumnMappings.Add("tot", "tot")
            tableMapping.ColumnMappings.Add("InvNumber", "InvNumber")
            tableMapping.ColumnMappings.Add("SuppName", "SuppName")
            tableMapping.ColumnMappings.Add("InsName", "InsName")
            tableMapping.ColumnMappings.Add("LocID", "LocID")
            tableMapping.ColumnMappings.Add("AstBrandName", "AstBrandName")
            tableMapping.ColumnMappings.Add("SrvDate", "SrvDate")
            tableMapping.ColumnMappings.Add("AstModel", "AstModel")
            tableMapping.ColumnMappings.Add("Disposed", "Disposed")
            tableMapping.ColumnMappings.Add("BarCode", "BarCode")
            tableMapping.ColumnMappings.Add("SerailNo", "SerailNo")
            tableMapping.ColumnMappings.Add("RefCode", "RefCode")
            tableMapping.ColumnMappings.Add("Plate", "Plate")
            tableMapping.ColumnMappings.Add("Poerp", "Poerp")
            tableMapping.ColumnMappings.Add("Capex", "Capex")
            tableMapping.ColumnMappings.Add("Grn", "Grn")
            tableMapping.ColumnMappings.Add("GLCode", "GLCode")
            tableMapping.ColumnMappings.Add("AstCatID", "AstCatID")
            tableMapping.ColumnMappings.Add("CatFullPath", "CatFullPath")
            tableMapping.ColumnMappings.Add("LocationFullPath", "LocationFullPath")
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("CustodianCode", "CustodianCode")
            tableMapping.ColumnMappings.Add("AstDesc1", "AstDesc1")
            tableMapping.ColumnMappings.Add("AstDesc2", "AstDesc2")
            tableMapping.ColumnMappings.Add("ItemDesc", "ItemDesc")
            tableMapping.ColumnMappings.Add("ItemCode", "ItemCode")
            tableMapping.ColumnMappings.Add("DisposalComments", "DisposalComments")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     AssetDetails.AstID, AssetDetails.AstNum, AssetDetails.RefNo, Location."& _ 
                "CompCode, Custodian.CustodianName, Category.AstCatDesc, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "AssetDetails.PurDate, AssetDetails.AstDesc AS Description, AssetDetails.BaseCost"& _ 
                ", AssetDetails.Tax, AssetDetails.Discount, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AssetDetails."& _ 
                "BaseCost + AssetDetails.Tax - AssetDetails.Discount AS tot, AssetDetails.InvNumb"& _ 
                "er, Supplier.SuppName, Insurer.InsName, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Location.LocID, "& _ 
                "Brand.AstBrandName, AssetDetails.SrvDate, AssetDetails.AstModel, AssetDetails.Di"& _ 
                "spDate, AssetDetails.Disposed, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AssetDetails.BarCode, Ass"& _ 
                "etDetails.SerailNo, AssetDetails.RefCode, AssetDetails.Plate, AssetDetails.Poerp"& _ 
                ", AssetDetails.Capex, AssetDetails.Grn, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AssetDetails.GLC"& _ 
                "ode, Category.AstCatID, Category.CatFullPath, Location.LocationFullPath, Disposa"& _ 
                "l_Method.DispDesc, AssetDetails.TransRemarks, AssetDetails.IsSold, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "           AssetDetails.SoldTo, AssetDetails.Sel_Price, AssetDetails.Sel_Date, A"& _ 
                "ssetDetails.AstDesc AS AstDesc1, AssetDetails.AstDesc2, Assets.AstDesc AS ItemDe"& _ 
                "sc, Assets.ItemCode, Custodian.CustodianID, Custodian.CustodianCode,AssetDetails"& _ 
                ".DisposalComments"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         AssetDetails INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      A"& _ 
                "ssets LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Category ON Category.AstCatID = Ass"& _ 
                "ets.AstCatID ON Assets.ItemCode = AssetDetails.ItemCode INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "          Custodian ON Custodian.CustodianID = AssetDetails.CustodianID INNER JO"& _ 
                "IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Brand ON AssetDetails.AstBrandId = Brand.AstBrandID LE"& _ 
                "FT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Location ON Location.LocID = AssetDetails.L"& _ 
                "ocID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Supplier ON Supplier.SuppID = AssetD"& _ 
                "etails.SuppID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Insurer ON Insurer.InsCode "& _ 
                "= AssetDetails.InsID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Disposal_Method O"& _ 
                "N Disposal_Method.DispCode = AssetDetails.DispCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (AssetDetails.IsDe"& _ 
                "leted = 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY AssetDetails.AstNum"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.DisposedAssetsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.DisposedAssetsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.DisposedAssetsDataTable = New ZulAssetsBEDataSet.DisposedAssetsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AuditSatusTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AuditSatus"
            tableMapping.ColumnMappings.Add("InvSchCode", "InvSchCode")
            tableMapping.ColumnMappings.Add("AstID", "AstID")
            tableMapping.ColumnMappings.Add("AstNum", "AstNum")
            tableMapping.ColumnMappings.Add("NewLoc", "NewLoc")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("StatusDesc", "StatusDesc")
            tableMapping.ColumnMappings.Add("HisDate", "HisDate")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("AstModel", "AstModel")
            tableMapping.ColumnMappings.Add("SerailNo", "SerailNo")
            tableMapping.ColumnMappings.Add("AstCatID", "AstCatID")
            tableMapping.ColumnMappings.Add("CatFullPath", "CatFullPath")
            tableMapping.ColumnMappings.Add("PrevLoc", "PrevLoc")
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("CustodianName", "CustodianName")
            tableMapping.ColumnMappings.Add("AstDesc1", "AstDesc1")
            tableMapping.ColumnMappings.Add("AstDesc2", "AstDesc2")
            tableMapping.ColumnMappings.Add("ItemDesc", "ItemDesc")
            tableMapping.ColumnMappings.Add("ItemCode", "ItemCode")
            tableMapping.ColumnMappings.Add("CustodianCode", "CustodianCode")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Ast_History.InvSchCode, Ast_History.AstID, AssetDetails.AstNum, AssetD"& _ 
                "etails.AstDesc AS Description, Ast_History.Status, AuditStatus.StatusDesc, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   Ast_History.HisDate, AssetDetails.AstModel, AssetDetails.Sera"& _ 
                "ilNo, Category.AstCatID, Category.CatFullPath, toLoc.LocationFullPath AS NewLoc,"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      frLoc.LocationFullPath AS PrevLoc,Custodian.CustodianID"& _ 
                ",Custodian.CustodianName, AssetDetails.AstDesc AS AstDesc1, AssetDetails.AstDesc"& _ 
                "2, Assets.AstDesc AS ItemDesc, Assets.ItemCode,Custodian.CustodianCode,AssetDeta"& _ 
                "ils.InventoryNumber as Remarks"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Assets INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "      AssetDetails ON Assets.ItemCode = AssetDetails.ItemCode INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                Category ON Assets.AstCatID = Category.AstCatID RIGHT OUTER JOIN"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Ast_History LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Locat"& _ 
                "ion AS frLoc ON Ast_History.Fr_loc = frLoc.LocID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        Location AS toLoc ON Ast_History.To_Loc = toLoc.LocID ON AssetDetails.As"& _ 
                "tID = Ast_History.AstID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AuditStatus ON Au"& _ 
                "ditStatus.StatusID = Ast_History.Status"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" left outer join Custodian on Custodi"& _ 
                "an.CustodianID = AssetDetails.CustodianID "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.AuditSatusDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.AuditSatusDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.AuditSatusDataTable = New ZulAssetsBEDataSet.AuditSatusDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ItemsInventoryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ItemsInventory"
            tableMapping.ColumnMappings.Add("Itemcode", "Itemcode")
            tableMapping.ColumnMappings.Add("AstDesc", "AstDesc")
            tableMapping.ColumnMappings.Add("total", "total")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select Assets.Itemcode,Assets.AstDesc,count(*) as total from AssetDetails inner j"& _ 
                "oin Assets on Assets.ItemCode = AssetDetails.ItemCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Group by Assets.Itemcode,"& _ 
                "Assets.AstDesc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.ItemsInventoryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.ItemsInventoryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.ItemsInventoryDataTable = New ZulAssetsBEDataSet.ItemsInventoryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CompanyAssetsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CompanyAssets"
            tableMapping.ColumnMappings.Add("AstID", "AstID")
            tableMapping.ColumnMappings.Add("PurDate", "PurDate")
            tableMapping.ColumnMappings.Add("CustodianName", "CustodianName")
            tableMapping.ColumnMappings.Add("AstNum", "AstNum")
            tableMapping.ColumnMappings.Add("RefNo", "RefNo")
            tableMapping.ColumnMappings.Add("AstCatDesc", "AstCatDesc")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("BaseCost", "BaseCost")
            tableMapping.ColumnMappings.Add("Tax", "Tax")
            tableMapping.ColumnMappings.Add("Discount", "Discount")
            tableMapping.ColumnMappings.Add("tot", "tot")
            tableMapping.ColumnMappings.Add("InvNumber", "InvNumber")
            tableMapping.ColumnMappings.Add("SuppName", "SuppName")
            tableMapping.ColumnMappings.Add("InsName", "InsName")
            tableMapping.ColumnMappings.Add("CompCode", "CompCode")
            tableMapping.ColumnMappings.Add("LocID", "LocID")
            tableMapping.ColumnMappings.Add("AstBrandName", "AstBrandName")
            tableMapping.ColumnMappings.Add("SrvDate", "SrvDate")
            tableMapping.ColumnMappings.Add("AstModel", "AstModel")
            tableMapping.ColumnMappings.Add("DispDate", "DispDate")
            tableMapping.ColumnMappings.Add("Disposed", "Disposed")
            tableMapping.ColumnMappings.Add("BarCode", "BarCode")
            tableMapping.ColumnMappings.Add("SerailNo", "SerailNo")
            tableMapping.ColumnMappings.Add("RefCode", "RefCode")
            tableMapping.ColumnMappings.Add("Plate", "Plate")
            tableMapping.ColumnMappings.Add("Poerp", "Poerp")
            tableMapping.ColumnMappings.Add("Capex", "Capex")
            tableMapping.ColumnMappings.Add("Grn", "Grn")
            tableMapping.ColumnMappings.Add("GLCode", "GLCode")
            tableMapping.ColumnMappings.Add("AstCatID", "AstCatID")
            tableMapping.ColumnMappings.Add("CatFullPath", "CatFullPath")
            tableMapping.ColumnMappings.Add("LocationFullPath", "LocationFullPath")
            tableMapping.ColumnMappings.Add("AstDesc1", "AstDesc1")
            tableMapping.ColumnMappings.Add("AstDesc2", "AstDesc2")
            tableMapping.ColumnMappings.Add("ItemDesc", "ItemDesc")
            tableMapping.ColumnMappings.Add("ItemCode", "ItemCode")
            tableMapping.ColumnMappings.Add("CompanyCode", "CompanyCode")
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName")
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("CustodianCode", "CustodianCode")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        AssetDetails.AstID, AssetDetails.AstNum, AssetDetails.RefNo, Locati"& _ 
                "on.CompCode, Custodian.CustodianName, Category.AstCatDesc, AssetDetails.PurDate,"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AssetDetails.AstDesc AS Description, AssetDetails.Ba"& _ 
                "seCost, AssetDetails.Tax, AssetDetails.Discount, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Asse"& _ 
                "tDetails.BaseCost + AssetDetails.Tax - AssetDetails.Discount AS tot, AssetDetail"& _ 
                "s.InvNumber, Supplier.SuppName, Insurer.InsName, Location.LocID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            Brand.AstBrandName, AssetDetails.SrvDate, AssetDetails.AstModel, Ass"& _ 
                "etDetails.DispDate, AssetDetails.Disposed, AssetDetails.BarCode, AssetDetails.Se"& _ 
                "railNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AssetDetails.RefCode, AssetDetails.Plate, Ass"& _ 
                "etDetails.Poerp, AssetDetails.Capex, AssetDetails.Grn, AssetDetails.GLCode, Cate"& _ 
                "gory.AstCatID, Category.CatFullPath, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Location.Locatio"& _ 
                "nFullPath, AssetDetails.AstDesc AS AstDesc1, AssetDetails.AstDesc2, Assets.AstDe"& _ 
                "sc AS ItemDesc, Assets.ItemCode, Companies.CompanyCode, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "   Companies.CompanyName, Custodian.CustodianID, Custodian.CustodianCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM  "& _ 
                "          AssetDetails INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Assets LEFT OUTER JO"& _ 
                "IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Category ON Category.AstCatID = Assets.AstCatID ON "& _ 
                "Assets.ItemCode = AssetDetails.ItemCode INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Cus"& _ 
                "todian ON Custodian.CustodianID = AssetDetails.CustodianID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                Companies ON Companies.CompanyId = AssetDetails.CompanyID INNER "& _ 
                "JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Brand ON AssetDetails.AstBrandId = Brand.AstBrand"& _ 
                "ID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Location ON Location.LocID = AssetD"& _ 
                "etails.LocID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplier ON Supplier.Supp"& _ 
                "ID = AssetDetails.SuppID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Insurer ON In"& _ 
                "surer.InsCode = AssetDetails.InsID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (AssetDetails.IsDeleted = 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"O"& _ 
                "RDER BY AssetDetails.AstNum"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.CompanyAssetsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.CompanyAssetsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.CompanyAssetsDataTable = New ZulAssetsBEDataSet.CompanyAssetsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssetByCatTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssetByCat"
            tableMapping.ColumnMappings.Add("MainCat", "MainCat")
            tableMapping.ColumnMappings.Add("Invest_OB", "Invest_OB")
            tableMapping.ColumnMappings.Add("Invest_Add", "Invest_Add")
            tableMapping.ColumnMappings.Add("Invest_Ded", "Invest_Ded")
            tableMapping.ColumnMappings.Add("Invest_CB", "Invest_CB")
            tableMapping.ColumnMappings.Add("Depr_OB", "Depr_OB")
            tableMapping.ColumnMappings.Add("Depr_Add", "Depr_Add")
            tableMapping.ColumnMappings.Add("Depr_Ded", "Depr_Ded")
            tableMapping.ColumnMappings.Add("Depr_CB", "Depr_CB")
            tableMapping.ColumnMappings.Add("NetValue", "NetValue")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Report_AssestsByCategroy] ([MainCat], [Invest_OB], [Invest_Add], [In"& _ 
                "vest_Ded], [Invest_CB], [Depr_OB], [Depr_Add], [Depr_Ded], [Depr_CB], [NetValue]"& _ 
                ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MainCat", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MainCat", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Invest_OB", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Invest_OB", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Invest_Add", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Invest_Add", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Invest_Ded", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Invest_Ded", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Invest_CB", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Invest_CB", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Depr_OB", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Depr_OB", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Depr_Add", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Depr_Add", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Depr_Ded", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Depr_Ded", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Depr_CB", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Depr_CB", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NetValue", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NetValue", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select * from Report_AssestsByCategroy"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.AssetByCatDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.AssetByCatDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.AssetByCatDataTable = New ZulAssetsBEDataSet.AssetByCatDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ZulAssetsBEDataSet.AssetByCatDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ZulAssetsBEDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AssetByCat")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MainCat As String, ByVal Invest_OB As Global.System.Nullable(Of Double), ByVal Invest_Add As Global.System.Nullable(Of Double), ByVal Invest_Ded As Global.System.Nullable(Of Double), ByVal Invest_CB As Global.System.Nullable(Of Double), ByVal Depr_OB As Global.System.Nullable(Of Double), ByVal Depr_Add As Global.System.Nullable(Of Double), ByVal Depr_Ded As Global.System.Nullable(Of Double), ByVal Depr_CB As Global.System.Nullable(Of Double), ByVal NetValue As Global.System.Nullable(Of Double)) As Integer
            If (MainCat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MainCat,String)
            End If
            If (Invest_OB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Invest_OB.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Invest_Add.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Invest_Add.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Invest_Ded.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Invest_Ded.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Invest_CB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Invest_CB.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Depr_OB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Depr_OB.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Depr_Add.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Depr_Add.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Depr_Ded.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Depr_Ded.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Depr_CB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Depr_CB.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (NetValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(NetValue.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SupplierTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Supplier"
            tableMapping.ColumnMappings.Add("SuppID", "SuppID")
            tableMapping.ColumnMappings.Add("SuppName", "SuppName")
            tableMapping.ColumnMappings.Add("SuppCell", "SuppCell")
            tableMapping.ColumnMappings.Add("SuppFax", "SuppFax")
            tableMapping.ColumnMappings.Add("SuppPhone", "SuppPhone")
            tableMapping.ColumnMappings.Add("SuppEmail", "SuppEmail")
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Supplier.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Supplier"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (IsDeleted = 0)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.SupplierDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.SupplierDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.SupplierDataTable = New ZulAssetsBEDataSet.SupplierDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Depreciation_MethodTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Depreciation_Method"
            tableMapping.ColumnMappings.Add("DepCode", "DepCode")
            tableMapping.ColumnMappings.Add("DepDesc", "DepDesc")
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Depreciation_Method.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Depreciation_Method"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.Depreciation_MethodDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.Depreciation_MethodDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.Depreciation_MethodDataTable = New ZulAssetsBEDataSet.Depreciation_MethodDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Disposal_MethodTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Disposal_Method"
            tableMapping.ColumnMappings.Add("DispCode", "DispCode")
            tableMapping.ColumnMappings.Add("DispDesc", "DispDesc")
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     DispCode, DispDesc, IsDeleted"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Disposal_Method"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where IsD"& _ 
                "eleted = 0"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.Disposal_MethodDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.Disposal_MethodDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.Disposal_MethodDataTable = New ZulAssetsBEDataSet.Disposal_MethodDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Ast_INV_ScheduleTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Ast_INV_Schedule"
            tableMapping.ColumnMappings.Add("InvSchCode", "InvSchCode")
            tableMapping.ColumnMappings.Add("InvDesc", "InvDesc")
            tableMapping.ColumnMappings.Add("InvStartDate", "InvStartDate")
            tableMapping.ColumnMappings.Add("InvEndDate", "InvEndDate")
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted")
            tableMapping.ColumnMappings.Add("Closed", "Closed")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Ast_INV_Schedule.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Ast_INV_Schedule"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where IsDeleted = 0"& _ 
                " "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.Ast_INV_ScheduleDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.Ast_INV_ScheduleDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.Ast_INV_ScheduleDataTable = New ZulAssetsBEDataSet.Ast_INV_ScheduleDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class InsurerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Insurer"
            tableMapping.ColumnMappings.Add("InsCode", "InsCode")
            tableMapping.ColumnMappings.Add("InsName", "InsName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     InsCode, InsName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Insurer"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where IsDeleted =0 "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.InsurerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.InsurerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.InsurerDataTable = New ZulAssetsBEDataSet.InsurerDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Report_AssetbySubCategoryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Report_AssetbySubCategory"
            tableMapping.ColumnMappings.Add("MainCat", "MainCat")
            tableMapping.ColumnMappings.Add("SubCat", "SubCat")
            tableMapping.ColumnMappings.Add("Cat", "Cat")
            tableMapping.ColumnMappings.Add("Invest_OB", "Invest_OB")
            tableMapping.ColumnMappings.Add("Invest_Add", "Invest_Add")
            tableMapping.ColumnMappings.Add("Invest_Ded", "Invest_Ded")
            tableMapping.ColumnMappings.Add("Invest_CB", "Invest_CB")
            tableMapping.ColumnMappings.Add("Depr_OB", "Depr_OB")
            tableMapping.ColumnMappings.Add("Depr_Add", "Depr_Add")
            tableMapping.ColumnMappings.Add("Depr_Ded", "Depr_Ded")
            tableMapping.ColumnMappings.Add("Depr_CB", "Depr_CB")
            tableMapping.ColumnMappings.Add("NetValue", "NetValue")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select * from report_assetbysubcategory"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.Report_AssetbySubCategoryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.Report_AssetbySubCategoryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.Report_AssetbySubCategoryDataTable = New ZulAssetsBEDataSet.Report_AssetbySubCategoryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BrandTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Brand"
            tableMapping.ColumnMappings.Add("AstBrandID", "AstBrandID")
            tableMapping.ColumnMappings.Add("AstBrandName", "AstBrandName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     AstBrandID, AstBrandName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Brand where IsDeleted= 0"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.BrandDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.BrandDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.BrandDataTable = New ZulAssetsBEDataSet.BrandDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssetsItemsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssetsItems"
            tableMapping.ColumnMappings.Add("itemcode", "itemcode")
            tableMapping.ColumnMappings.Add("AstBrandID", "AstBrandID")
            tableMapping.ColumnMappings.Add("AstCatID", "AstCatID")
            tableMapping.ColumnMappings.Add("POItmId", "POItmId")
            tableMapping.ColumnMappings.Add("AstDesc", "AstDesc")
            tableMapping.ColumnMappings.Add("AstModel", "AstModel")
            tableMapping.ColumnMappings.Add("AstQTY", "AstQTY")
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted")
            tableMapping.ColumnMappings.Add("AstBrandName", "AstBrandName")
            tableMapping.ColumnMappings.Add("AstCatDesc", "AstCatDesc")
            tableMapping.ColumnMappings.Add("CatFullPath", "CatFullPath")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = " Select CAst(itemcode as int) as itemcode ,Assets.POItmId,Assets.AstDesc,Assets.A"& _ 
                "stModel,Assets.AstQTY,Brand.AstBrandID,Brand.AstBrandName,Brand.IsDeleted, Categ"& _ 
                "ory.AstCatID,Category.AstCatDesc,Category.CatFullPath"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from Assets  left outer j"& _ 
                "oin Brand on Assets.AstBrandID = Brand.AstBrandID  left outer join Category on A"& _ 
                "ssets.AstCatID = Category.AstCatID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.AssetsItemsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.AssetsItemsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.AssetsItemsDataTable = New ZulAssetsBEDataSet.AssetsItemsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssetBooksTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssetBooks"
            tableMapping.ColumnMappings.Add("Selection", "Selection")
            tableMapping.ColumnMappings.Add("BookID", "BookID")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("DepDesc", "DepDesc")
            tableMapping.ColumnMappings.Add("DepCode", "DepCode")
            tableMapping.ColumnMappings.Add("CompanyID", "CompanyID")
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = " Select '' as Selection,Books.BookID,Books.Description,Depreciation_Method.DepDes"& _ 
                "c,Depreciation_Method.DepCode,Books.CompanyID,Companies.CompanyName from Books i"& _ 
                "nner join Companies on Books.CompanyID =companies.CompanyId"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join Deprecia"& _ 
                "tion_Method on Books.DepCode=Depreciation_Method.DepCode "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where  Books.IsDelete"& _ 
                "d = 0"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.AssetBooksDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.AssetBooksDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.AssetBooksDataTable = New ZulAssetsBEDataSet.AssetBooksDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AddressTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Address"
            tableMapping.ColumnMappings.Add("AddressID", "AddressID")
            tableMapping.ColumnMappings.Add("AddressDesc", "AddressDesc")
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     AddressID, AddressDesc, IsDeleted"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Address"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Is"& _ 
                "Deleted = 0)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.AddressDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.AddressDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.AddressDataTable = New ZulAssetsBEDataSet.AddressDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class rptStockIssuanceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rptStockIssuance"
            tableMapping.ColumnMappings.Add("Barcode", "Barcode")
            tableMapping.ColumnMappings.Add("AstID", "AstID")
            tableMapping.ColumnMappings.Add("AstNum", "AstNum")
            tableMapping.ColumnMappings.Add("AstDesc", "AstDesc")
            tableMapping.ColumnMappings.Add("AstModel", "AstModel")
            tableMapping.ColumnMappings.Add("SerailNo", "SerailNo")
            tableMapping.ColumnMappings.Add("AstLocation", "AstLocation")
            tableMapping.ColumnMappings.Add("AstCategory", "AstCategory")
            tableMapping.ColumnMappings.Add("AstCustodian", "AstCustodian")
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("LocID", "LocID")
            tableMapping.ColumnMappings.Add("CustodianCode", "CustodianCode")
            tableMapping.ColumnMappings.Add("ToCustodian", "ToCustodian")
            tableMapping.ColumnMappings.Add("ToCustodianID", "ToCustodianID")
            tableMapping.ColumnMappings.Add("ToLocID", "ToLocID")
            tableMapping.ColumnMappings.Add("ToLocation", "ToLocation")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select AssetDetails.Barcode,AssetDetails.AstID,AssetDetails.AstNum,Assets.AstDesc"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",AssetDetails.AstModel,SerailNo,Location.LocationFullPath as AstLocation,CatFu"& _ 
                "llPath as AstCategory,Custodian.CustodianName as AstCustodian,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Custodian.Custod"& _ 
                "ianID,Location.LocID,  Custodian.CustodianCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",Custodian.CustodianName AS ToCu"& _ 
                "stodian, Custodian.CustodianID AS ToCustodianID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",Location.LocID as ToLocID,Loca"& _ 
                "tion.LocationFullPath as ToLocation"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" from "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Assets inner join(AssetDetails  lef"& _ 
                "t outer join Location on AssetDetails.LocID = Location.LocID  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join "& _ 
                "Brand on AssetDetails.AstBrandID = Brand.AstBrandID "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" left outer join Custodian"& _ 
                " on AssetDetails.CustodianID = custodian.CustodianID ) on Assets.ItemCode = Asse"& _ 
                "tDetails.ItemCode "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" inner join Category on Assets.AstCatID = Category.AstCatID "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" where AssetDetails.Disposed=1 and  AssetDetails.IsDeleted = 0  order by Barco"& _ 
                "de"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.rptStockIssuanceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.rptStockIssuanceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.rptStockIssuanceDataTable = New ZulAssetsBEDataSet.rptStockIssuanceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LocationLabelTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LocationLabel"
            tableMapping.ColumnMappings.Add("LocID", "LocID")
            tableMapping.ColumnMappings.Add("LocBarcode", "LocBarcode")
            tableMapping.ColumnMappings.Add("LocDesc", "LocDesc")
            tableMapping.ColumnMappings.Add("Code", "Code")
            tableMapping.ColumnMappings.Add("CompleteCode", "CompleteCode")
            tableMapping.ColumnMappings.Add("CompleteDesc", "CompleteDesc")
            tableMapping.ColumnMappings.Add("CompanyID", "CompanyID")
            tableMapping.ColumnMappings.Add("CompanyCode", "CompanyCode")
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select LocID,'LOC' + LocID as LocBarcode,LocDesc,Code,CompCode as CompleteCode,Lo"& _ 
                "cationFullPath as CompleteDesc,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Companies.CompanyID,Companies.CompanyCode,Compa"& _ 
                "nies.CompanyName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" from location"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join Companies on Companies.Company"& _ 
                "ID = location.CompanyID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "select LocID,'LOC' + LocID as LocBarcode,LocDesc,Code,CompCode as CompleteCode,Lo"& _ 
                "cationFullPath as CompleteDesc,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Companies.CompanyID,Companies.CompanyCode,Compa"& _ 
                "nies.CompanyName from location"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join Companies on Companies.CompanyID"& _ 
                " = location.CompanyID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" LocId = ? or LocId like ?"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LocID", Global.System.Data.OleDb.OleDbType.[Char], 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LocID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LocID1", Global.System.Data.OleDb.OleDbType.[Char], 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LocID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "select LocID,'LOC' + LocID as LocBarcode,LocDesc,Code,CompCode as CompleteCode,Lo"& _ 
                "cationFullPath as CompleteDesc,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Companies.CompanyID,Companies.CompanyCode,Compa"& _ 
                "nies.CompanyName from location"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join Companies on Companies.CompanyID"& _ 
                " = location.CompanyID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where LocID =?"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LocID", Global.System.Data.OleDb.OleDbType.[Char], 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LocID", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.LocationLabelDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.LocationLabelDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.LocationLabelDataTable = New ZulAssetsBEDataSet.LocationLabelDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetChildDataByLocID(ByVal LocID As String, ByVal LocID1 As String) As ZulAssetsBEDataSet.LocationLabelDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (LocID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LocID")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LocID,String)
            End If
            If (LocID1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LocID1")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LocID1,String)
            End If
            Dim dataTable As ZulAssetsBEDataSet.LocationLabelDataTable = New ZulAssetsBEDataSet.LocationLabelDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLocID(ByVal LocID As String) As ZulAssetsBEDataSet.LocationLabelDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (LocID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LocID")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LocID,String)
            End If
            Dim dataTable As ZulAssetsBEDataSet.LocationLabelDataTable = New ZulAssetsBEDataSet.LocationLabelDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class rpt_AssetsLogTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rpt_AssetsLog"
            tableMapping.ColumnMappings.Add("AstID", "AstID")
            tableMapping.ColumnMappings.Add("AstNum", "AstNum")
            tableMapping.ColumnMappings.Add("RefNo", "RefNo")
            tableMapping.ColumnMappings.Add("CompCode", "CompCode")
            tableMapping.ColumnMappings.Add("CustodianName", "CustodianName")
            tableMapping.ColumnMappings.Add("AstCatDesc", "AstCatDesc")
            tableMapping.ColumnMappings.Add("PurDate", "PurDate")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("BaseCost", "BaseCost")
            tableMapping.ColumnMappings.Add("Tax", "Tax")
            tableMapping.ColumnMappings.Add("Discount", "Discount")
            tableMapping.ColumnMappings.Add("tot", "tot")
            tableMapping.ColumnMappings.Add("InvNumber", "InvNumber")
            tableMapping.ColumnMappings.Add("SuppName", "SuppName")
            tableMapping.ColumnMappings.Add("InsName", "InsName")
            tableMapping.ColumnMappings.Add("LocID", "LocID")
            tableMapping.ColumnMappings.Add("AstBrandName", "AstBrandName")
            tableMapping.ColumnMappings.Add("SrvDate", "SrvDate")
            tableMapping.ColumnMappings.Add("AstModel", "AstModel")
            tableMapping.ColumnMappings.Add("DispDate", "DispDate")
            tableMapping.ColumnMappings.Add("Disposed", "Disposed")
            tableMapping.ColumnMappings.Add("BarCode", "BarCode")
            tableMapping.ColumnMappings.Add("SerailNo", "SerailNo")
            tableMapping.ColumnMappings.Add("RefCode", "RefCode")
            tableMapping.ColumnMappings.Add("Plate", "Plate")
            tableMapping.ColumnMappings.Add("Poerp", "Poerp")
            tableMapping.ColumnMappings.Add("Capex", "Capex")
            tableMapping.ColumnMappings.Add("Grn", "Grn")
            tableMapping.ColumnMappings.Add("GLCode", "GLCode")
            tableMapping.ColumnMappings.Add("AstCatID", "AstCatID")
            tableMapping.ColumnMappings.Add("CatFullPath", "CatFullPath")
            tableMapping.ColumnMappings.Add("LocationFullPath", "LocationFullPath")
            tableMapping.ColumnMappings.Add("AstDesc1", "AstDesc1")
            tableMapping.ColumnMappings.Add("AstDesc2", "AstDesc2")
            tableMapping.ColumnMappings.Add("ItemDesc", "ItemDesc")
            tableMapping.ColumnMappings.Add("ItemCode", "ItemCode")
            tableMapping.ColumnMappings.Add("CompanyCode", "CompanyCode")
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName")
            tableMapping.ColumnMappings.Add("CustodianID", "CustodianID")
            tableMapping.ColumnMappings.Add("CustodianCode", "CustodianCode")
            tableMapping.ColumnMappings.Add("ActionType", "ActionType")
            tableMapping.ColumnMappings.Add("ActionDate", "ActionDate")
            tableMapping.ColumnMappings.Add("ActionUser", "ActionUser")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        AssetDetailsLog.AstID, AssetDetailsLog.AstNum, AssetDetailsLog.RefN"& _ 
                "o, Location.CompCode, Custodian.CustodianName, Category.AstCatDesc, AssetDetails"& _ 
                "Log.PurDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AssetDetailsLog.AstDesc AS Description, "& _ 
                "AssetDetailsLog.BaseCost, AssetDetailsLog.Tax, AssetDetailsLog.Discount, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    AssetDetailsLog.BaseCost + AssetDetailsLog.Tax - AssetDetail"& _ 
                "sLog.Discount AS tot, AssetDetailsLog.InvNumber, Supplier.SuppName, Insurer.InsN"& _ 
                "ame, Location.LocID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Brand.AstBrandName, AssetDetails"& _ 
                "Log.SrvDate, AssetDetailsLog.AstModel, AssetDetailsLog.DispDate, AssetDetailsLog"& _ 
                ".Disposed, AssetDetailsLog.BarCode, AssetDetailsLog.SerailNo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "         AssetDetailsLog.RefCode, AssetDetailsLog.Plate, AssetDetailsLog.Poerp, "& _ 
                "AssetDetailsLog.Capex, AssetDetailsLog.Grn, AssetDetailsLog.GLCode, Category.Ast"& _ 
                "CatID, Category.CatFullPath, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Location.LocationFullPat"& _ 
                "h, AssetDetailsLog.AstDesc AS AstDesc1, AssetDetailsLog.AstDesc2, Assets.AstDesc"& _ 
                " AS ItemDesc, Assets.ItemCode, Companies.CompanyCode, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        "& _ 
                " Companies.CompanyName, Custodian.CustodianID, Custodian.CustodianCode,AssetDeta"& _ 
                "ilsLog.ActionType,AssetDetailsLog.ActionDate,AssetDetailsLog.LastEditBY as Actio"& _ 
                "nUser"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            AssetDetailsLog INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Asse"& _ 
                "ts LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Category ON Category.AstCatID = Ass"& _ 
                "ets.AstCatID ON Assets.ItemCode = AssetDetailsLog.ItemCode INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                Custodian ON Custodian.CustodianID = AssetDetailsLog.CustodianID"& _ 
                " INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Companies ON Companies.CompanyId = AssetDe"& _ 
                "tailsLog.CompanyID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Brand ON AssetDetailsLog"& _ 
                ".AstBrandId = Brand.AstBrandID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Locatio"& _ 
                "n ON Location.LocID = AssetDetailsLog.LocID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      Supplier ON Supplier.SuppID = AssetDetailsLog.SuppID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                     Insurer ON Insurer.InsCode = AssetDetailsLog.InsID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER B"& _ 
                "Y AssetDetailsLog.AstNum"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.rpt_AssetsLogDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.rpt_AssetsLogDataTable = New ZulAssetsBEDataSet.rpt_AssetsLogDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CostCenterAuditStatusTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CostCenterAuditStatus"
            tableMapping.ColumnMappings.Add("CostID", "CostID")
            tableMapping.ColumnMappings.Add("CostNumber", "CostNumber")
            tableMapping.ColumnMappings.Add("CostName", "CostName")
            tableMapping.ColumnMappings.Add("TotalCount", "TotalCount")
            tableMapping.ColumnMappings.Add("Status", "Status")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ZulAssets.My.MySettings.Default.ZulAssetsBEConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select CostID,CostNumber,CostName,count(*) as TotalCount,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when Ast_History."& _ 
                "status = 0 then 'Missing'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when Ast_History.status = 1 then 'Found'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when Ast_Hi"& _ 
                "story.status = 2 then 'Misplaced'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when Ast_History.status = 3 then 'Transferred"& _ 
                "'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when Ast_History.status = 4 then 'Allocated'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when Ast_History.status = 5 the"& _ 
                "n 'Anonymous'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"end as Status"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from costcenter "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join  AssetDetails on"& _ 
                " costcenter.CostID  = AssetDetails.CostCenterID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join Ast_History on "& _ 
                "Ast_History.AstID = AssetDetails.AstID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join AuditStatus on AuditStat"& _ 
                "us.StatusID = Ast_history.Status"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join Ast_INV_Schedule on Ast_INV_Sc"& _ 
                "hedule.InvSchCode =  Ast_History.InvSchCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where Ast_History.IsDeleted =0  and"& _ 
                " Ast_History.Status<>6"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"group by CostID,CostNumber,CostName,Ast_History.status"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "order by costID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ZulAssetsBEDataSet.CostCenterAuditStatusDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ZulAssetsBEDataSet.CostCenterAuditStatusDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ZulAssetsBEDataSet.CostCenterAuditStatusDataTable = New ZulAssetsBEDataSet.CostCenterAuditStatusDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _assetByCatTableAdapter As AssetByCatTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AssetByCatTableAdapter() As AssetByCatTableAdapter
            Get
                Return Me._assetByCatTableAdapter
            End Get
            Set
                Me._assetByCatTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._assetByCatTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._assetByCatTableAdapter.Connection) Is Nothing)) Then
                    Return Me._assetByCatTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._assetByCatTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As ZulAssetsBEDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._assetByCatTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AssetByCat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._assetByCatTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As ZulAssetsBEDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._assetByCatTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AssetByCat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._assetByCatTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As ZulAssetsBEDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._assetByCatTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AssetByCat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._assetByCatTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As ZulAssetsBEDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._assetByCatTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._assetByCatTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._assetByCatTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._assetByCatTableAdapter, Me._assetByCatTableAdapter.Connection)
                    Me._assetByCatTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._assetByCatTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._assetByCatTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._assetByCatTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._assetByCatTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._assetByCatTableAdapter) Is Nothing) Then
                    Me._assetByCatTableAdapter.Connection = CType(revertConnections(Me._assetByCatTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._assetByCatTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
